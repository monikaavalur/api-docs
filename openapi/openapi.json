{
  "openapi": "3.0.1",
  "info": {
    "title": "Idaptive Identity Platform API",
    "description": "This site provides basic reference material for the Idaptive Identity Platform API. The API calls are grouped by category – click **Show/Hide** to view or hide the list of calls for each category. Click any call to expand the information for that call, **Expand Operations** to expand the information for all calls in that category, or **List Operations** to return to list view. \r\n \r\nTo  try out any of the calls:\r\n\r\n1.      Click the **Model Schema** box to transfer the data to the payload box (or enter data in the parameter boxes).\r\n\r\n2.      In **payload**, replace the field value-type descriptions with actual values. \r\n\r\n3.      Click **Try it out!** to execute the call.\r\n \r\nNote that you must be logged in to execute any calls. If you are not logged in, you can see all the reference material but the **Try it out!** button is not available to call the API. \r\n \r\nClick **Model** to view a description of each field in the response or payload, and click **Model Schema** to view the schema again.\r\n \r\nFor more information, see [developer site](http://developer.idaptive.com). ",
    "termsOfService": "https://www.idaptive.com/eula/",
    "version": "22.3.244-ae3a9663f"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication functions and ops"
    },
    {
      "name": "Authorization",
      "description": "Authorization functions and ops"
    },
    {
      "name": "Multi-Factor Registration",
      "description": "MFA related operations"
    },
    {
      "name": "User Management",
      "description": "Manage users for all Directory Services (AD, Cloud, LDAP, etc)"
    },
    {
      "name": "Role Management",
      "description": "Manage roles and admin rights"
    },
    {
      "name": "Policy Management",
      "description": "Manage policies"
    },
    {
      "name": "Organization Management",
      "description": "Organization related operations"
    },
    {
      "name": "Device Management",
      "description": "Device related operations"
    },
    {
      "name": "Application Management",
      "description": "Manage applications and SaaS"
    },
    {
      "name": "Tenant Management",
      "description": "Tenant Management related operations"
    },
    {
      "name": "OAuth & OpenID Connect",
      "description": "OAuth and OpenID Connect related operations"
    },
    {
      "name": "Device Set Management",
      "description": "Device Set Management related operations"
    },
    {
      "name": "Certificate Management",
      "description": "Certificates related operations"
    },
    {
      "name": "Directory Service Management",
      "description": "DirectoryService Management related operations"
    },
    {
      "name": "Connector Management",
      "description": "OAuth and OpenID Connect related operations"
    },
    {
      "name": "File Management",
      "description": "Files related operations"
    },
    {
      "name": "Widget Management",
      "description": "Widgets creation and customization using APIs"
    },
    {
      "name": "Social Login",
      "description": "Social Login related APIs"
    },
    {
      "name": "Customization",
      "description": "Customizations related APIs"
    },
    {
      "name": "Reports",
      "description": "Reports related APIs"
    },
    {
      "name": "Workflow Management",
      "description": "Workflows related APIs"
    },
    {
      "name": "Signup",
      "description": "SignUp related APIs"
    },
    {
      "name": "Additional APIs",
      "description": "Miscellaneous API's"
    }
  ],
  "paths": {
    "/Acl/CheckRowRight": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Check row ACLs.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Rights",
                  "RowKey",
                  "Table"
                ],
                "type": "object",
                "properties": {
                  "RowKey": {
                    "type": "string",
                    "description": "The unique identifier."
                  },
                  "Rights": {
                    "type": "boolean",
                    "description": "The right on the item."
                  },
                  "Table": {
                    "type": "array",
                    "description": "Sql table to examine.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AclCheckRowRight"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Acl/GetAce": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets a users access rights.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "integer",
                    "description": "The ace item ID."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AclGetAce"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Acl/GetCollectionAces": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Get a collection of access rights.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ReduceSysadmin",
                  "RowKey",
                  "Table"
                ],
                "type": "object",
                "properties": {
                  "RowKey": {
                    "type": "string",
                    "description": "Unique identifier."
                  },
                  "ReduceSysadmin": {
                    "type": "boolean",
                    "description": "Prevent generic cloud admin accounts from having access (default=false)."
                  },
                  "Table": {
                    "type": "array",
                    "description": "The table to access.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AclGetCollectionAces"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Acl/GetCollectionAcesHelper": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Gets the collection access rights based on the input parameters.",
        "parameters": [
          {
            "name": "table",
            "in": "query",
            "description": "The table to look in for the item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rowkey",
            "in": "query",
            "description": "The unique identifier for the item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reduceSysadmin",
            "in": "query",
            "description": "Prevent generic cloud admin accounts from having access.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AclGetCollectionAcesHelper"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Acl/GetDirAces": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Retrieves a list of who has what rights for the directory.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Path"
                ],
                "type": "object",
                "properties": {
                  "Path": {
                    "type": "string",
                    "description": "Path to the folder being examined."
                  },
                  "Inherit": {
                    "type": "boolean",
                    "description": "Use inheritance (default=true)."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AclGetDirAces"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Acl/GetEffectiveDirRights": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Gets a list of directory rights.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Paths"
                ],
                "type": "object",
                "properties": {
                  "Paths": {
                    "type": "array",
                    "description": "A list of directories.",
                    "items": {
                      "type": "string",
                      "description": "A directory path."
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AclGetEffectiveDirRights"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Acl/GetEffectiveFileRights": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Gets a list of file rights.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Paths"
                ],
                "type": "object",
                "properties": {
                  "Paths": {
                    "type": "array",
                    "description": "List of files to examine for rights.",
                    "items": {
                      "type": "string",
                      "description": "A file."
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AclGetEffectiveFileRights"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Acl/GetEffectiveRowRights": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Gets a list of row rights.",
        "description": "Only returns value if current user has at least read-rights.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Rows"
                ],
                "type": "object",
                "properties": {
                  "Rows": {
                    "type": "array",
                    "description": "Row rights of the user to look for.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "RowKey": {
                          "type": "string",
                          "description": "The unique identifer."
                        },
                        "ReduceSysadmin": {
                          "type": "boolean",
                          "description": "Prevent generic cloud admin accounts from having access (default=false)."
                        },
                        "Table": {
                          "type": "string",
                          "description": "Database table name."
                        }
                      },
                      "description": "A row of user rights."
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AclGetEffectiveRowRights"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Acl/GetFileAces": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Gets ACLs on a file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Inherit",
                  "Paths"
                ],
                "type": "object",
                "properties": {
                  "Inherit": {
                    "type": "boolean",
                    "description": "Use inheritance."
                  },
                  "Paths": {
                    "type": "array",
                    "description": "Path to the file.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AclGetFileAces"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Acl/GetRowAces": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Gets the access rights for a row.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "RowKey",
                  "Table"
                ],
                "type": "object",
                "properties": {
                  "RowKey": {
                    "type": "string",
                    "description": "The unique identifier."
                  },
                  "ReduceSysadmin": {
                    "type": "boolean",
                    "description": "Prevent generic cloud admin accounts from having access (default=false)."
                  },
                  "Inherit": {
                    "type": "boolean",
                    "description": "Use inheritance (default=true)."
                  },
                  "Table": {
                    "type": "string",
                    "description": "The sql table to examine."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AclGetRowAces"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Acl/GetRowAcesHelper": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Gets the row access rights based on the input parameters.",
        "parameters": [
          {
            "name": "reduceSys",
            "in": "query",
            "description": "Don't assume administrators have sysadmin permission.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inherit",
            "in": "query",
            "description": "Use inheritance.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "table",
            "in": "query",
            "description": "The table to look for the item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rk",
            "in": "query",
            "description": "The item of interest's row key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AclGetRowAcesHelper"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/AuthenticationWidgets/WidgetPage": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get Authentication Widget as Page",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationWidgetsWidgetPage"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/AuthProfile/DeleteProfile": {
      "post": {
        "tags": [
          "Policy Management"
        ],
        "summary": "Deletes an authentication profile.",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "description": "Authentication UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "uuid"
                ],
                "type": "object",
                "properties": {
                  "uuid": {
                    "type": "string",
                    "description": "The authentication profile uuid either passed in by method call or as part of the payload."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthProfileDeleteProfile"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/AuthProfile/GetProfile": {
      "post": {
        "tags": [
          "Policy Management"
        ],
        "summary": "Gets an authentication profile.",
        "description": "The profile get uses the uuid passed in by method call or as part of the payload.",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "description": "Profile UUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "uuid"
                ],
                "type": "object",
                "properties": {
                  "uuid": {
                    "type": "string",
                    "description": "The authentication profile uuid either passed in by method call or as part of the payload."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthProfileGetProfile"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/AuthProfile/GetProfileList": {
      "post": {
        "tags": [
          "Policy Management"
        ],
        "summary": "Gets a list of Authentication profiles.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthProfileGetProfileList"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/AuthProfile/GetProfileMFAScoring": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets an Authentication Assurance Level",
        "parameters": [
          {
            "name": "challenges",
            "in": "query",
            "description": "Profile factors",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthProfileGetProfileMFAScoring"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/AuthProfile/SaveProfile": {
      "post": {
        "tags": [
          "Policy Management"
        ],
        "summary": "Saves an authentication profile.",
        "description": "If the profile contains a UUID an update is performed, otherwise it's a write.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "settings"
                ],
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "object",
                    "properties": {
                      "Challenges": {
                        "type": "array",
                        "description": "Selected authentication mechanisms.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "AdditionalData": {
                        "type": "object",
                        "properties": {},
                        "description": "DataEntity with additional data (default=null)."
                      },
                      "Uuid": {
                        "type": "string",
                        "description": "Profile UUID."
                      },
                      "SingleChallengeMechanisms": {
                        "type": "string",
                        "description": "Selected single authentication mechanisms."
                      },
                      "DurationInMinutes": {
                        "type": "integer",
                        "description": "How many minutes the profile is valid."
                      },
                      "Name": {
                        "type": "string",
                        "description": "Profile name."
                      }
                    },
                    "description": "The authentication profile."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AuthProfileSaveProfile"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Brand/Info": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "The tenant brand information.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BrandInfo"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Brand/MyBrand": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "The tenant brand.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BrandMyBrand"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/CDirectoryService/BulkDeleteUsers": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deprecated -- Delete a list of users with permission check.",
        "description": "Deprecated -- use UserMgmt/RemoveUsers() instead.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Users"
                ],
                "type": "object",
                "properties": {
                  "Users": {
                    "type": "string",
                    "description": "List of users for removal."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceBulkDeleteUsers"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/CDirectoryService/ChangeUser": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Change cloud user properties.",
        "description": "User must be a cloud user.\n            Specified user must be you, you must be a system administrator or have user management permissions.\n            Specifying 'ServiceUser' will override the 'InEveryBodyRole' property if both are provided.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "CmaRedirectedUserUuid": {
                    "type": "string",
                    "description": "Idaptive mobile authenticator redirected user uuid"
                  },
                  "HomeNumber": {
                    "type": "string",
                    "description": "User home number."
                  },
                  "AccountExp": {
                    "type": "string",
                    "description": "Account expires date/time.  You must be a system administrator or have user management permissions to change this field.",
                    "format": "date-time"
                  },
                  "ReportsTo": {
                    "type": "string",
                    "description": "User reports to this user UUID.  You must be a system administrator or have user management permissions to change this field."
                  },
                  "DisplayName": {
                    "type": "string",
                    "description": "User display name."
                  },
                  "PasswordNeverExpire": {
                    "type": "boolean",
                    "description": "Does user's password expire?  You must be a system administrator or have user management permissions to change this field."
                  },
                  "ID": {
                    "type": "string",
                    "description": "UUID of the cloud user to change (default=current user)."
                  },
                  "OfficeNumber": {
                    "type": "string",
                    "description": "User office number."
                  },
                  "MobileNumber": {
                    "type": "string",
                    "description": "User mobile number."
                  },
                  "InEverybodyRole": {
                    "type": "boolean",
                    "description": "Is user in the Everybody role?  You must be a system administrator or have user management permissions to change this field."
                  },
                  "ServiceUser": {
                    "type": "boolean",
                    "description": "User is a service user"
                  },
                  "PreferredCulture": {
                    "type": "string",
                    "description": "User preferred culture."
                  },
                  "Mail": {
                    "type": "string",
                    "description": "User email."
                  },
                  "Description": {
                    "type": "string",
                    "description": "User description."
                  },
                  "Name": {
                    "type": "string",
                    "description": "User name.  You must be a system administrator or have user management permissions to change this field."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceChangeUser"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/CDirectoryService/ChangeUserState": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Change the state of a cloud user from disabled to active or vice versa",
        "description": "<p><ul><li>Invoke this API when you want to change the user state from disabled to active or vice versa</li>\n             <li>Only system administrator, users with user management rights, or the user itself can invoke this API.</li>\n             <li>The API will fail, if the user itself will try to change its user state.</li></ul></p>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "state",
                  "uuid"
                ],
                "type": "object",
                "properties": {
                  "uuid": {
                    "type": "string",
                    "description": "The unique ID of the user. The unique ID is generated when the user is created"
                  },
                  "state": {
                    "type": "boolean",
                    "description": "Boolean value to change the user state. True = Active and False = Suspended"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceChangeUserState"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/CDirectoryService/CreateUser": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Create a new user in the Cloud Directory Service.",
        "description": "You must be a system administrator or have user management permissions.\n            Specifying 'ServiceUser' will override the 'InEveryBodyRole' property if both are provided.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Name"
                ],
                "type": "object",
                "properties": {
                  "InEverybodyRole": {
                    "type": "boolean",
                    "description": "Place user in Everybody role (default=true)"
                  },
                  "SendSmsInvite": {
                    "type": "boolean",
                    "description": "Send user an sms invite to enroll their mobile device in the protal (default=false)"
                  },
                  "InSysAdminRole": {
                    "type": "boolean",
                    "description": "Place user in System Adminstrator role (default=false)"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description of user (default=null)"
                  },
                  "Name": {
                    "type": "string",
                    "description": "Name of user"
                  },
                  "MobileNumber": {
                    "type": "string",
                    "description": "User's mobile number (default=null); note this field is required if SendSmsInvite is true"
                  },
                  "Password": {
                    "type": "string",
                    "description": "URL encoded password of the user (default=randomly generated strong password)"
                  },
                  "CmaRedirectedUserUuid": {
                    "type": "string",
                    "description": "Idaptive mobile authenticator redirected user uuid"
                  },
                  "ServiceUser": {
                    "type": "boolean",
                    "description": "User is a service user (default=false)"
                  },
                  "OfficeNumber": {
                    "type": "string",
                    "description": "User's office number (default=null)"
                  },
                  "ReportsTo": {
                    "type": "string",
                    "description": "Uuid of user this user reports to (default=null)"
                  },
                  "SendEmailInvite": {
                    "type": "boolean",
                    "description": "Send user an email invite to the portal (default=true)"
                  },
                  "HomeNumber": {
                    "type": "string",
                    "description": "User's home number (default=null)"
                  },
                  "DisplayName": {
                    "type": "string",
                    "description": "Display name of user (default=null)"
                  },
                  "ForcePasswordChangeNext": {
                    "type": "boolean",
                    "description": "Force password change at first login (default=true)"
                  },
                  "PasswordNeverExpire": {
                    "type": "boolean",
                    "description": "User's password never expires (default=false)"
                  },
                  "Mail": {
                    "type": "string",
                    "description": "Email of user (default=null); note this field is required if 'SendEmailInvite' is true."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceCreateUser"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/CDirectoryService/CreateUserBulk": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Create new users in the Cloud Directory Service based on data read from files.",
        "description": "You must be a system administrator or have user management permissions.\n                Specifying 'ServiceUser' will override the 'InEveryBodyRole' property if both are provided.\n                \n                The file(s) must conform to the following format:",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Name"
                ],
                "type": "object",
                "properties": {
                  "InEverybodyRole": {
                    "type": "boolean",
                    "description": "Place user in Everybody role (default=true)."
                  },
                  "SendSmsInvite": {
                    "type": "boolean",
                    "description": "Send user an sms invite to enroll their mobile device in the protal (default=false)."
                  },
                  "InSysAdminRole": {
                    "type": "boolean",
                    "description": "Place user in System Adminstrator role (default=false)."
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description of user (default=null)."
                  },
                  "Name": {
                    "type": "string",
                    "description": "Name of user."
                  },
                  "MobileNumber": {
                    "type": "string",
                    "description": "User's mobile number (default=null); note this field is required if SendSmsInvite is true."
                  },
                  "Password": {
                    "type": "string",
                    "description": "URL encoded password of the user (default=randomly generated strong password)."
                  },
                  "CmaRedirectedUserUuid": {
                    "type": "string",
                    "description": "Idaptive mobile authenticator redirected user uuid."
                  },
                  "ServiceUser": {
                    "type": "boolean",
                    "description": "User is a service user (default=false)."
                  },
                  "OfficeNumber": {
                    "type": "string",
                    "description": "User's office number (default=null)."
                  },
                  "ReportsTo": {
                    "type": "string",
                    "description": "Uuid of user this user reports to (default=null)."
                  },
                  "SendEmailInvite": {
                    "type": "boolean",
                    "description": "Send user an email invite to the portal (default=true)."
                  },
                  "HomeNumber": {
                    "type": "string",
                    "description": "User's home number (default=null)."
                  },
                  "DisplayName": {
                    "type": "string",
                    "description": "Display name of user (default=null)."
                  },
                  "ForcePasswordChangeNext": {
                    "type": "boolean",
                    "description": "Force password change at first login (default=true)."
                  },
                  "PasswordNeverExpire": {
                    "type": "boolean",
                    "description": "User's password never expires (default=false)."
                  },
                  "Mail": {
                    "type": "string",
                    "description": "Email of user (default=null); note this field is required if 'SendEmailInvite' is true."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceCreateUserBulk"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/CDirectoryService/CreateUserQuick": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Create a new user in the Cloud Directory Service using minimal user information.",
        "description": "You must be a system administrator or have user management permissions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Mail",
                  "Name"
                ],
                "type": "object",
                "properties": {
                  "HomeNumber": {
                    "type": "string",
                    "description": "User home phone number (default=null)"
                  },
                  "AccountExp": {
                    "type": "string",
                    "description": "Date/time account expires (default=never)",
                    "format": "date-time"
                  },
                  "ReportsTo": {
                    "type": "string",
                    "description": "User reports to user UUID (default=null)"
                  },
                  "PasswordNeverExpire": {
                    "type": "string",
                    "description": "Does the user's password never expire (must be 'True' or 'False)? (default=False)"
                  },
                  "DisplayName": {
                    "type": "string",
                    "description": "User display name (default=null)"
                  },
                  "OfficeNumber": {
                    "type": "string",
                    "description": "User office phone number (default=null)"
                  },
                  "MobileNumber": {
                    "type": "string",
                    "description": "User mobile phone number (default=null)"
                  },
                  "InEverybodyRole": {
                    "type": "string",
                    "description": "Is user in the Everybody role (must be 'True' or 'False)? (default=True)"
                  },
                  "Mail": {
                    "type": "string",
                    "description": "Email of user"
                  },
                  "Description": {
                    "type": "string",
                    "description": "User description (default=null)"
                  },
                  "Name": {
                    "type": "string",
                    "description": "Name of user"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceCreateUserQuick"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/CDirectoryService/CreateUsers": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Create new users in the Cloud Directory Service.",
        "description": "You must be a system administrator or have user management permissions.\n            Specifying 'ServiceUser' will override the 'InEveryBodyRole' property if both are provided.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Rows"
                ],
                "type": "object",
                "properties": {
                  "Rows": {
                    "type": "array",
                    "description": "List of users to create.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "InEverybodyRole": {
                          "type": "boolean",
                          "description": "Place user in Everybody role (default=true)."
                        },
                        "SendSmsInvite": {
                          "type": "boolean",
                          "description": "Send user an sms invite to enroll their mobile device in the protal (default=false)."
                        },
                        "InSysAdminRole": {
                          "type": "boolean",
                          "description": "Place user in System Adminstrator role (default=false)."
                        },
                        "Description": {
                          "type": "string",
                          "description": "Description of user (default=null)."
                        },
                        "Name": {
                          "type": "string",
                          "description": "Name of user."
                        },
                        "MobileNumber": {
                          "type": "string",
                          "description": "User's mobile number (default=null); note this field is required if SendSmsInvite is true."
                        },
                        "Password": {
                          "type": "string",
                          "description": "URL encoded password of the user (default=randomly generated strong password)."
                        },
                        "CmaRedirectedUserUuid": {
                          "type": "string",
                          "description": "Idaptive mobile authenticator redirected user uuid."
                        },
                        "ServiceUser": {
                          "type": "boolean",
                          "description": "User is a service user (default=false)."
                        },
                        "OfficeNumber": {
                          "type": "string",
                          "description": "User's office number (default=null)."
                        },
                        "ReportsTo": {
                          "type": "string",
                          "description": "Uuid of user this user reports to (default=null)."
                        },
                        "SendEmailInvite": {
                          "type": "boolean",
                          "description": "Send user an email invite to the portal (default=true)."
                        },
                        "HomeNumber": {
                          "type": "string",
                          "description": "User's home number (default=null)."
                        },
                        "DisplayName": {
                          "type": "string",
                          "description": "Display name of user (default=null)."
                        },
                        "ForcePasswordChangeNext": {
                          "type": "boolean",
                          "description": "Force password change at first login (default=true)."
                        },
                        "PasswordNeverExpire": {
                          "type": "boolean",
                          "description": "User's password never expires (default=false)."
                        },
                        "Mail": {
                          "type": "string",
                          "description": "Email of user (default=null); note this field is required if 'SendEmailInvite' is true."
                        }
                      },
                      "description": "Information describing the user to be created."
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceCreateUsers"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/CDirectoryService/Delete": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Delete user after permission check (DEPRECATED)",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "User UUID or Name to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceDelete"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false
      }
    },
    "/CDirectoryService/DeleteUser": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Delete a cloud user. (DEPRECATED)",
        "description": "(Deprecated - use UserMgmt/RemoveUser instead.)\n            You must be a system administrator or have user management permissions.  User must exist, and cannot be the current user.\n            Cloud users will be deleted; users from other directory services will be removed from the cloud.",
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "description": "User UUID or Name to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceDeleteUser"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false
      }
    },
    "/CDirectoryService/ExemptUserFromMfa": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Exempt a specified user from MFA login for a period of time.",
        "description": "You must be a system administrator or have user management permissions.  User is exempt from MFA login for a specified amount of time.",
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "description": "User UUID to except from MFA",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timespan",
            "in": "query",
            "description": "Amount of time to exempt the user from MFA (default=10 minutes)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceExemptUserFromMfa"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/CDirectoryService/GetBulkImportWithExtAtt": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Bulk imports users from csv file.",
        "parameters": [
          {
            "name": "importType",
            "in": "query",
            "description": "Import Type of CSV file. Defaults to BulkUser",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceGetBulkImportWithExtAtt"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/CDirectoryService/GetDirectoryServiceSettings": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get all of the directory service settings",
        "description": "Caller should have read access",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceGetDirectoryServiceSettings"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/CDirectoryService/GetTechSupportUser": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Fetch technical support user.",
        "description": "You must be a system administrator or have user management permissions.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceGetTechSupportUser"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/CDirectoryService/GetUser": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Get details for a specified cloud user.",
        "description": "Specified user must be you, you must be a system administrator, or have user management permissions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "string",
                    "description": "UUID of the cloud user to fetch (default=current user)."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceGetUser"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/CDirectoryService/GetUserAttributes": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Get details for the current user.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceGetUserAttributes"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/CDirectoryService/GetUserByName": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Get details for a specified user by name.",
        "description": "Specified user must be you, you must be a system administrator, or have user management permissions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "User name of the cloud user to fetch (default=current user)."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceGetUserByName"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/CDirectoryService/GetUsers": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Get all cloud users.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceGetUsers"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/CDirectoryService/GetUsersFromCsvFile": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Reads users from a csv file(s).",
        "parameters": [
          {
            "name": "importType",
            "in": "query",
            "description": "Bulk import type to process. Default is Bulk User Import",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "FileName"
                ],
                "type": "object",
                "properties": {
                  "FileName": {
                    "type": "object",
                    "properties": {
                      "InEverybodyRole": {
                        "type": "boolean",
                        "description": "Place user in Everybody role (default=true)."
                      },
                      "SendSmsInvite": {
                        "type": "boolean",
                        "description": "Send user an sms invite to enroll their mobile device in the protal (default=false)."
                      },
                      "InSysAdminRole": {
                        "type": "boolean",
                        "description": "Place user in System Adminstrator role (default=false)."
                      },
                      "Description": {
                        "type": "string",
                        "description": "Description of user (default=null)."
                      },
                      "Name": {
                        "type": "string",
                        "description": "Name of user."
                      },
                      "MobileNumber": {
                        "type": "string",
                        "description": "User's mobile number (default=null); note this field is required if SendSmsInvite is true."
                      },
                      "Password": {
                        "type": "string",
                        "description": "URL encoded password of the user (default=randomly generated strong password)."
                      },
                      "CmaRedirectedUserUuid": {
                        "type": "string",
                        "description": "Idaptive mobile authenticator redirected user uuid."
                      },
                      "ServiceUser": {
                        "type": "boolean",
                        "description": "User is a service user (default=false)."
                      },
                      "OfficeNumber": {
                        "type": "string",
                        "description": "User's office number (default=null)."
                      },
                      "ReportsTo": {
                        "type": "string",
                        "description": "Uuid of user this user reports to (default=null)."
                      },
                      "SendEmailInvite": {
                        "type": "boolean",
                        "description": "Send user an email invite to the portal (default=true)."
                      },
                      "HomeNumber": {
                        "type": "string",
                        "description": "User's home number (default=null)."
                      },
                      "DisplayName": {
                        "type": "string",
                        "description": "Display name of user (default=null)."
                      },
                      "ForcePasswordChangeNext": {
                        "type": "boolean",
                        "description": "Force password change at first login (default=true)."
                      },
                      "PasswordNeverExpire": {
                        "type": "boolean",
                        "description": "User's password never expires (default=false)."
                      },
                      "Mail": {
                        "type": "string",
                        "description": "Email of user (default=null); note this field is required if 'SendEmailInvite' is true."
                      }
                    },
                    "description": "The csv file containing user information."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceGetUsersFromCsvFile"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/CDirectoryService/GrantAccess": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Grant portal access to technical support.",
        "description": "You must be a system administrator or have user management permissions.  Support will receive portal access for the specified time period.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "SupportAccessTimeInMinute": {
                    "type": "integer",
                    "description": "Number of minutes support user will have portal access (default=240 (4 hours), max of 30 days)"
                  },
                  "SupportEmailAddress": {
                    "type": "string",
                    "description": "Email address of the support user (default=internal support email); an email with login info will be sent to this address."
                  },
                  "SendEmail": {
                    "type": "boolean",
                    "description": "Whether or not to send Auth URL in email (default=true); if false, Auth URL will be in the 'AuthUrl' response property"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceGrantAccess"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/CDirectoryService/RefreshToken": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management",
          "Directory Service Management"
        ],
        "summary": "Refresh a user's cached identity.",
        "description": "You must be a system administrator or have user management permissions.  User cached identity in the cloud is reloaded from their directory service.\n            Useful when user details have changed in their remote directory service, but have not yet been pushed to the cloud.",
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "description": "User UUID to refresh",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "directoryServiceUuid",
            "in": "query",
            "description": "UUID of the user's directory service (default=null)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceRefreshToken"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/CDirectoryService/RemoveAuthSource": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Removes AuthSource for list of users",
        "description": "You must be a system administrator or have user management permissions.\n            May perform the updates to users asyncronously if list of users is large (will return before updates are complete).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Users"
                ],
                "type": "object",
                "properties": {
                  "SendInvites": {
                    "type": "boolean",
                    "description": "Send email invitation to updated users (default=false)"
                  },
                  "Users": {
                    "type": "array",
                    "description": "List of user UUIDs/names to to remove Auth Source from",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceRemoveAuthSource"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/CDirectoryService/RemoveFederationAuthSource": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Removes AuthSource from all users for a given Federation",
        "description": "You must be a system administrator or have user management permissions.\n            Will perform the updates to users asyncronously (will return before updates are complete).",
        "parameters": [
          {
            "name": "federationUuid",
            "in": "query",
            "description": "Federation UUID to remove from Auth Source for all users.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sendInvites",
            "in": "query",
            "description": "Send email invitation to updated users (default=false)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceRemoveFederationAuthSource"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/CDirectoryService/SendIdentityVerificationOTP": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Send SendIdentityVerificationOTP to a specified user.",
        "description": "You must have Identity Verification permissions (set on the role).",
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "description": "User UUID to send identification verification OTP",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceSendIdentityVerificationOTP"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/CDirectoryService/SetDirectoryServiceSettings": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Sets all given directory service setting values",
        "description": "Caller should have admin access",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "DefaultSuffix"
                ],
                "type": "object",
                "properties": {
                  "DefaultSuffix": {
                    "type": "string",
                    "description": "The alias to use when suffix is omitted from the userName."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceSetDirectoryServiceSettings"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/CDirectoryService/SetUserPicture": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Set a cloud user's picture file.",
        "description": "Specified user must be you, you must be a system administrator or have user management permissions.\n                The file is attached to the call so need to figure out how to document that without bodyargs",
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "description": "User UUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "object",
                    "properties": {},
                    "description": "File containing the users picture, in the form-data.  (Not as a parameter.)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceSetUserPicture"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/CDirectoryService/SetUserState": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Set user State (locked, disabled, expired) for a specified cloud user.",
        "description": "You must be a system administrator or have user management permissions.  Specified cloud user may not be the default system adminstrator.\n            Specified new state may either be 'None' or include one or more of the following values (comma separated): Locked, Disabled, or Expired.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID",
                  "state"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "string",
                    "description": "UUID of the cloud user to change."
                  },
                  "state": {
                    "type": "string",
                    "description": "New state of the user."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceSetUserState"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/CDirectoryService/Signup": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Create a new user in the Cloud Directory Service via the SignUp mechanism.(Early Access)",
        "description": "<strong><font color = #46B8DA> Early access </font>\n            This API is an early access API. It is possible that it may change in near future.</strong>\n            The SignUp mechanism enables 3rd party integrations for identity verification, marketing automation, behavioral biometrics among others.\n            You must be a system administrator or have user management permissions.\n            This api also has an option to Auto Login the user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Name"
                ],
                "type": "object",
                "properties": {
                  "Password": {
                    "type": "string",
                    "description": "URL encoded password of the user (default=randomly generated strong password)"
                  },
                  "HomeNumber": {
                    "type": "string",
                    "description": "User's home number (default=null)"
                  },
                  "DisplayName": {
                    "type": "string",
                    "description": "Display name of user (default=null)"
                  },
                  "IsEmailVerificationRequired": {
                    "type": "boolean",
                    "description": "User's recevie email if true (default=false)"
                  },
                  "OfficeNumber": {
                    "type": "string",
                    "description": "User's office number (default=null)"
                  },
                  "ForcePasswordChangeNext": {
                    "type": "boolean",
                    "description": "Force password change at first login (default=true)"
                  },
                  "MobileNumber": {
                    "type": "string",
                    "description": "User's mobile number (default=null); note this field is required when either Mail is not provided or Identity Verification has to be done"
                  },
                  "AutoLogin": {
                    "type": "boolean",
                    "description": "User's can autologin if true (default=false)"
                  },
                  "Mail": {
                    "type": "string",
                    "description": "Email of user (default=null); note this field is required if either MobileNumber is not provided or 'SendEmailInvite' is true or Identity Verification has to be done."
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description of user (default=null)"
                  },
                  "Name": {
                    "type": "string",
                    "description": "Name of user. format:username@suffix"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceSignup"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/CDirectoryService/StandardJsonResultWithPermissionCheck": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Performs the action after confirming permission to do so.",
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "description": "The action to be performed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Option parameter to apply collection scope to authorization check",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceStandardJsonResultWithPermissionCheck"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/CDirectoryService/SubmitUploadedFile": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Create a Bulk User Import scheduled task to process the uploaded file.",
        "description": "Seems to be second part of a two part call.",
        "parameters": [
          {
            "name": "importType",
            "in": "query",
            "description": "Bulk import type to process. Default is Bulk User Import",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "object",
                    "properties": {},
                    "description": "File containing the users to be created by the scheduled task, uploaded in the form-data, not as JSON."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceSubmitUploadedFile"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/CDirectoryService/VerifyIdentityOTP": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "VerifyIdentityOTP:  Verify if the One Time Passcode matched with the stored value",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "user uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "guid",
            "in": "query",
            "description": "GUID for the storage ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "One Time Passcode",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CDirectoryServiceVerifyIdentityOTP"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Collection/CreateDynamicCollection": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Create a dynamic set.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "objecttype"
                ],
                "type": "object",
                "properties": {
                  "sql": {
                    "type": "string",
                    "description": "Query used to create the collection."
                  },
                  "filters": {
                    "type": "string",
                    "description": "Filters to use when generating thew collection."
                  },
                  "objecttype": {
                    "type": "string",
                    "description": "The object type."
                  },
                  "subobjecttype": {
                    "type": "string",
                    "description": "The object's sub type."
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the collection."
                  },
                  "name": {
                    "type": "string",
                    "description": "The collection name."
                  },
                  "parent": {
                    "type": "string",
                    "description": "The collection's parent."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionCreateDynamicCollection"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Collection/CreateManualCollection": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Create a manual set.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Name",
                  "ObjectType"
                ],
                "type": "object",
                "properties": {
                  "SubObjectType": {
                    "type": "string",
                    "description": "The collection object type."
                  },
                  "ObjectType": {
                    "type": "string",
                    "description": "The collection object type."
                  },
                  "Add": {
                    "type": "string",
                    "description": "Defines what collection member this item has."
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description of the collection."
                  },
                  "Parent": {
                    "type": "string",
                    "description": "This collections parent id."
                  },
                  "Name": {
                    "type": "string",
                    "description": "The collection name."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionCreateManualCollection"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Collection/DeleteCollection": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Delete a set.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "integer",
                    "description": "The ID reference to the collection."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionDeleteCollection"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Collection/GetBucketContents": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the contents of a bucket.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "integer",
                    "description": "Collecion ID."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionGetBucketContents"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Collection/GetCollection": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets a set based on the ID.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "integer",
                    "description": "The ID of the collection."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionGetCollection"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Collection/GetCollectionPermissions": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get list of permissions associated with a set.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "string",
                    "description": "ID of the collection, set to null to get global permissions"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionGetCollectionPermissions"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Collection/GetCollectionReferences": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the references to a set.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "integer",
                    "description": "The set id to look at."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionGetCollectionReferences"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Collection/GetCollectionRights": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the rights on a set.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "string",
                    "description": "ID of the collection, set to null to get global permissions."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionGetCollectionRights"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Collection/GetCollectionTemplate": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets a set template based on ObjectType and SubObjectType.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ObjectType"
                ],
                "type": "object",
                "properties": {
                  "SubObjectType": {
                    "type": "string",
                    "description": "The sub object type of the colleciton(s)."
                  },
                  "ObjectType": {
                    "type": "integer",
                    "description": "The object type of the collection(s)."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionGetCollectionTemplate"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Collection/GetMembers": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Gets the members with access to the set.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "integer",
                    "description": "The uuid reference to a collection."
                  },
                  "recurse": {
                    "type": "boolean",
                    "description": "Determines if Effective or Declared members are returned. (default=false)."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionGetMembers"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Collection/GetObjectCollections": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the objects set.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ObjectType"
                ],
                "type": "object",
                "properties": {
                  "SubObjectType": {
                    "type": "string",
                    "description": "The sub object type of the colleciton."
                  },
                  "ObjectType": {
                    "type": "integer",
                    "description": "The object type of the collection."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionGetObjectCollections"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Collection/GetObjectCollectionsAndFilters": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets a set of ObjectType.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "CollectionType",
                  "NoBuiltIns",
                  "ObjectType"
                ],
                "type": "object",
                "properties": {
                  "SubObjectType": {
                    "type": "string",
                    "description": "The sub object type of the colleciton(s)."
                  },
                  "ObjectType": {
                    "type": "integer",
                    "description": "The object type of the collection(s)."
                  },
                  "ReduceSysadmin": {
                    "type": "boolean",
                    "description": "Prevent generic cloud admin accounts from having access (default=false)."
                  },
                  "CollectionType": {
                    "type": "string",
                    "description": "The type of collections to look for"
                  },
                  "NoBuiltIns": {
                    "type": "boolean",
                    "description": "(default=false)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionGetObjectCollectionsAndFilters"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Collection/IsMember": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the members with access to the set.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID",
                  "Key",
                  "Table"
                ],
                "type": "object",
                "properties": {
                  "directHint": {
                    "type": "boolean",
                    "description": ""
                  },
                  "ID": {
                    "type": "integer",
                    "description": "The uuid reference to a collection."
                  },
                  "recurse": {
                    "type": "boolean",
                    "description": "Look for children (default=false)."
                  },
                  "Table": {
                    "type": "string",
                    "description": "Member table."
                  },
                  "Key": {
                    "type": "string",
                    "description": "The key to use when examining the table."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionIsMember"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Collection/SetCollectionPermissions": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Grant permissions on a set",
        "description": "You must be a system administrator or have 'Grant' permission on the collection or have global 'Grant' permission on collections.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Grants"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "string",
                    "description": "ID of the collection, Set to null for global permissions"
                  },
                  "Grants": {
                    "type": "object",
                    "properties": {
                      "Rights": {
                        "type": "string",
                        "description": "Permissions:  Edit, Delete, Grant"
                      },
                      "Principal": {
                        "type": "string",
                        "description": "User name or role name"
                      },
                      "PrincipalId": {
                        "type": "string",
                        "description": "Uuid of the principal"
                      },
                      "PType": {
                        "type": "string",
                        "description": "Principal type: User, Role etc.."
                      }
                    },
                    "description": "Array of permissions to be set. Each item must include  Principal: User name or role name, PType: User, Role..,  Rights: Grant, Edit.. "
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionSetCollectionPermissions"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Collection/UpdateCollection": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Update a set.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID"
                ],
                "type": "object",
                "properties": {
                  "sql": {
                    "type": "string",
                    "description": "Query used to create the set."
                  },
                  "ID": {
                    "type": "string",
                    "description": "The uuid reference to the set."
                  },
                  "desccription": {
                    "type": "string",
                    "description": "The set description."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the referenced set."
                  },
                  "parent": {
                    "type": "string",
                    "description": "This sets parent uuid."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionUpdateCollection"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Collection/UpdateMembersCollection": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Updates the set members.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "args"
                ],
                "type": "object",
                "properties": {
                  "args": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The uuid of the collection to be modified."
                      },
                      "Add": {
                        "type": "array",
                        "description": "A list of members to add to the set.",
                        "items": {
                          "type": "string",
                          "description": "A member."
                        }
                      },
                      "Remove": {
                        "type": "array",
                        "description": "A list of members to remove from the set.",
                        "items": {
                          "type": "string",
                          "description": "A member."
                        }
                      }
                    },
                    "description": "The request to be updated."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionUpdateMembersCollection"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ConsentManagement/GetConsentManagementProviderConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "To get Consent Management Configuration",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentManagementGetConsentManagementProviderConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/ConsentManagement/GetScriptWithMetaData": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get Consent Management Script and script editor helper info",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentManagementGetScriptWithMetaData"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/ConsentManagement/IsConsentManagementEnabled": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "To Find if Consent Management is enabled",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentManagementIsConsentManagementEnabled"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/ConsentManagement/UpdateConsentManagementConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Update Consent Management Configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ConnectionSettings",
                  "ConsentScriptData"
                ],
                "type": "object",
                "properties": {
                  "ConsentScriptData": {
                    "type": "string",
                    "description": "Consent Management Script Text"
                  },
                  "ConnectionSettings": {
                    "type": "object",
                    "properties": {},
                    "description": "connection settings defined by the user"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConsentManagementUpdateConsentManagementConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Core/AddBlockedIpRange": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deprecated -- Adds a Blocked IP Range.",
        "description": "Deprecated -- Use /core/UpdateBlockedIpRange instead",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "description": "IP Range to block.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "oldvalue",
            "in": "query",
            "description": "An old IP range to remove. If there is one.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label",
            "in": "query",
            "description": "What label to give this blocked IP range.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreAddBlockedIpRange"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false
      }
    },
    "/Core/AddPremDetectRange": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deprecated -- Adds an IP Range local to the customer network.",
        "description": "Deprecated --  Use /Core/UpdatePremDetectRange",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "description": "IP range to add.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "oldvalue",
            "in": "query",
            "description": "An old IP range to remove. If there is one.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label",
            "in": "query",
            "description": "What label to give this IP range.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreAddPremDetectRange"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false
      }
    },
    "/Core/AssignDirectoryFileRightsToRoles": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "Assigns directoryfile rights to roles.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Permission",
                  "path"
                ],
                "type": "object",
                "properties": {
                  "Permission": {
                    "type": "object",
                    "properties": {
                      "Role": {
                        "type": "string",
                        "description": "What role to grant to the directoryfile."
                      },
                      "Rights": {
                        "type": "string",
                        "description": "What rights to allow the role."
                      }
                    },
                    "description": "What rights and roles to assign the directoryfile."
                  },
                  "path": {
                    "type": "string",
                    "description": "The directoryfile to assign rights and roles to."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreAssignDirectoryFileRightsToRoles"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Core/AssignDirectoryRightsToRoles": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "Assigns directory rights to roles.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Permission",
                  "path"
                ],
                "type": "object",
                "properties": {
                  "Permission": {
                    "type": "object",
                    "properties": {
                      "Role": {
                        "type": "string",
                        "description": "What role to grant to the directory."
                      },
                      "Rights": {
                        "type": "string",
                        "description": "What rights to allow the role."
                      }
                    },
                    "description": "What rights and roles to assign the directory."
                  },
                  "path": {
                    "type": "string",
                    "description": "The directory to assign rights and roles to."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreAssignDirectoryRightsToRoles"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Core/AssignFileRightsToRoles": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "Assigns file rights to roles.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Permission",
                  "path"
                ],
                "type": "object",
                "properties": {
                  "Permission": {
                    "type": "object",
                    "properties": {
                      "Role": {
                        "type": "string",
                        "description": "What role to grant to the file."
                      },
                      "Rights": {
                        "type": "string",
                        "description": "What rights to allow the role."
                      }
                    },
                    "description": "What rights and roles to assign the file."
                  },
                  "path": {
                    "type": "string",
                    "description": "The file to assign rights and roles to."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreAssignFileRightsToRoles"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Core/CheckProxyHealth": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Requests a heath check from a specific cloud connector or from all cloud connectors.",
        "description": "Returns a JSON package that includes health information for one or more connectors.\n            Each connector contains a health status from one or more regions within the connector.\n            There will always be a region which reports on the general health of the connector.  I.e. each connector includes a 'ConnectorInfo' region which will have a 'Status'.\n            There may be other regions that report on the health of specific features within the connector.  E.g. if the connector supports AD, there will be an 'AdInfo' section that covers AD. \n            When determining the overall heath of a connector, examine the 'Status' of each region.  It is possible for regions to have different statuses.  E.g. the 'ConnectorInfo' region may have a Status of 'Healthy' while the 'AdInfo' region has a status of 'Unhealthy'.\n            The list of regions returned will vary based on various factors.  E.g. if the cloud cannot reach the connector, the 'ConnectorInfo' Status will be 'Unhealthy' and there will be no 'AdInfo' region.\n            Additional regions may be added in the future without a Version change (if they follow the format of the existing regions).\n            Return package breakdown:\n            The top level object contains a list of Connectors and a package Version\n            { \n              \"Connectors\": [ ... ], \n              \"Version\": \"1.0\" \n            } \n            Each connector in the array contains a generic 'ConnectorInfo' region and might contain additional regions like 'AdInfo' (depending upon how the connector is configured):\n            {\n              \"ConnectorInfo\": { ... },\n              \"AdInfo\": { ... }\n              ...\n            }\n            The 'ConnectorInfo' region contains information that other identification data, a list of enabled features and the status of the connector itself (without considering AD):\n            \"ConnectorInfo\":\n            {\n              \"Id\": \"31dfe79d-2c7f-4e40-9b1b-2e897f6f0ca1\", \n              \"Version\": \"1.0.0.0\", \n              \"MachineName\": \"clouddev-dev1\", \n              \"FeaturesEnabled\": [ \"adwatcher\", \"mobile.gpupdate\", \"mobile.stateSync\" ], \n              \"Name\": \"clouddev-dev1\", \n              \"Status\": \"Healthy\" \n            }\n            All regions will contain a 'Status' ('Healthy', 'Unhealthy' or 'NotApplicable') and may contain additional fields that help explain the status:\n            \"...Info\":\n            { \n              \"Status\": \"Unhealthy\", \n              \"Reason\": \"Exception\", \n              \"Exception\": \"The server is not operational.\" \n            }\n            Other regions may contain additional information appropriate to the region being queried.  E.g.:\n            \"AdInfo\":\n            { \n              \"Status\": \"Healthy\", \n              \"ForestUuid\": \"fbefa7535168f04cb764cf1f92d90363\", \n              \"Forest\": \"clouddev.test\" \n            }\n            Example return package (2 connectors, the first is online, the second is not):\n            {\n              \"Connectors\": \n              [\n                {\n                  \"ConnectorInfo\": \n                  {\n                    \"Id\": \"31dfe79d-2c7f-4e40-9b1b-2e897f6f0ca1\",\n                    \"Version\": \"1.0.0.0\",\n                    \"MachineName\": \"clouddev-dev1\",\n                    \"FeaturesEnabled\": [\"adwatcher\", \"mobile.gpupdate\", \"mobile.stateSync\"],\n                    \"Name\": \"clouddev-dev1\",\n                    \"Status\": \"Healthy\"\n                  },\n                  \"AdInfo\": \n                  {\n                    \"Status\": \"Healthy\",\n                    \"ForestUuid\": \"fbefa7535168f04cb764cf1f92d90363\",\n                    \"Forest\": \"clouddev.test\"\n                  }\n                },\n                {\n                  \"ConnectorInfo\": \n                  {\n                    \"Id\": \"98dff19d-23cf-ef41-91cc-2f811e6cbab2\",\n                    \"Version\": \"1.0.0.0\",\n                    \"MachineName\": \"clouddev-dev2\",\n                    \"FeaturesEnabled\": [\"adwatcher\", \"mobile.gpupdate\", \"mobile.stateSync\"],\n                    \"Name\": \"clouddev-dev2\",\n                    \"Status\": \"Unhealthy\",\n                    \"Exception\": \"Remote side of connection is not available\",\n                    \"Reason\": \"Health check failed\"\n                  },\n                }\n              ],\n              \"Version\": \"1.0\"\n            }",
        "parameters": [
          {
            "name": "proxyUuid",
            "in": "query",
            "description": "The ID of the cloud connector to check.  Omit or leave blank to request a health check from all cloud connectors.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreCheckProxyHealth"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/CreateDirectory": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Create a directory.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The path to the directory to be created.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreCreateDirectory"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/CreateTenantReportsDirectory": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Creates a Reports directory in Path for the tenant.",
        "description": "The user must have AdminUI rights.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreCreateTenantReportsDirectory"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/CreateUserHomeReportsDirectory": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Creates a Reports directory in the tenant for the current user.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreCreateUserHomeReportsDirectory"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/DelBlockedIpRange": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deprecated -- Deletes a Blocked IP Range.",
        "description": "Deprecated -- Use /core/DeleteBlockedIpRange instead",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "description": "IP range to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreDelBlockedIpRange"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false
      }
    },
    "/Core/DeleteAlias": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Removes a suffix.",
        "parameters": [
          {
            "name": "alias",
            "in": "query",
            "description": "The suffix to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Suffix"
                ],
                "type": "object",
                "properties": {
                  "Suffix": {
                    "type": "string",
                    "description": "A suffix."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreDeleteAlias"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Core/DeleteAliases": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Removes multiple suffixes.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Suffixes"
                ],
                "type": "object",
                "properties": {
                  "Suffixes": {
                    "type": "array",
                    "description": "A list of suffixes.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreDeleteAliases"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Core/DeleteBlockedIpRange": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deletes a Blocked IP Range.",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "description": "Uuid of IP range to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreDeleteBlockedIpRange"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/DeleteCertificate": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Delete a set of certificates.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Thumbprints"
                ],
                "type": "object",
                "properties": {
                  "Thumbprints": {
                    "type": "array",
                    "description": "A list of certificate thumbprints to delete.",
                    "items": {
                      "type": "string",
                      "description": "A certificate thumbprint."
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreDeleteCertificate"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Core/DeleteDirectory": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deletes a directory.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "Path of the directory up for removal.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreDeleteDirectory"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/DeleteFile": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deletes a file.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "File to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreDeleteFile"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/DeleteFiles": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deletes a set of files.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "paths"
                ],
                "type": "object",
                "properties": {
                  "paths": {
                    "type": "string",
                    "description": "A list of files to remove."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreDeleteFiles"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Core/DeletePremDetectRange": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deletes an IP Range local to the customer network.",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "description": "Uuid of IP range to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreDeletePremDetectRange"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/DeleteProxies": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deletes a list of proxies.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Proxies"
                ],
                "type": "object",
                "properties": {
                  "Proxies": {
                    "type": "string",
                    "description": "A list of connector Uuid's for removal."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreDeleteProxies"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Core/DeleteProxy": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Remove a connector referred to by proxyUuid.",
        "parameters": [
          {
            "name": "proxyUuid",
            "in": "query",
            "description": "Uuid of the connector being removed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreDeleteProxy"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/DeleteTenantConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deletes the tenant configuration key.",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "The tenant configuration key to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreDeleteTenantConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/DelPremDetectRange": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deprecated -- Deletes an IP Range local to the customer network.",
        "description": "Deprecated -- Use /core/DeletePremDetectRange instead",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "description": "IP range to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Uuid of IP range to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreDelPremDetectRange"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false
      }
    },
    "/Core/DirectoryExists": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Check for the existence of a directory.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The path of the directory to check",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreDirectoryExists"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/DisableBlockedIpRange": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "DisableBlockedIpRange: Disable blocked IP Range",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreDisableBlockedIpRange"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/DisablePremDetectRange": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "DisablePremDetectRange: Disable OnPrem Detect Range",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreDisablePremDetectRange"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/DownloadCertificate": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Downloads a certificate.",
        "parameters": [
          {
            "name": "thumbprint",
            "in": "query",
            "description": "Thumbprint to the requested certificate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "File to save the certificate in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreDownloadCertificate"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/DownloadFile": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Download the contents of a file.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The path of the file to read.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreDownloadFile"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/EnableBlockedIpRange": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "EnableBlockedIpRange: Enable block IP Range",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreEnableBlockedIpRange"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/EnablePremDetectRange": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "EnablePremDetectRange: Enable OnPrem Detect Range",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreEnablePremDetectRange"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/FileExists": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Check for the existence of a file.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The path of the file to check",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreFileExists"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GenerateNewProxyCode": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Generates a new registration code.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "maxUses": {
                    "type": "integer",
                    "description": "Maximum number of uses for the generated connector."
                  },
                  "validLength": {
                    "type": "integer",
                    "description": "How long is the connector valid (0=infinite)."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGenerateNewProxyCode"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Core/GeneratePassword": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Generates a password.",
        "parameters": [
          {
            "name": "passwordLength",
            "in": "query",
            "description": "How long is the generated password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGeneratePassword"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetAdLoginSuffixesByForest": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get a list of domains in the forest.",
        "parameters": [
          {
            "name": "forestRootDomain",
            "in": "query",
            "description": "The forest root to get a list of domains in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetAdLoginSuffixesByForest"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetAdTopology": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the active directory topology for the directory service Uuid or the domain name.",
        "parameters": [
          {
            "name": "directoryServiceUuidOrDomainName",
            "in": "query",
            "description": "Directory service Uuid or domain name to use when requesting a topology.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetAdTopology"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetAliasesForTenant": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get the tenant suffixes.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetAliasesForTenant"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetAssignedAdministrativeRights": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "Get list of administrative rights associated with a role.",
        "parameters": [
          {
            "name": "role",
            "in": "query",
            "description": "UUID of role",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetAssignedAdministrativeRights"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetBlockedIpRanges": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the blocked IP Ranges.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetBlockedIpRanges"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetCaCertChain": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the certificate authority certificate chain.",
        "parameters": [
          {
            "name": "filename",
            "in": "query",
            "description": "Certificate file name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "Tenant id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetCaCertChain"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/Core/GetCdsAliasesForTenant": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get the tenant suffixes excluding 'legacy' versions.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetCdsAliasesForTenant"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetCloudCACert": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the public part of the cloud certificate authority certificate.",
        "description": "If not specified uses CloudCA.cer",
        "parameters": [
          {
            "name": "filename",
            "in": "query",
            "description": "The file to use for the cert (default=CloudCA.cer).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetCloudCACert"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/Core/GetConnectorLog4NetConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the connector log4net config for the connector.",
        "parameters": [
          {
            "name": "proxyId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetConnectorLog4NetConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetCurrentIwaJsonpUrl": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the current Iwa Json Url.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetCurrentIwaJsonpUrl"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetCurrentIwaUrl": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the current Iwa Url.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetCurrentIwaUrl"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetDefaultGlobalAppSigningCert": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the public part of the default global app signing certificate.",
        "parameters": [
          {
            "name": "certFileName",
            "in": "query",
            "description": "Certificate file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetDefaultGlobalAppSigningCert"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/Core/GetDirectories": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "List the directory contents of a directory.",
        "description": "The resulting list of subdirectories include the full path to each directory.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The path of the directory to list",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetDirectories"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetDirectoryContents": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get a list of directory contents.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The path of the directory to get contents from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A file filter should it be wanted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileext",
            "in": "query",
            "description": "A file extension should that be wanted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetDirectoryContents"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetDirectoryFileRolesAndRights": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "List the roles and rights to a directoryfile.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The directoryfile to examine.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetDirectoryFileRolesAndRights"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetDirectoryInfo": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets directory information for the path.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetDirectoryInfo"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetDirectoryRolesAndRights": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "List the roles and rights of a directory.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The directory to examine.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetDirectoryRolesAndRights"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetDirectoryServices": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the directory services.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetDirectoryServices"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetDomainControllersForDomain": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets a list of domain controllers for the directory service Uuid in domain name.",
        "parameters": [
          {
            "name": "directoryServiceUuid",
            "in": "query",
            "description": "The directory service Uuid to look for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domainName",
            "in": "query",
            "description": "The domain name get out of the directory service.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetDomainControllersForDomain"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetDownloadUrls": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets download urls.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetDownloadUrls"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetFileInfo": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get metadata and information about a file, as well as the file contents.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The path of the file to read",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetFileInfo"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetFileRolesAndRights": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "List the roles and rights of a file.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The file to examine.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetFileRolesAndRights"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetIwaTrustRootCert": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get the Iwa trust root certificate.",
        "parameters": [
          {
            "name": "filename",
            "in": "query",
            "description": "The certificate file name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "The tenant id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetIwaTrustRootCert"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/Core/GetLocTag": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the localized value of the tag.",
        "parameters": [
          {
            "name": "tag",
            "in": "query",
            "description": "The tag to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "description": "The tag's culture.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "qualifier",
            "in": "query",
            "description": "The qualifier that applies to the tag.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetLocTag"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetOUTreeContents": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get domains and organizational units.",
        "description": "This API is overloaded to get domains and OUs in a domain across AD directories with and without cache\n            API variations (excluding useCache variations)\n            1. id = null, directoryServiceUuid = null - fetches domains seen by cloud across directory services\n            2. id = null, directoryServiceUuid != null - fetches domains specified by directory service uuid\n            3. id != null, directoryServiceUuid = null - failure case\n            4. id != null, directoryServiceUuid != null - gets ou under domain specified by id using directory service uuid passed in",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "AD domain identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "directoryServiceUuid",
            "in": "query",
            "description": "Directory service UUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "useCache",
            "in": "query",
            "description": "Used when loading OUs for domains to load from cache or not(variation# 4)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getAdminAccountStatus",
            "in": "query",
            "description": "Include in the return admin account status.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetOUTreeContents"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetPremDetectRanges": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the IP Ranges local to the customer network.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetPremDetectRanges"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetProxyIwaHostCertificateFile": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get the connector Iwa host certificate file.",
        "parameters": [
          {
            "name": "proxyUuid",
            "in": "query",
            "description": "The connector unique identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "Certificate file name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetProxyIwaHostCertificateFile"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetProxyIwaSettings": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the Iwa settings for the connector Uuid.",
        "parameters": [
          {
            "name": "proxyUuid",
            "in": "query",
            "description": "The connector Uuid.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetProxyIwaSettings"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetProxyNotificationMembers": {
      "post": {
        "tags": [
          "Role Management"
        ],
        "summary": "Fetch a Proxy Notification Members.",
        "description": "You must be a system administrator",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetProxyNotificationMembers"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetPurchasedLicenses": {
      "post": {
        "tags": [
          "Additional APIs",
          "Application Management"
        ],
        "summary": "Retrieves a list of product licenses for this tenant, from Salesforce.",
        "description": "List of product licenses, by group and with counts.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetPurchasedLicenses"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetReportsDirectoryContents": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get a list of directory contents with a file extension of 'report'.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The path of the directory to look for content.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A file filter, should it be wanted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetReportsDirectoryContents"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetSupportedCultures": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get supported cultures, returning their code and native name.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetSupportedCultures"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/Core/GetTenantCACert": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the public part of the tenant CA certificate.",
        "parameters": [
          {
            "name": "filename",
            "in": "query",
            "description": "File name containing the certificate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "in": "query",
            "description": "The tenant id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetTenantCACert"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/Core/GetTenantConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the tenant's config value for a key.",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "What key you want from the tenants config.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dflt",
            "in": "query",
            "description": "The return if the config doesn't contain the requested key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetTenantConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetUniqueFileName": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Returns a file name that is unique in the directory.",
        "description": "If there is a collision, integers will be added. \n            Example: path \"~/\", name \"MyFile.txt\"\n            If MyFile.txt already exists in ~/, this endpoint will return MyFile (1).txt, \n            assuming MyFile (1).txt also doesn't exist.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The path to check for a unique file name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "The name of the file. Should include the file extension.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetUniqueFileName"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetUserSettings": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets all user settings of setting type.",
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "description": "The user name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SettingType",
            "in": "query",
            "description": "The setting type to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetUserSettings"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/GetZsoCertAuthority": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the Zso certificate",
        "parameters": [
          {
            "name": "certFileName",
            "in": "query",
            "description": "The certificate file name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetZsoCertAuthority"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/Core/GetZsoHostInfo": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the Zso host information.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreGetZsoHostInfo"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/HandleTwilioSmsReceipt": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "This is a callback used by the twilio service.",
        "description": "Customers will not call this directly.",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "description": "The twilio state to log.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "AccountSid",
                  "MessageSid",
                  "MessageStatus",
                  "SMsStatus",
                  "SmsSid"
                ],
                "type": "object",
                "properties": {
                  "SMsStatus": {
                    "type": "string",
                    "description": "The message's SmsStatus."
                  },
                  "AccountSid": {
                    "type": "string",
                    "description": "The message's AccountSid."
                  },
                  "SmsSid": {
                    "type": "string",
                    "description": "The message's SmsSid."
                  },
                  "MessageStatus": {
                    "type": "string",
                    "description": "The message's status."
                  },
                  "MessageSid": {
                    "type": "string",
                    "description": "The message's MessageSid."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreHandleTwilioSmsReceipt"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Core/IssueUserCert": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Issues a user certificate. (Deprecated, please use OAuth2 instead.)",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreIssueUserCert"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false
      }
    },
    "/Core/IssueZsoUserCert": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Issues a Zso user certificate",
        "parameters": [
          {
            "name": "certFileName",
            "in": "query",
            "description": "Certificate file name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certPass",
            "in": "query",
            "description": "Certificate password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceId",
            "in": "query",
            "description": "Id of the device to provide the certificate for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreIssueZsoUserCert"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/ListDirectory": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "List the file contents of a directory.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The path of the directory to list",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreListDirectory"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/MakeFile": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Return given text as a file.",
        "parameters": [
          {
            "name": "fileName",
            "in": "query",
            "description": "The file name to be set in the content-disposition header.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "The content of the file to return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentType",
            "in": "query",
            "description": "Optional: The contentType for the file, or text/plain if not given.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreMakeFile"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/MoveDirectory": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Move directory 'path' to 'toPath'.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "Directory to be moved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toPath",
            "in": "query",
            "description": "Destination of directory move.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreMoveDirectory"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/NotifyEnvironment": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Calls the NotifyEnvironment method on the connector.",
        "parameters": [
          {
            "name": "proxyId",
            "in": "query",
            "description": "What connector to make the call on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreNotifyEnvironment"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/ProcessProxyIwaCloudRedirect": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Redirect to the targetUrl.",
        "parameters": [
          {
            "name": "oneTimePass",
            "in": "query",
            "description": "Do the redirect just once.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetUrl",
            "in": "query",
            "description": "Target url.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreProcessProxyIwaCloudRedirect"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/Core/ReadFile": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Read the contents of a file.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The path of the file to read.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreReadFile"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/ReIssueIwaHostCertificate": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Re issue the certificate for the connector.",
        "parameters": [
          {
            "name": "proxyUuid",
            "in": "query",
            "description": "The connector Uuid.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreReIssueIwaHostCertificate"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/RenameCertificate": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Rename certificate with thumbprint to newName.",
        "parameters": [
          {
            "name": "thumbprint",
            "in": "query",
            "description": "Thumbprint of the certificate to rename.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newName",
            "in": "query",
            "description": "New name for the certificate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreRenameCertificate"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/SetConnectorLog4NetConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Sets the connector Log4Net config for a connector.",
        "parameters": [
          {
            "name": "proxyId",
            "in": "query",
            "description": "The connector to set the Log4Net config on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "lintfile_file",
                  "lintfile_maxSizeRollBackups",
                  "lintfile_maximumFileSize",
                  "logLevel",
                  "rollingfile_file",
                  "rollingfile_maxSizeRollBackups",
                  "rollingfile_maximumFileSize"
                ],
                "type": "object",
                "properties": {
                  "lintfile_maxSizeRollBackups": {
                    "type": "string",
                    "description": "The lint file's maximum number of backups."
                  },
                  "rollingfile_file": {
                    "type": "string",
                    "description": "The rolling file's file name."
                  },
                  "lintfile_maximumFileSize": {
                    "type": "string",
                    "description": "The lint file's maximum file size."
                  },
                  "rollingfile_maxSizeRollBackups": {
                    "type": "string",
                    "description": "The rolling file's maximum number of backups."
                  },
                  "rollingfile_maximumFileSize": {
                    "type": "string",
                    "description": "The rolling file's maximum size."
                  },
                  "lintfile_file": {
                    "type": "string",
                    "description": "The lint file's file name."
                  },
                  "logLevel": {
                    "type": "string",
                    "description": "The desired level of logging (DEBUG|INFO|WARN|ERROR|FATAL)."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreSetConnectorLog4NetConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Core/SetDefaultCertificate": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Sets the default certificate for the current tenant.",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Certificate type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "thumbprint",
            "in": "query",
            "description": "Certificate thumbprint to make default.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreSetDefaultCertificate"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/SetProxyIwaHostCertificateFile": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Set the certificate for the Iwa connector.",
        "parameters": [
          {
            "name": "proxyUuid",
            "in": "query",
            "description": "The connector's Uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passwd",
            "in": "query",
            "description": "The password to the cert.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "cert"
                ],
                "type": "object",
                "properties": {
                  "cert": {
                    "type": "string",
                    "description": "The certificate file for the connector."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreSetProxyIwaHostCertificateFile"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Core/SetProxyIwaSettings": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Set the connector Iwa Settings for proxyUuid.",
        "parameters": [
          {
            "name": "proxyUuid",
            "in": "query",
            "description": "The connector Uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "RadiusServerConfig": {
                    "type": "string",
                    "description": "The server connector Uuid for this proxy."
                  },
                  "RadiusConfig": {
                    "type": "string",
                    "description": "The connector Uuid for this proxy."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreSetProxyIwaSettings"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Core/SetTenantConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Sets the value of a tenant configuration key.",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "description": "The tenant configuration key to set.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "The tenant configuration value.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreSetTenantConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/StartService": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Starts the named service on the connector.",
        "parameters": [
          {
            "name": "proxyId",
            "in": "query",
            "description": "What connector to start the service on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceName",
            "in": "query",
            "description": "The name of the service to start.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreStartService"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/StopService": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Stops the named service on the connector.",
        "parameters": [
          {
            "name": "proxyId",
            "in": "query",
            "description": "What connector to stop the service on.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "serviceName",
            "in": "query",
            "description": "The name of the service to stop.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreStopService"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/StoreAlias": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Store a suffix.",
        "parameters": [
          {
            "name": "alias",
            "in": "query",
            "description": "The name of the alias to save.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "description": "The alias's domain.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "oldName",
            "in": "query",
            "description": "The old name of the alias.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cdsAlias",
            "in": "query",
            "description": "Is the alias legacy.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreStoreAlias"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/StoreUser": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Saves the user information.",
        "description": "Caller must provide either user name or guid.",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of the user to store.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "guid",
            "in": "query",
            "description": "Unique identifier of the user being stored.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreStoreUser"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/StoreUserSetting": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Stores the user settings.",
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "description": "The user name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Target",
            "in": "query",
            "description": "What the setting applies to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SettingType",
            "in": "query",
            "description": "The setting type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID",
                  "SettingType",
                  "Target"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "integer",
                    "description": "The user name."
                  },
                  "Target": {
                    "type": "integer",
                    "description": "What the setting applies to."
                  },
                  "SettingType": {
                    "type": "string",
                    "description": "The setting type."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreStoreUserSetting"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Core/UpdateBlockedIpRange": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Updates a Blocked IP Range.",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "description": "IP Range to block.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label",
            "in": "query",
            "description": "What label to give this blocked IP range.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Uuid if modifying an existing IP range. Creates new entry if empty (Optional)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreUpdateBlockedIpRange"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/UpdateDirectoryServicesPrecedence": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Updates the directory services stack for a tenant.",
        "description": "This changes the search order of services used when authenticating a customer.",
        "parameters": [
          {
            "name": "precedence",
            "in": "query",
            "description": "String array defining the directory services precedence to use.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreUpdateDirectoryServicesPrecedence"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/UpdatePremDetectRange": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Updates an IP Range local to the customer network.",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "description": "IP range to add.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "label",
            "in": "query",
            "description": "What label to give this IP range.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "query",
            "description": "Existing IP range's uuid if modifying. Creates new entry if empty (Optional)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreUpdatePremDetectRange"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Core/UpdateProxyIwaSettings": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Updates the Iwa connector settings.",
        "parameters": [
          {
            "name": "proxyUuid",
            "in": "query",
            "description": "The Uuid for the connector to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Password",
            "in": "query",
            "description": "The password to the host certificate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Form"
                ],
                "type": "object",
                "properties": {
                  "Form": {
                    "type": "object",
                    "properties": {
                      "HttpPort": {
                        "type": "integer",
                        "description": "Hyper text transport port number."
                      },
                      "Port": {
                        "type": "integer",
                        "description": "Port number for the connector."
                      },
                      "WebProxyEnabled": {
                        "type": "boolean",
                        "description": "Should the web connector be enabled."
                      },
                      "CertThumbprint": {
                        "type": "string",
                        "description": "Certificate thumbprint."
                      },
                      "WebProxyPort": {
                        "type": "integer",
                        "description": "The port used by the web connector."
                      },
                      "Enabled": {
                        "type": "boolean",
                        "description": "Is the connector enabled."
                      },
                      "IwaCheckTimeout": {
                        "type": "integer",
                        "description": "The Iwa timeout value to use."
                      },
                      "Name": {
                        "type": "string",
                        "description": "The proxies name."
                      },
                      "Hostname": {
                        "type": "string",
                        "description": "The host name of the connector."
                      }
                    },
                    "description": "The form to contain."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreUpdateProxyIwaSettings"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Core/UploadCertificate": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Uploads a certificate.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "File"
                ],
                "type": "object",
                "properties": {
                  "File": {
                    "type": "object",
                    "properties": {},
                    "description": "File containing the certificate, in the form-data.  (Not as a parameter.)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreUploadCertificate"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Core/WriteFile": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Write string content to a file.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The path of the file to write to",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "The content of the file to write",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content",
            "in": "query",
            "description": "The content type (MIME) of the file",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CoreWriteFile"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Device/EnrollAndroidDevice": {
      "post": {
        "tags": [
          "Device Management"
        ],
        "summary": "Enroll an Android Mobile Device",
        "description": "<strong><font color = #46B8DA> Early access </font>\n            This API is an early access API. It is possible that it may change in near future.</strong>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Udid"
                ],
                "type": "object",
                "properties": {
                  "Version": {
                    "type": "string",
                    "description": "Version of OS running on the mobile device"
                  },
                  "Os": {
                    "type": "string",
                    "description": "Operating system of the device"
                  },
                  "SimpleName": {
                    "type": "string",
                    "description": "Simple name of the mobile device"
                  },
                  "Udid": {
                    "type": "string",
                    "description": "Device Unique Identifier of the mobile device"
                  },
                  "Imei": {
                    "type": "string",
                    "description": "IMEI number of the mobile device"
                  },
                  "Manufacturer": {
                    "type": "string",
                    "description": "Manufacturer name"
                  },
                  "Name": {
                    "type": "string",
                    "description": "Name of the mobile device"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceEnrollAndroidDevice"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Device/EnrollIosDevice": {
      "post": {
        "tags": [
          "Device Management"
        ],
        "summary": "Enroll an iOS Mobile Device",
        "description": "<strong><font color = #46B8DA> Early access </font>\n            This API is an early access API. It is possible that it may change in near future.</strong>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Udid"
                ],
                "type": "object",
                "properties": {
                  "Udid": {
                    "type": "string",
                    "description": "Device Unique Identifier of the mobile device"
                  },
                  "Model": {
                    "type": "string",
                    "description": "Model name of the mobile device"
                  },
                  "OSVersion": {
                    "type": "string",
                    "description": "Version of OS running on the mobile device"
                  },
                  "Name": {
                    "type": "string",
                    "description": "Name of the mobile device"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceEnrollIosDevice"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ExtData/GetColumn": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the value of an extended column.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Column",
                  "ID",
                  "Table"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "string",
                    "description": "ID of the row to set."
                  },
                  "Column": {
                    "type": "string",
                    "description": "Name of the column."
                  },
                  "Table": {
                    "type": "string",
                    "description": "Name of the table to modify."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExtDataGetColumn"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ExtData/GetColumns": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the value of all extended columns for a row.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID",
                  "Table"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "string",
                    "description": "ID of the row to set."
                  },
                  "IncludeNulls": {
                    "type": "boolean",
                    "description": "Include columns with null values."
                  },
                  "Table": {
                    "type": "string",
                    "description": "Name of the table to modify."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExtDataGetColumns"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ExtData/GetSchema": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the tables extended columnar schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Table"
                ],
                "type": "object",
                "properties": {
                  "Table": {
                    "type": "string",
                    "description": "Name of the table to examine."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExtDataGetSchema"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ExtData/SetColumn": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Sets the value of an extended column.",
        "description": "The value can either be a string, date, bool, double or integer.\n            It must match the column definition.\n            To clear a value set it to null.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Column",
                  "ID",
                  "Table",
                  "Value"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "string",
                    "description": "ID of the row to set"
                  },
                  "Value": {
                    "type": "string",
                    "description": "Value of the column"
                  },
                  "Column": {
                    "type": "string",
                    "description": "Name of the column"
                  },
                  "Table": {
                    "type": "string",
                    "description": "Name of the table to modify"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExtDataSetColumn"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ExtData/SetColumns": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Sets the value of an extended column.",
        "description": "The value can either be a string, date, bool, double or integer.\n            It must match the column definition.\n            To clear a value set it to null.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Columns",
                  "ID",
                  "Table"
                ],
                "type": "object",
                "properties": {
                  "Columns": {
                    "type": "string",
                    "description": "DataEnty with column and value to be set."
                  },
                  "ID": {
                    "type": "string",
                    "description": "ID of the row to set."
                  },
                  "Table": {
                    "type": "string",
                    "description": "Name of the table to modify."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExtDataSetColumns"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ExtData/UpdateSchema": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Updates a table's extended columnar schema.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Columns",
                  "Table"
                ],
                "type": "object",
                "properties": {
                  "Columns": {
                    "type": "array",
                    "description": "A list of extended columns to update",
                    "items": {
                      "type": "object",
                      "properties": {
                        "Title": {
                          "type": "string",
                          "description": "The column title."
                        },
                        "Type": {
                          "type": "string",
                          "description": "The column type."
                        },
                        "Description": {
                          "type": "string",
                          "description": "The column description."
                        },
                        "Name": {
                          "type": "string",
                          "description": "The column name."
                        }
                      },
                      "description": "An extended column."
                    }
                  },
                  "Table": {
                    "type": "string",
                    "description": "Name of the table to modify"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExtDataUpdateSchema"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ExternalCaMgmt/AddCertAuthority": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Add a certificate authority.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "externalCa"
                ],
                "type": "object",
                "properties": {
                  "externalCa": {
                    "type": "object",
                    "properties": {},
                    "description": "The file containing the certificate authority, in the form-data.  (Not as a parameter.)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalCaMgmtAddCertAuthority"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ExternalCaMgmt/DownloadCertAuthority": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Downloads the certificate authority public key file.",
        "parameters": [
          {
            "name": "externalCaId",
            "in": "query",
            "description": "The certificate authority id to download.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalCaMgmtDownloadCertAuthority"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/ExternalCaMgmt/GetCertAuthorities": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get certificate authorities for the tenant.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalCaMgmtGetCertAuthorities"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/ExternalCaMgmt/RemoveCertAuthority": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Remove a certificate authority.",
        "parameters": [
          {
            "name": "externalCaId",
            "in": "query",
            "description": "The certificate authoridy id to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalCaMgmtRemoveCertAuthority"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/ExternalCaMgmt/UpdateCertAuthority": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Update a certificate authority.",
        "parameters": [
          {
            "name": "externalCaId",
            "in": "query",
            "description": "The certificate authoridy id to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "externalCa"
                ],
                "type": "object",
                "properties": {
                  "externalCa": {
                    "type": "object",
                    "properties": {},
                    "description": "The file containing the certificate authority, in the form-data.  (Not as a parameter.)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalCaMgmtUpdateCertAuthority"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Federation/AddGlobalGroupAssertionMapping": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Add global group assertion mapping.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationAddGlobalGroupAssertionMapping"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Federation/CreateFederation": {
      "post": {
        "tags": [
          "Directory Service Management"
        ],
        "summary": "Create federation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Domains",
                  "FederationName",
                  "FederationType",
                  "Mappings"
                ],
                "type": "object",
                "properties": {
                  "FederationName": {
                    "type": "string",
                    "description": "The federation name."
                  },
                  "FederationType": {
                    "type": "string",
                    "description": "What type of federation to create."
                  },
                  "Mappings": {
                    "type": "array",
                    "description": "What federation mappings to use.",
                    "items": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "Domains": {
                    "type": "array",
                    "description": "The domains to use for this federation.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationCreateFederation"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Federation/DeleteFederation": {
      "post": {
        "tags": [
          "Directory Service Management"
        ],
        "summary": "Delete a federation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "FederationUuid"
                ],
                "type": "object",
                "properties": {
                  "FederationUuid": {
                    "type": "string",
                    "description": "The federation unique identifier."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationDeleteFederation"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Federation/DeleteGlobalGroupAssertionMapping": {
      "post": {
        "tags": [
          "Directory Service Management"
        ],
        "summary": "Delete global group assertion mapping.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationDeleteGlobalGroupAssertionMapping"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Federation/FederationMetadata": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get the federation metadata.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "FederationType",
                  "domain"
                ],
                "type": "object",
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "The domain to gather federation metadata from."
                  },
                  "FederationType": {
                    "type": "string",
                    "description": "What type of federation metadata to gather."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationFederationMetadata"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Federation/GetFederatedGroupMembers": {
      "post": {
        "tags": [
          "Directory Service Management"
        ],
        "summary": "Retreives a list of users that are members of a specific federated group.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Group"
                ],
                "type": "object",
                "properties": {
                  "Group": {
                    "type": "string",
                    "description": "UUID of the group"
                  },
                  "PageNumber": {
                    "type": "integer",
                    "description": "Zero indexed page number of the results to fetch (use 0 when requesting all rows)."
                  },
                  "PageSize": {
                    "type": "integer",
                    "description": "Number of records to return (use 0 when requesting all rows)."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationGetFederatedGroupMembers"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Federation/GetFederatedGroupsForUser": {
      "post": {
        "tags": [
          "Directory Service Management"
        ],
        "summary": "Retrieves the Federated Group Memberships for a specfic user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "User"
                ],
                "type": "object",
                "properties": {
                  "User": {
                    "type": "string",
                    "description": "UUID of the user"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationGetFederatedGroupsForUser"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Federation/GetFederation": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get a federation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "FederationUuid"
                ],
                "type": "object",
                "properties": {
                  "FederationUuid": {
                    "type": "string",
                    "description": "The federation unique identifier."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationGetFederation"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Federation/GetFederationGroupAssertionMappings": {
      "post": {
        "tags": [
          "Directory Service Management"
        ],
        "summary": "Get federation group assertion mappings.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "FederationUuid"
                ],
                "type": "object",
                "properties": {
                  "FederationUuid": {
                    "type": "string",
                    "description": "What federation to get the group assertion mappings from."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationGetFederationGroupAssertionMappings"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Federation/GetFederations": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets a list of federations.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationGetFederations"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Federation/GetFederationTypes": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets a list of federation types.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationGetFederationTypes"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Federation/GetGlobalFederationSettings": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get global federation settings.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "FederationType"
                ],
                "type": "object",
                "properties": {
                  "FederationType": {
                    "type": "string",
                    "description": "What type of federation to use when gathering settings."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationGetGlobalFederationSettings"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Federation/GetGlobalGroupAssertionMappings": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get global group assertion mappings.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationGetGlobalGroupAssertionMappings"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Federation/GetGroups": {
      "post": {
        "tags": [
          "Directory Service Management"
        ],
        "summary": "Gets a list of federated groups.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationGetGroups"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Federation/RemoveUserFromFederatedGroup": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Revokes federated group membership from a specific group for a specific user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Group",
                  "User"
                ],
                "type": "object",
                "properties": {
                  "Federation": {
                    "type": "string",
                    "description": "UUID of the federation that granted membership previously and we're now revoking membership from. If omitted, the user will be removed from the group completely (no memberships will remain granted from any federation)"
                  },
                  "Group": {
                    "type": "string",
                    "description": "UUID of the group"
                  },
                  "User": {
                    "type": "string",
                    "description": "UUID of the user"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationRemoveUserFromFederatedGroup"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Federation/SPSigningCertificate": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the public part of the Service Provider signing certificate.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationSPSigningCertificate"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/Federation/SPSigningCertificateAuthority": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the public part of the Service Provider signing certificate authority.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationSPSigningCertificateAuthority"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/Federation/UpdateFederation": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Update a federation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Domains",
                  "FederationName",
                  "FederationType",
                  "FederationUuid",
                  "Mappings"
                ],
                "type": "object",
                "properties": {
                  "FederationName": {
                    "type": "string",
                    "description": "The federation name."
                  },
                  "FederationType": {
                    "type": "string",
                    "description": "What type of federation to create."
                  },
                  "Mappings": {
                    "type": "array",
                    "description": "What federation mappings to use.",
                    "items": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "Domains": {
                    "type": "array",
                    "description": "The domains to use for this federation.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "FederationUuid": {
                    "type": "string",
                    "description": "The federation unique identifier."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationUpdateFederation"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Federation/UpdateFederationGroupAssertionMappings": {
      "post": {
        "tags": [
          "Directory Service Management"
        ],
        "summary": "Update federation group assertion mappings.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "FederationUuid"
                ],
                "type": "object",
                "properties": {
                  "FederationUuid": {
                    "type": "string",
                    "description": "What federation to update group assertion mappings on."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationUpdateFederationGroupAssertionMappings"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Federation/UpdateGlobalGroupAssertionMappings": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Update the global group assertion mappings.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FederationUpdateGlobalGroupAssertionMappings"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/GoogleDirectory/AuthCallback": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Call back for the google directory service.",
        "description": "Set this callback URL at https://console.developers.google.com/apis/credentials/",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "error",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GoogleDirectoryAuthCallback"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/GoogleDirectory/GetAuthTokenState": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the IDP authorization state for the pollingToken.",
        "parameters": [
          {
            "name": "pollingToken",
            "in": "query",
            "description": "The stateId used to gather the IDP authorization state.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GoogleDirectoryGetAuthTokenState"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/GoogleDirectory/GetDirectoryServiceConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the directory service configuration.",
        "parameters": [
          {
            "name": "directoryServiceUuid",
            "in": "query",
            "description": "The unique identifier for the directory service.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GoogleDirectoryGetDirectoryServiceConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/GoogleDirectory/GetServiceLoginUrlInfo": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the state id and the service login url.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "DirectoryServiceUuid",
                  "DomainName"
                ],
                "type": "object",
                "properties": {
                  "DirectoryServiceUuid": {
                    "type": "string",
                    "description": "The unique identifier of the directory service being referenced."
                  },
                  "DomainName": {
                    "type": "string",
                    "description": "The domain name to look for in the directory service."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GoogleDirectoryGetServiceLoginUrlInfo"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/GoogleDirectory/RemoveDirectoryService": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Updates the directory service configuration.",
        "parameters": [
          {
            "name": "directoryServiceUuid",
            "in": "query",
            "description": "The unique identifier for the directory service.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GoogleDirectoryRemoveDirectoryService"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/GoogleDirectory/UpdateDirectoryServiceConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Updates the directory service configuration.",
        "description": "If CustomConfigEnabled is true \n            then ApplicationClientId and ApplicationClientSecret are expected.",
        "parameters": [
          {
            "name": "directoryServiceUuid",
            "in": "query",
            "description": "The unique identifier for the directory service.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "CustomConfigEnabled",
                  "IdpName",
                  "TrustedRedirectUris"
                ],
                "type": "object",
                "properties": {
                  "ApplicationClientId": {
                    "type": "string",
                    "description": "The application client id."
                  },
                  "TrustedRedirectUris": {
                    "type": "array",
                    "description": "A list of trusted redirect uri's.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ApplicationClientSecret": {
                    "type": "string",
                    "description": "The application client secret information."
                  },
                  "IdpName": {
                    "type": "string",
                    "description": "The name of the directory service to update."
                  },
                  "CustomConfigEnabled": {
                    "type": "boolean",
                    "description": "Does this request include custom configuration information."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GoogleDirectoryUpdateDirectoryServiceConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Health/Check": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Simple health check for load balancers: Is this node active?",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheck"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/Home/GetLoginData": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Returns login Data configurement.",
        "parameters": [
          {
            "name": "customerid",
            "in": "query",
            "description": "The customer context to use.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "debug",
            "in": "query",
            "description": "Use debug.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HomeGetLoginData"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/IdentityProofing/GetIdentityProofingInfoByUser": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "To get identity Proofing Info of a user",
        "parameters": [
          {
            "name": "Uuid",
            "in": "query",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProofingGetIdentityProofingInfoByUser"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/IdentityProofing/GetIdentityVerificationProviderConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "To get Identity Provider Configuration",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProofingGetIdentityVerificationProviderConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/IdentityProofing/GetScriptWithMetaData": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get IDV Scipt and script editor helper info",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProofingGetScriptWithMetaData"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/IdentityProofing/GetWorkflowInfo": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "To get Workflow Approvers defined for sign-up approval workflow.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProofingGetWorkflowInfo"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/IdentityProofing/IsIdentityProofingEnabled": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "To Find if IdentityProofing is enabled",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProofingIsIdentityProofingEnabled"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/IdentityProofing/UpdateIdentityVerificationConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Update Identity Verification Configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ConnectionSettings",
                  "IDVScript",
                  "WorkflowSettings"
                ],
                "type": "object",
                "properties": {
                  "WorkflowSettings": {
                    "type": "array",
                    "description": "List of workflow approvers defined",
                    "items": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "IDVScript": {
                    "type": "string",
                    "description": "IDV Script Text"
                  },
                  "ConnectionSettings": {
                    "type": "object",
                    "properties": {},
                    "description": "connection settings defined by the user"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProofingUpdateIdentityVerificationConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/IdentityProofing/UpdateUserSignUpStatus": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Update the User Sign Up Status",
        "parameters": [
          {
            "name": "Uuid",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityProofingUpdateUserSignUpStatus"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/JobFlow/DeleteJob": {
      "post": {
        "tags": [
          "Workflow Management"
        ],
        "summary": "Deletes a workflow job",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jobid": {
                    "type": "string",
                    "description": "ID of the job to delete"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/JobFlowDeleteJob"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/JobFlow/Event": {
      "post": {
        "tags": [
          "Additional APIs",
          "Workflow Management"
        ],
        "summary": "Sends a workflow event to a workflow",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jobid": {
                    "type": "string",
                    "description": "ID of the job to send the event to"
                  },
                  "sync": {
                    "type": "boolean",
                    "description": "If true, starts the workflow synchronously. If false, workflow will be started asynchronously"
                  },
                  "args": {
                    "type": "object",
                    "properties": {},
                    "description": "Arguments required for the event being sent"
                  },
                  "event": {
                    "type": "string",
                    "description": "Name of the event to send"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/JobFlowEvent"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/JobFlow/GetJob": {
      "post": {
        "tags": [
          "Workflow Management"
        ],
        "summary": "Gets a workflow job",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jobid": {
                    "type": "string",
                    "description": "ID of the job to delete"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/JobFlowGetJob"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/JobFlow/GetJobs": {
      "post": {
        "tags": [
          "Workflow Management"
        ],
        "summary": "Gets list of workflow jobs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of jobs to retrieve: specify ask for a list of all the jobs pending approval, or all for all jobs regardless of state"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/JobFlowGetJobs"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/JobFlow/GetMyJobs": {
      "post": {
        "tags": [
          "Workflow Management"
        ],
        "summary": "Gets list of workflow jobs associated with the current user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of jobs to retrieve: specify request for a list of all the jobs requested by the current user, or approve for a list of all jobs pending the current users approval"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/JobFlowGetMyJobs"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/JobFlow/StartJob": {
      "post": {
        "tags": [
          "Additional APIs",
          "Workflow Management"
        ],
        "summary": "Starts a workflow job",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "args": {
                    "type": "string",
                    "description": "Collection of arguments required by the script"
                  },
                  "script": {
                    "type": "string",
                    "description": "Name of a pre-defined workflow script"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/JobFlowStartJob"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/JsManage/GetDashboardRolesAndRights": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "List the Dashboard roles and rights.",
        "parameters": [
          {
            "name": "_RowKey",
            "in": "query",
            "description": "The unique identifier for the dashboard role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/JsManageGetDashboardRolesAndRights"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/JsManage/GetReportRolesAndRights": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "List the Report roles and rights.",
        "parameters": [
          {
            "name": "_RowKey",
            "in": "query",
            "description": "The unique identifier for the reports role.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/JsManageGetReportRolesAndRights"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/LDAPDirectoryService/AddLDAPDirectoryServiceConfig": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Adds a service to the Lightweight Directory Access Protocol (LDAP) config.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "PropertyToAttributeMap",
                  "ScriptingPropertyToAttributeMap",
                  "ServerType",
                  "UniqueIdentifier",
                  "UseBrokenShadowExpire",
                  "UsePagedSearch"
                ],
                "type": "object",
                "properties": {
                  "UniqueIdentifier": {
                    "type": "string",
                    "description": "The unique identifier of the LDAP server."
                  },
                  "UsePagedSearch": {
                    "type": "boolean",
                    "description": "Use paged search."
                  },
                  "UseBrokenShadowExpire": {
                    "type": "boolean",
                    "description": "Use broken shadow expire."
                  },
                  "PropertyToAttributeMap": {
                    "type": "object",
                    "properties": {},
                    "description": "The property to attribute map."
                  },
                  "ServerType": {
                    "type": "string",
                    "description": "The LDAP server type."
                  },
                  "ScriptingPropertyToAttributeMap": {
                    "type": "object",
                    "properties": {},
                    "description": "The scripting property to attribute map."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPDirectoryServiceAddLDAPDirectoryServiceConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/LDAPDirectoryService/DeleteLDAPDirectoryServiceConfig": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Remove a service from the Lightweight Directory Access Protocol (LDAP).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "DirectoryServiceUuid"
                ],
                "type": "object",
                "properties": {
                  "DirectoryServiceUuid": {
                    "type": "string",
                    "description": "The LDAP service unique identifier."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPDirectoryServiceDeleteLDAPDirectoryServiceConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/LDAPDirectoryService/GetCloudConnectors": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Get a list of cloud connectors that have the LDAP module enabled.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "DirectoryServiceUuid"
                ],
                "type": "object",
                "properties": {
                  "DirectoryServiceUuid": {
                    "type": "string",
                    "description": "The LDAP service unique identifier."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPDirectoryServiceGetCloudConnectors"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/LDAPDirectoryService/GetDirectoryServiceVersion": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Gets the directory service version for an LDAP directory service specified by UUID.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "directoryServiceUuid"
                ],
                "type": "object",
                "properties": {
                  "directoryServiceUuid": {
                    "type": "string",
                    "description": "The LDAP service unique identifier."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPDirectoryServiceGetDirectoryServiceVersion"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/LDAPDirectoryService/GetLDAPDirectoryServiceConfig": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Get the Lightweight Directory Access Protocol (LDAP) config.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "DirectoryServiceUuid"
                ],
                "type": "object",
                "properties": {
                  "DirectoryServiceUuid": {
                    "type": "string",
                    "description": "The LDAP service unique identifier."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPDirectoryServiceGetLDAPDirectoryServiceConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/LDAPDirectoryService/GetLDAPDirectoryServiceUuidByName": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Get the Directory Service UUID for a specific LDAP, using the name assigned by the user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "DirectoryServiceName"
                ],
                "type": "object",
                "properties": {
                  "DirectoryServiceName": {
                    "type": "string",
                    "description": "The name assigned to the LDAP directory service."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPDirectoryServiceGetLDAPDirectoryServiceUuidByName"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/LDAPDirectoryService/GetMappableAttributeList": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Gets the list of mappable LDAP attributes.",
        "description": "This is intended for UI use, to fill in the prompts for the names of the attributes in the\n             customer's mappings.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "operation": {
                    "type": "string",
                    "description": "Add or Modify, describes the operation for which this list is being generated"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPDirectoryServiceGetMappableAttributeList"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/LDAPDirectoryService/GetPropertyToAttributeMappings": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Gets a property to attribute mapping on an LDAP enabled directory service.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "directoryServiceUuid"
                ],
                "type": "object",
                "properties": {
                  "directoryServiceUuid": {
                    "type": "string",
                    "description": "The LDAP service unique identifier."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPDirectoryServiceGetPropertyToAttributeMappings"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/LDAPDirectoryService/GetScriptingPropertyToAttributeMappings": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Gets the scripting property to attribute mapping from an LDAP enabled directory service.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "directoryServiceUuid"
                ],
                "type": "object",
                "properties": {
                  "directoryServiceUuid": {
                    "type": "string",
                    "description": "The LDAP service unique identifier."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPDirectoryServiceGetScriptingPropertyToAttributeMappings"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/LDAPDirectoryService/ModifyLDAPDirectoryServiceConfig": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Modify a service in the Lightweight Directory Access Protocol (LDAP) config.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "PropertyToAttributeMap",
                  "ScriptingPropertyToAttributeMap",
                  "ServerType",
                  "UniqueIdentifier",
                  "UseBrokenShadowExpire",
                  "UsePagedSearch"
                ],
                "type": "object",
                "properties": {
                  "UniqueIdentifier": {
                    "type": "string",
                    "description": "The unique identifier of the LDAP server."
                  },
                  "UsePagedSearch": {
                    "type": "boolean",
                    "description": "Use paged search."
                  },
                  "UseBrokenShadowExpire": {
                    "type": "boolean",
                    "description": "Use broken shadow expire."
                  },
                  "PropertyToAttributeMap": {
                    "type": "object",
                    "properties": {},
                    "description": "The property to attribute map."
                  },
                  "ServerType": {
                    "type": "string",
                    "description": "The LDAP server type."
                  },
                  "ScriptingPropertyToAttributeMap": {
                    "type": "object",
                    "properties": {},
                    "description": "The scripting property to attribute map."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPDirectoryServiceModifyLDAPDirectoryServiceConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/LDAPDirectoryService/SetPropertyToAttributeMappings": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Sets a property to attribute mapping on an LDAP enabled directory service.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "directoryServiceUuid",
                  "propertyToAttributeMappings"
                ],
                "type": "object",
                "properties": {
                  "directoryServiceUuid": {
                    "type": "string",
                    "description": "The LDAP service unique identifier."
                  },
                  "propertyToAttributeMappings": {
                    "type": "object",
                    "properties": {},
                    "description": "The property to attribute mapping to set."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPDirectoryServiceSetPropertyToAttributeMappings"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/LDAPDirectoryService/SetScriptingPropertyToAttributeMappings": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Sets the scripting property to attribute mapping on an LDAP enabled directory service.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "directoryServiceUuid",
                  "scriptingPropertyToAttributeMappings"
                ],
                "type": "object",
                "properties": {
                  "scriptingPropertyToAttributeMappings": {
                    "type": "object",
                    "properties": {},
                    "description": "The property to attribute mapping to set."
                  },
                  "directoryServiceUuid": {
                    "type": "string",
                    "description": "The LDAP service unique identifier."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPDirectoryServiceSetScriptingPropertyToAttributeMappings"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/LDAPDirectoryService/TestUserLookup": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Gets the results of the specified mappings by looking up a user by name.",
        "description": "Using a supplied LDAP configuration OR a the UUID of an existing LDAP directory service (one or the\n             other is required), this API will attempt to look up a user (specified by login\n             name) and apply the mappings from the configuration.  This is intended for UI use to enable the\n             customer to validate their mappings prior to saving the server configuration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "TestUserName",
                  "Version"
                ],
                "type": "object",
                "properties": {
                  "DirectoryServiceUuid": {
                    "type": "string",
                    "description": "the UUID of the directory service being tested (if known)."
                  },
                  "Version": {
                    "type": "integer",
                    "description": "The version number of the configuration being tested."
                  },
                  "TestUserName": {
                    "type": "string",
                    "description": "The user id of the user to be looked up."
                  },
                  "Settings": {
                    "type": "string",
                    "description": "!!! KNOWN ISSUE - must consult with Tony about how to format this section"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPDirectoryServiceTestUserLookup"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/LDAPDirectoryService/VerifyLDAPDirectoryServiceConfig": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Verify the Lightweight Directory Access Protocol (LDAP) directory service config.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "PropertyToAttributeMap",
                  "ScriptingPropertyToAttributeMap",
                  "ServerType",
                  "UniqueIdentifier",
                  "UseBrokenShadowExpire",
                  "UsePagedSearch"
                ],
                "type": "object",
                "properties": {
                  "UniqueIdentifier": {
                    "type": "string",
                    "description": "The unique identifier of the LDAP server."
                  },
                  "UsePagedSearch": {
                    "type": "boolean",
                    "description": "Use paged search."
                  },
                  "UseBrokenShadowExpire": {
                    "type": "boolean",
                    "description": "Use broken shadow expire."
                  },
                  "PropertyToAttributeMap": {
                    "type": "object",
                    "properties": {},
                    "description": "The property to attribute map."
                  },
                  "ServerType": {
                    "type": "string",
                    "description": "The LDAP server type."
                  },
                  "ScriptingPropertyToAttributeMap": {
                    "type": "object",
                    "properties": {},
                    "description": "The scripting property to attribute map."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/LDAPDirectoryServiceVerifyLDAPDirectoryServiceConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Mobile/DeleteApnsCertForClientApp": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deletes the APNS Developer certificate details used to send push notifications to the Mobile",
        "description": "You need to have APNSCertificate management rights to use this API. Please note that the push notifications will no longer be able to be sent unless you set a new APNS cert using SetApnsCertForClientApp API",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ClientAppKey"
                ],
                "type": "object",
                "properties": {
                  "ClientAppKey": {
                    "type": "string",
                    "description": "Client key is a unique identifier for the client application that needs to be registered for APNS notifications"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileDeleteApnsCertForClientApp"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Mobile/DeleteDevice": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Delete a device (Mobile + OSX)",
        "parameters": [
          {
            "name": "deviceID",
            "in": "query",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileDeleteDevice"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Mobile/DisableSSO": {
      "post": {
        "tags": [
          "Device Management"
        ],
        "summary": "Disable SSO on device (Mobile + OSX)",
        "parameters": [
          {
            "name": "deviceID",
            "in": "query",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileDisableSSO"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Mobile/EnableSSO": {
      "post": {
        "tags": [
          "Device Management"
        ],
        "summary": "Enable SSO on device (Mobile + OSX)",
        "parameters": [
          {
            "name": "deviceID",
            "in": "query",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileEnableSSO"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Mobile/GetGlobalDevicePermissions": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets list of global permissions associated with device",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "RRFormat": {
                    "type": "boolean",
                    "description": "Query response return.",
                    "default": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileGetGlobalDevicePermissions"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Mobile/KnoxResetContainerPassword": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Reset Samsung KNOX container password (Samsung Mobile)",
        "parameters": [
          {
            "name": "deviceID",
            "in": "query",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileKnoxResetContainerPassword"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Mobile/LockClientApp": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Lock client app (Mobile)",
        "parameters": [
          {
            "name": "deviceID",
            "in": "query",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileLockClientApp"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Mobile/LockDevice": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Lock device screen (Mobile + OSX)",
        "parameters": [
          {
            "name": "deviceID",
            "in": "query",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileLockDevice"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Mobile/PingDevice": {
      "post": {
        "tags": [
          "Device Management"
        ],
        "summary": "Ping a device (Mobile + OSX)",
        "parameters": [
          {
            "name": "deviceID",
            "in": "query",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobilePingDevice"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Mobile/PowerOff": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Power off a device (Mobile + OSX)",
        "parameters": [
          {
            "name": "deviceID",
            "in": "query",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobilePowerOff"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Mobile/ReapplyDevicePolicy": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Reapply device policies (Mobile + OSX)",
        "parameters": [
          {
            "name": "deviceID",
            "in": "query",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileReapplyDevicePolicy"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Mobile/Reboot": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Reboot a device (Mobile + OSX)",
        "parameters": [
          {
            "name": "deviceID",
            "in": "query",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileReboot"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Mobile/RemoveDeviceProfile": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Unenroll a device (Mobile + OSX)",
        "parameters": [
          {
            "name": "deviceID",
            "in": "query",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileRemoveDeviceProfile"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Mobile/ResetClientAppLockPin": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Reset client app lock pin (Mobile)",
        "parameters": [
          {
            "name": "deviceID",
            "in": "query",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileResetClientAppLockPin"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Mobile/SetApnsCertForClientApp": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Sets the APNS Developer certificate to be able to send push notifications to the Mobile",
        "description": "The storage of the APNSCert and the other details happen at a Tenant level. The APNS Cert details related ClientKey set here will be hereon used to send the push notification Earlier ClientAppKeys will be ignored while sending the push notification. You need to have APNSCertificate management rights to use this API",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "APNSCert",
                  "APNSPass",
                  "APNSTopic",
                  "ClientAppKey"
                ],
                "type": "object",
                "properties": {
                  "APNSTopic": {
                    "type": "string",
                    "description": "The topic related to client application with which the push notification needs to be sent."
                  },
                  "APNSPass": {
                    "type": "string",
                    "description": "Password associated with the APNS Certificate"
                  },
                  "ClientAppKey": {
                    "type": "string",
                    "description": "Client key is a unique identifier to associate the certificate of client applicatoin that needs to be used for APNS notifications. By default, the latest cert"
                  },
                  "APNSCert": {
                    "type": "string",
                    "description": "Base64 string representation of the APNS certificate of p12 format"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileSetApnsCertForClientApp"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Mobile/SetDevicePermissions": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Grant permissions on devices",
        "description": "You must be a system administrator or have 'Grant' permission on the resource or have global 'Grant' permission on resources.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "string",
                    "description": "ID of the resource, Set to null for global permissions"
                  },
                  "Grants": {
                    "type": "object",
                    "properties": {
                      "Rights": {
                        "type": "string",
                        "description": "Permissions: Grant, View, Admin, LimitedAdmin"
                      },
                      "Principal": {
                        "type": "string",
                        "description": "User name or role name"
                      },
                      "PrincipalId": {
                        "type": "string",
                        "description": "Uuid of the principal"
                      },
                      "PType": {
                        "type": "string",
                        "description": "Principal type: User, Role etc.. "
                      }
                    },
                    "description": "Array of permissions to be set. Each item must include  Principal: User name or role name, PType: User, Role..,  Rights: ManageSession, Edit, Delete, Grant, AgentAuth"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileSetDevicePermissions"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Mobile/SetPrimaryDevice": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Set a device as primary (Mobile)",
        "parameters": [
          {
            "name": "deviceID",
            "in": "query",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileSetPrimaryDevice"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Mobile/UnlockDevice": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Unlock a device (Mobile + OSX)",
        "parameters": [
          {
            "name": "deviceID",
            "in": "query",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileUnlockDevice"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Mobile/UpdateDevicePolicy": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Update device policies (Mobile + OSX)",
        "parameters": [
          {
            "name": "deviceID",
            "in": "query",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileUpdateDevicePolicy"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Mobile/WipeDevice": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Wipe a device (Mobile + OSX)",
        "parameters": [
          {
            "name": "deviceID",
            "in": "query",
            "description": "Device ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passcode",
            "in": "query",
            "description": "Passcode for OSX devices",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MobileWipeDevice"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Oath/AddOrUpdateProfile": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Add a single OATH profile to a specific user.",
        "description": "For adding more than one or two OATH profiles consider using the bulk token import functionality \n            instead (see OathController.GetDataFromCsvFile and OathController.SubmitUploadedFile).  \n            Required fields are (from OathFileSchema.DataEntryField):  UserPrincipalName, AccountName, SecretKey, \n            Issuer, Algorithm, Digits, Type, Period, Counter.  You must be an OATH admin or system admin to call\n            this API.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "UserProfile"
                ],
                "type": "object",
                "properties": {
                  "UserProfile": {
                    "type": "object",
                    "properties": {
                      "IsImportByAdmin": {
                        "type": "boolean",
                        "description": "Is this prfile imported by the admin."
                      },
                      "OathType": {
                        "type": "string",
                        "description": "The oath type (Totp, Hotp)."
                      },
                      "Version": {
                        "type": "string",
                        "description": "The profile version."
                      },
                      "Period": {
                        "type": "integer",
                        "description": "Time step (in seconds)."
                      },
                      "Digits": {
                        "type": "integer",
                        "description": "The number of OTP code digits."
                      },
                      "DeviceId": {
                        "type": "string",
                        "description": "The device id to associate with this profile."
                      },
                      "AuthEndPointUrl": {
                        "type": "string",
                        "description": "The client can visit this url to submit their OTP code."
                      },
                      "SafeSecret": {
                        "type": "string",
                        "description": "Encrypted base64 string."
                      },
                      "AccountName": {
                        "type": "string",
                        "description": "The profile account name."
                      },
                      "IsCma": {
                        "type": "boolean",
                        "description": "Indicates if it's Idaptive Mobile Authenticator."
                      },
                      "Issuer": {
                        "type": "string",
                        "description": "The issuer."
                      },
                      "Uuid": {
                        "type": "string",
                        "description": "The issuer's unique identifier."
                      },
                      "Algorithm": {
                        "type": "string",
                        "description": "The HMAC algorithm."
                      },
                      "Counter": {
                        "type": "integer",
                        "description": "Only used for HOTP."
                      },
                      "UserUuid": {
                        "type": "string",
                        "description": "The user's unique identifier."
                      },
                      "IntervalDelta": {
                        "type": "integer",
                        "description": "The known delta for this token."
                      }
                    },
                    "description": "An oath profile."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OathAddOrUpdateProfile"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Oath/CentrifyOathOtpProfileCheck": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deprecated -- Forces the Idaptive oath profile to exist.",
        "description": "Please use Oath/CloudOathOtpProfileCheck.",
        "parameters": [
          {
            "name": "userToken",
            "in": "query",
            "description": "User for the Idaptive oath profile.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OathCentrifyOathOtpProfileCheck"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false
      }
    },
    "/Oath/CloudOathOtpProfileCheck": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Forces the Idaptive oath profile to exist.",
        "parameters": [
          {
            "name": "userToken",
            "in": "query",
            "description": "User for the Idaptive oath profile.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OathCloudOathOtpProfileCheck"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Oath/DeleteProfiles": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Delete a list of profiles.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Uuids"
                ],
                "type": "object",
                "properties": {
                  "Uuids": {
                    "type": "array",
                    "description": "A list of profile unique identifiers to delete.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OathDeleteProfiles"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Oath/GetDataFromCsvFile": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets data from a csv file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "FileName"
                ],
                "type": "object",
                "properties": {
                  "FileName": {
                    "type": "object",
                    "properties": {},
                    "description": "File containing the data to be read."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OathGetDataFromCsvFile"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Oath/GetImportProfileList": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get import profile list.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OathGetImportProfileList"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Oath/GetProfileList": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the profile list for the user.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OathGetProfileList"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Oath/GetProfileListForDevice": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the oath profile list for a device.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OathGetProfileListForDevice"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Oath/ResetCentrifyOathProfile": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deprecated -- Resets the Idaptive OATH profile.",
        "description": "Please use Oath/ResetCloudOathProfile.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Uuid"
                ],
                "type": "object",
                "properties": {
                  "Uuid": {
                    "type": "string",
                    "description": "The unique identifier for the user who's default OATH profile will be reset."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OathResetCentrifyOathProfile"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Oath/ResetCloudOathProfile": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Resets the Idaptive OATH profile.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Uuid"
                ],
                "type": "object",
                "properties": {
                  "Uuid": {
                    "type": "string",
                    "description": "The unique identifier for the user who's default OATH profile will be reset."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OathResetCloudOathProfile"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Oath/ResynchronizeOathToken": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Resynchronize a TOTP or HOTP token.",
        "description": "Resynchronizing requires two consecutive token codes\n            (which helps to ensure that the caller is in physical possesion of the token, not just of a\n            single copied token code).  Assuming that the supplied token codes can be found, TOTP resync\n            will compute a new interval delta value that will be stored with the token, and HOTP resync\n            will find the matching counter value (always looking forward, never backward) and update\n            the counter stored with the token.\n            \n            Caller must either own the OATH token or be an administrator",
        "parameters": [
          {
            "name": "firstCode",
            "in": "query",
            "description": "The first of two consecutive token codes that will be used to resynchronize the token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secondCode",
            "in": "query",
            "description": "The second of two consecutive token codes that will be used to resynchronize the token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenId",
            "in": "query",
            "description": "The UUID of the token to be resynchronized.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "firstCode",
                  "secondCode",
                  "tokenId"
                ],
                "type": "object",
                "properties": {
                  "firstCode": {
                    "type": "string",
                    "description": "The first of two consecutive token codes that will be used to resynchronize the token"
                  },
                  "secondCode": {
                    "type": "string",
                    "description": "The second of two consecutive token codes that will be used to resynchronize the token"
                  },
                  "tokenId": {
                    "type": "string",
                    "description": "The UUID of the token to be resynchronized"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OathResynchronizeOathToken"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Oath/SaveProfile": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Save or update the default Idaptive profile.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "UserProfile",
                  "Uuid"
                ],
                "type": "object",
                "properties": {
                  "Uuid": {
                    "type": "object",
                    "properties": {},
                    "description": "The user's unique identifier."
                  },
                  "UserProfile": {
                    "type": "object",
                    "properties": {
                      "IsImportByAdmin": {
                        "type": "boolean",
                        "description": "Is this prfile imported by the admin."
                      },
                      "OathType": {
                        "type": "string",
                        "description": "The oath type (Totp, Hotp)."
                      },
                      "Version": {
                        "type": "string",
                        "description": "The profile version."
                      },
                      "Period": {
                        "type": "integer",
                        "description": "Time step (in seconds)."
                      },
                      "Digits": {
                        "type": "integer",
                        "description": "The number of OTP code digits."
                      },
                      "DeviceId": {
                        "type": "string",
                        "description": "The device id to associate with this profile."
                      },
                      "AuthEndPointUrl": {
                        "type": "string",
                        "description": "The client can visit this url to submit their OTP code."
                      },
                      "SafeSecret": {
                        "type": "string",
                        "description": "Encrypted base64 string."
                      },
                      "AccountName": {
                        "type": "string",
                        "description": "The profile account name."
                      },
                      "IsCma": {
                        "type": "boolean",
                        "description": "Indicates if it's Idaptive Mobile Authenticator."
                      },
                      "Issuer": {
                        "type": "string",
                        "description": "The issuer."
                      },
                      "Uuid": {
                        "type": "string",
                        "description": "The issuer's unique identifier."
                      },
                      "Algorithm": {
                        "type": "string",
                        "description": "The HMAC algorithm."
                      },
                      "Counter": {
                        "type": "integer",
                        "description": "Only used for HOTP."
                      },
                      "UserUuid": {
                        "type": "string",
                        "description": "The user's unique identifier."
                      },
                      "IntervalDelta": {
                        "type": "integer",
                        "description": "The known delta for this token."
                      }
                    },
                    "description": "The user profile."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OathSaveProfile"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Oath/SetResponseParamsToEntity": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Set response parameters to entity.",
        "parameters": [
          {
            "name": "oathProfileDe",
            "in": "query",
            "description": "The oath profile data entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showSecret",
            "in": "query",
            "description": "Set the oath secret data entity properties.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OathSetResponseParamsToEntity"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Oath/SubmitUploadedFile": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Process a previously uploaded csv file.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ReturnID"
                ],
                "type": "object",
                "properties": {
                  "ReturnID": {
                    "type": "integer",
                    "description": "The id for the file to be processed."
                  },
                  "AdminEmail": {
                    "type": "string",
                    "description": "The email address to the oath administrator."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OathSubmitUploadedFile"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Oath/UpdateOathProfileCounter": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Update the oath profile counter.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Counter",
                  "Uuid"
                ],
                "type": "object",
                "properties": {
                  "Uuid": {
                    "type": "string",
                    "description": "The unique identifier for the profile."
                  },
                  "Counter": {
                    "type": "integer",
                    "description": "The value to use when setting the profile counter."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OathUpdateOathProfileCounter"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Oath/ValidateOtpCode": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Validate the otp code.",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "description": "Unique identifier for the profile.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "otpCode",
            "in": "query",
            "description": "Oath profile password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "useOathDefaults",
            "in": "query",
            "description": "Should oath defaults be used.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OathValidateOtpCode"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/OAuth2/Authorize": {
      "post": {
        "tags": [
          "OAuth & OpenID Connect"
        ],
        "summary": "Authenticates a request.",
        "description": "<p><ul>This API is the first endpoint which should be invoked in order proceed with flows like implicit, authorization code and authroization code with PKCE flows. \n            <li>The response_type is set to code to indicate that an authorize code should be returned.</li>\n            <li>This request authenticates the user and returns tokens along with an authorization grant to the client application as a part of the callback response.</li>\n            <li>Refer guide <a href=\"https://identity-developer.cyberark.com/docs/oauth\">OAuth Flows</a></li>\n            <li>See the <a href=\"https://oauth.net/2/\">OAuth2 spec</a></li></ul>",
        "parameters": [
          {
            "name": "bounce",
            "in": "query",
            "description": "This Value is used to determine if authentication has occured.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "client_id",
                  "redirect_uri",
                  "response_type",
                  "scope"
                ],
                "type": "object",
                "properties": {
                  "scope": {
                    "type": "string",
                    "description": "scopes associated with access tokens determine which claims are available when they are used to access. openid is required for authentication requests. <ul>Possible values: <li>openid</li><li>profile</li><li>email</li><li>phone</li><li>address</li><li>all</li><li>groups</li></ul> "
                  },
                  "redirect_uri": {
                    "type": "string",
                    "description": "Callback URI where the authorization code or tokens should be sent. It must match the value preregistered in CyberArk during client registration."
                  },
                  "code_challenge_method": {
                    "type": "string",
                    "description": "It is the method used to derive the code challenge for PKCE flow like value 'S256'"
                  },
                  "code_challenge": {
                    "type": "string",
                    "description": "It is the base64 URL-encoded SHA-256 hash of the code verifier"
                  },
                  "client_id": {
                    "type": "string",
                    "description": "It is the clientId which shoul be preregistered in CyberArk."
                  },
                  "response_type": {
                    "type": "string",
                    "description": "It can be any combination of code, token, and id_token"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2Authorize"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/OAuth2/Confirm": {
      "post": {
        "tags": [
          "OAuth & OpenID Connect"
        ],
        "summary": "Confirms the User Consent when invoked from UI",
        "description": "This API would be called when user confirms the consent from the dialog present on the UI. See the OAuth2 spec https://oauth.net/2/",
        "parameters": [
          {
            "name": "bounce",
            "in": "query",
            "description": "Value used to determine if authentication has occured.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "result",
            "in": "query",
            "description": "Has user denied confirmation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "scopes",
            "in": "query",
            "description": "Comma delimited list of scope ids.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2Confirm"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/OAuth2/EndSession": {
      "post": {
        "tags": [
          "OAuth & OpenID Connect"
        ],
        "summary": "End Session - destroy an OIDC session",
        "description": "<li>This API is used to destroy an OIDC session through RP-initiated logout with the option to redirect users to a pre-determined URL.</li>\n            <li>This endpoint takes an ID token and logs the user out of session if the subject matches the current session. </li><li>A post_logout_redirect_uri may be specified to redirect the browser after the logout is performed.</li>\n            <li>Refer guide <a href=\"https://identity-developer.cyberark.com/docs/end-a-session\">here</a></li>",
        "parameters": [
          {
            "name": "post_logout_redirect_uri",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id_token_hint",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2EndSession"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/OAuth2/GetMeta": {
      "post": {
        "tags": [
          "Additional APIs",
          "Application Management"
        ],
        "summary": "Get meta",
        "parameters": [
          {
            "name": "serviceName",
            "in": "query",
            "description": "Service name to use when gathering meta data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customerid": {
                    "type": "object",
                    "properties": {},
                    "description": "The id used to determine the tenant."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2GetMeta"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/OAuth2/Introspect": {
      "post": {
        "tags": [
          "OAuth & OpenID Connect"
        ],
        "summary": "Introspects the access token to refresh token.",
        "description": "An opaque token is validated using the this endpoint by passing the access token or refresh token via the token body parameter and returns a boolean that indicates whether it is active. If the token is active, additional data about the token is also returned. If the token is invalid, expired, or revoked, it is considered inactive. Refer complete guide <a href=\"https://identity-developer.cyberark.com/docs/validate-a-token\" >here</a>. See the OAuth2 spec https://oauth.net/2/",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "token"
                ],
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The access token, ID token, refresh token to process."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2Introspect"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/OAuth2/Keys": {
      "post": {
        "tags": [
          "OAuth & OpenID Connect"
        ],
        "summary": "Provides the public elements of the key",
        "description": "This API provides information on the public elements of the key in use for token signing.<li> As part of the request we need to pass Application Id which is configured.</li>\n            <li>Returns public key that can be used to verify the signatures of tokens that you receive from your authorization server.</li><li> See the OAuth2 spec https://oauth.net/2/ </li>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ApplicationId": {
                    "type": "object",
                    "properties": {},
                    "description": "The id used to determine the application configured in the tenant."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2Keys"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/OAuth2/PlatformToken": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets a token based on grant type.",
        "description": "See the OAuth2 spec https://oauth.net/2/",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "grant_type"
                ],
                "type": "object",
                "properties": {
                  "grant_type": {
                    "type": "string",
                    "description": "Grant what type of token."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2PlatformToken"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/OAuth2/Revoke": {
      "post": {
        "tags": [
          "OAuth & OpenID Connect"
        ],
        "summary": "Revokes the access token",
        "description": "><p>Once, Authorizaton is completed using any of OAuth flows then this endpoint is used to invalidate the access token or refresh token returned from the authorization endpoint.<li>Revoked tokens are considered inactive at the introspection endpoint.</li><li> A client may only revoke its own tokens.</li><li> Refer guides <a href=\"https://identity-developer.cyberark.com/docs/revoke-a-token\">Revoke Token</a></li>\n            <li>See the OAuth2 spec https://oauth.net/2/ </li></p>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "client_id",
                  "client_secret",
                  "token"
                ],
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Access token which you should be passing which is returned from token endpoint"
                  },
                  "client_id": {
                    "type": "string",
                    "description": "The Client ID is a public identifier of your application. "
                  },
                  "client_secret": {
                    "type": "string",
                    "description": "The Client Secret is confidential and should only be used to authenticate your application and make requests to APIs."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2Revoke"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/OAuth2/Token": {
      "post": {
        "tags": [
          "OAuth & OpenID Connect"
        ],
        "summary": "Gets a token based on grant type.",
        "description": "<p><ul><li>Client invokes this endpoint to exchange the access code for an access token by passing the full redirect URI in the redirect_uri parameter using form serialization.</li> \n             <li>The access code is specified in the URI's code query parameter and the grant_type is set to authorization_code</li>\n             <li>See the OAuth2 spec https://oauth.net/2/ </li></ul></p>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "grant_type"
                ],
                "type": "object",
                "properties": {
                  "grant_type": {
                    "type": "string",
                    "description": "Grant what type of token. <ul>Possible values: <li>authorization_code</li><li>client_credentials</li><li>password</li><li>refresh_token</li><li>code</li></ul> "
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2Token"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/OAuth2/UserInfo": {
      "post": {
        "tags": [
          "OAuth & OpenID Connect"
        ],
        "summary": "Returns Claims about the authenticated End-User",
        "description": "<ul> This API is used for authentication where Access Token should be sent as Bearer token in Authorization header.<li> In response, Claims will be returned based on the scopes associated with Access Token.</li><li>For further information on UserInfo Request, check <a href=\"https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.5.3\">here</a> </li>",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2UserInfo"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/OAuth2Man/CreateClientToken": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Creates a client token.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "AppID",
                  "ClientID",
                  "ClientSecret"
                ],
                "type": "object",
                "properties": {
                  "AppID": {
                    "type": "string",
                    "description": "The application id."
                  },
                  "ClientSecret": {
                    "type": "string",
                    "description": "The client secret."
                  },
                  "ClientID": {
                    "type": "string",
                    "description": "The client id."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OAuth2ManCreateClientToken"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Org/ChangeMemberShip": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Change membership on specific organization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "OrgId"
                ],
                "type": "object",
                "properties": {
                  "Add": {
                    "type": "array",
                    "description": "DataEntity containing the list of member to add into the organization",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ID": {
                          "type": "string",
                          "description": "Entity ID."
                        },
                        "Type": {
                          "type": "string",
                          "description": "The type of entity."
                        }
                      },
                      "description": "Resource entity."
                    }
                  },
                  "OrgId": {
                    "type": "string",
                    "description": "ID of the organization to update"
                  },
                  "Remove": {
                    "type": "array",
                    "description": "DataEntity containing the list of member to remove from the organization",
                    "items": {
                      "type": "object",
                      "properties": {
                        "ID": {
                          "type": "string",
                          "description": "Entity ID."
                        },
                        "Type": {
                          "type": "string",
                          "description": "The type of entity."
                        }
                      },
                      "description": "Resource entity."
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrgChangeMemberShip"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Org/Create": {
      "post": {
        "tags": [
          "Organization Management"
        ],
        "summary": "Create an organization unit",
        "description": "Must be system administrator to perform this operation.",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "The name of new organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Description",
            "in": "query",
            "description": "The description of the new organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrgCreate"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Org/Delete": {
      "post": {
        "tags": [
          "Organization Management"
        ],
        "summary": "Delete an organization unit",
        "description": "Must be system administrator to perform this operation.",
        "parameters": [
          {
            "name": "OrgId",
            "in": "query",
            "description": "The organization id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrgDelete"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Org/Get": {
      "post": {
        "tags": [
          "Organization Management"
        ],
        "summary": "Get All organizations units",
        "parameters": [
          {
            "name": "OrgId",
            "in": "query",
            "description": "The organization id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrgGet"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Org/GetAdministrators": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get administrators for specific organization",
        "description": "Must have AdminUI task permission to perform this operation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "OrgId"
                ],
                "type": "object",
                "properties": {
                  "OrgId": {
                    "type": "string",
                    "description": "ID of the organization to update"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrgGetAdministrators"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Org/GetPermission": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get administrative right definition for specific organization",
        "description": "Must have AdminUI task permission to perform this operation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "OrgId"
                ],
                "type": "object",
                "properties": {
                  "OrgId": {
                    "type": "string",
                    "description": "ID of the organization to update"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrgGetPermission"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Org/GetRoles": {
      "post": {
        "tags": [
          "Organization Management"
        ],
        "summary": "Get roles of specific organization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "OrgId"
                ],
                "type": "object",
                "properties": {
                  "OrgId": {
                    "type": "string",
                    "description": "ID of the organization to update"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrgGetRoles"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Org/ListAll": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get All organizations units",
        "parameters": [
          {
            "name": "format",
            "in": "query",
            "description": "The result format, if \"Query\" is specified, will return Query format",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrgListAll"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Org/TaskCheck": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Check if current user can perform specific task",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Task"
                ],
                "type": "object",
                "properties": {
                  "Task": {
                    "type": "string",
                    "description": "The administrative task"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrgTaskCheck"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Org/Update": {
      "post": {
        "tags": [
          "Organization Management"
        ],
        "summary": "Update an organization unit",
        "description": "Must be system administrator to perform this operation.",
        "parameters": [
          {
            "name": "OrgId",
            "in": "query",
            "description": "The organization id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Name",
            "in": "query",
            "description": "The name of the organization. (Optional, when the parameter is provided, will update the data)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Description",
            "in": "query",
            "description": "The description of the organization. (Optional, when the parameter is provided, will update the data)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrgUpdate"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Org/UpdateAdministrators": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Update organization administrators",
        "description": "Must be system administrator to perform this operation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "OrgId"
                ],
                "type": "object",
                "properties": {
                  "Grant": {
                    "type": "array",
                    "description": "ID of users",
                    "items": {
                      "type": "object",
                      "properties": {},
                      "description": "DataEntity containing user names or ID of user"
                    }
                  },
                  "OrgId": {
                    "type": "string",
                    "description": "ID of the organization to update"
                  },
                  "Revoke": {
                    "type": "array",
                    "description": "ID of users",
                    "items": {
                      "type": "string",
                      "description": "ID of user"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrgUpdateAdministrators"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Org/UpdatePermission": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Update organization permission assignment",
        "description": "Must be system administrator to perform this operation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "OrgId"
                ],
                "type": "object",
                "properties": {
                  "Grant": {
                    "type": "array",
                    "description": "DataEntity containing the list of principal, principal type and right to grant",
                    "items": {
                      "type": "object",
                      "properties": {
                        "Right": {
                          "type": "string",
                          "description": "The admin right(s) of entity."
                        },
                        "Principal": {
                          "type": "string",
                          "description": "Entity with row access rights."
                        },
                        "PrincipalType": {
                          "type": "string",
                          "description": "The type of entity."
                        }
                      },
                      "description": "A access right."
                    }
                  },
                  "OrgId": {
                    "type": "string",
                    "description": "ID of the organization to update"
                  },
                  "Revoke": {
                    "type": "array",
                    "description": "DataEntity containing the list of principal and right to revoke",
                    "items": {
                      "type": "object",
                      "properties": {
                        "Right": {
                          "type": "string",
                          "description": "The admin right(s) of entity."
                        },
                        "Principal": {
                          "type": "string",
                          "description": "Entity with row access rights."
                        }
                      },
                      "description": "A access right."
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrgUpdatePermission"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/PKI/Login": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Login",
        "description": "After the authentication attempt redirects to redirUrl.",
        "parameters": [
          {
            "name": "redirUrl",
            "in": "query",
            "description": "Where to go after authentication.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PKILogin"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/Policy/AddAuthPolicyModifier": {
      "post": {
        "tags": [
          "Policy Management"
        ],
        "summary": "Add an authentication policy modifier.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "PolicyModifier"
                ],
                "type": "object",
                "properties": {
                  "PolicyModifier": {
                    "type": "string",
                    "description": "The policy modifier to add."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyAddAuthPolicyModifier"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Policy/DeleteAuthPolicyModifier": {
      "post": {
        "tags": [
          "Policy Management"
        ],
        "summary": "Delete an authentication policy modifier.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "PolicyModifier"
                ],
                "type": "object",
                "properties": {
                  "PolicyModifier": {
                    "type": "string",
                    "description": "The policy modifier to delete."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyDeleteAuthPolicyModifier"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Policy/DeletePolicyBlock": {
      "post": {
        "tags": [
          "Policy Management"
        ],
        "summary": "Delete a policy block.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "path"
                ],
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "The policy block to delete."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyDeletePolicyBlock"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Policy/GetAuthPolicyModifiers": {
      "post": {
        "tags": [
          "Policy Management"
        ],
        "summary": "Get the authentication policy modifiers.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyGetAuthPolicyModifiers"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Policy/GetNicePlinks": {
      "post": {
        "tags": [
          "Policy Management"
        ],
        "summary": "Gets a list of policy links.",
        "description": "RevStamp is required for both requesting and setting policy links.\n            Return is a dictionary(plink name, plink fields as below) with RevStamp as the last entry.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyGetNicePlinks"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Policy/GetNicePolicyBlock": {
      "post": {
        "tags": [
          "Policy Management"
        ],
        "summary": "Get policy block.",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The policy block to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyGetNicePolicyBlock"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Policy/GetOathOtpClientName": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the oath otp name for the user.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyGetOathOtpClientName"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Policy/GetPasswordComplexityRequirements": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get the password complexity requirements for the user.",
        "parameters": [
          {
            "name": "uuidOrName",
            "in": "query",
            "description": "User's unique identifier or name to use when retrieving password complexity requirements.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyGetPasswordComplexityRequirements"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Policy/GetPlinks": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets a list of policy links.",
        "description": "Deprecated - use GetNicePlinks() instead...",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyGetPlinks"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false
      }
    },
    "/Policy/GetPolicyBlock": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get policy block.",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The policy block to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyGetPolicyBlock"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Policy/GetPolicyBool": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Retrieves a boolean policy value.",
        "description": "If the policy value isn't set returns the default value.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "def",
                  "name"
                ],
                "type": "object",
                "properties": {
                  "def": {
                    "type": "boolean",
                    "description": "The default value."
                  },
                  "name": {
                    "type": "string",
                    "description": "Where in the policy to read."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyGetPolicyBool"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Policy/GetPolicyInt": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Retrieves an integer policy value.",
        "description": "If the policy value isn't set returns the default value.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "def",
                  "name"
                ],
                "type": "object",
                "properties": {
                  "def": {
                    "type": "integer",
                    "description": "The default value."
                  },
                  "name": {
                    "type": "string",
                    "description": "Where in the policy to read."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyGetPolicyInt"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Policy/GetPolicyMetaData": {
      "post": {
        "tags": [
          "Policy Management"
        ],
        "summary": "Get the policy meta data.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyGetPolicyMetaData"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Policy/GetPolicyString": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Retrieves a string policy value.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Where in the policy to read."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyGetPolicyString"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Policy/GetRsop": {
      "post": {
        "tags": [
          "Policy Management"
        ],
        "summary": "Get the rsop policy for the user and device.",
        "parameters": [
          {
            "name": "userid",
            "in": "query",
            "description": "The user id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceid",
            "in": "query",
            "description": "The device id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyGetRsop"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Policy/GetU2fClientName": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the oath u2f name for the user.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyGetU2fClientName"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Policy/GetUsingCloudMobileGP": {
      "post": {
        "tags": [
          "Policy Management"
        ],
        "summary": "Get using cloud mobile group policy.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyGetUsingCloudMobileGP"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Policy/PolicyChecks": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get a list of policies for a device.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "deviceId",
                  "policies"
                ],
                "type": "object",
                "properties": {
                  "deviceId": {
                    "type": "string",
                    "description": "The device identifier."
                  },
                  "policies": {
                    "type": "array",
                    "description": "A list of policies",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyPolicyChecks"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Policy/SavePolicyBlock2": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deprecated; use SavePolicyBlock3.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "path",
                  "settings"
                ],
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "The path to the block."
                  },
                  "settings": {
                    "type": "object",
                    "properties": {},
                    "description": "The settings for the new policy block."
                  },
                  "newpolicy": {
                    "type": "boolean",
                    "description": "Is this a new policy.",
                    "default": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicySavePolicyBlock2"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Policy/SavePolicyBlock3": {
      "post": {
        "tags": [
          "Policy Management"
        ],
        "summary": "Save a new or updated policy.",
        "description": "Replaces and deprecates SavePolicyBlock2, by adding the \"rev stamp\" functionality that helps \n            prevent change loss when policies are being edited by multiple users.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "plinks",
                  "policy"
                ],
                "type": "object",
                "properties": {
                  "policy": {
                    "type": "object",
                    "properties": {
                      "Newpolicy": {
                        "type": "boolean",
                        "description": "boolean set to true if this is a new policy (add)"
                      },
                      "Version": {
                        "type": "integer",
                        "description": "Policy structure version number.  1, at this time."
                      },
                      "Path": {
                        "type": "string",
                        "description": "path of the policy"
                      },
                      "RevStamp": {
                        "type": "string",
                        "description": "Revision stamp returned from latest call to getPolicyBlock.  This is required if Newpolicy is false."
                      },
                      "Description": {
                        "type": "string",
                        "description": "policy description"
                      }
                    },
                    "description": "JSON object containing the details of the policy being added or updated."
                  },
                  "plinks": {
                    "type": "array",
                    "description": "Array of plink objects representing the current plinks file.",
                    "items": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicySavePolicyBlock3"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Policy/SetPlinks": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Saves a list of policy links.",
        "description": "Deprecated - use SetPlinksv2() instead...",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Plinks"
                ],
                "type": "object",
                "properties": {
                  "Plinks": {
                    "type": "array",
                    "description": "The list of policy links to set.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "Filters": {
                          "type": "array",
                          "description": "The policy link filters.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "AllowedPolicies": {
                          "type": "array",
                          "description": "The policy link allowed policies.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "LinkType": {
                          "type": "string",
                          "description": "The policy link type."
                        },
                        "I18NDescriptionTag": {
                          "type": "string",
                          "description": "Localized version of the description."
                        },
                        "PolicySet": {
                          "type": "string",
                          "description": "The policy link policy set."
                        },
                        "EnableCompliant": {
                          "type": "boolean",
                          "description": "The policy link enable compliant."
                        },
                        "Description": {
                          "type": "string",
                          "description": "The policy link description."
                        },
                        "Params": {
                          "type": "array",
                          "description": "The policy link parameters.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "A policy link."
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicySetPlinks"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Policy/SetPlinksv2": {
      "post": {
        "tags": [
          "Policy Management"
        ],
        "summary": "Saves a list of policy links.",
        "description": "Replacement for SetPlinks, with added code to detect and prevent situations where the action of saving\n            the plinks file overwrites changes that have been made by another mechanism.  The Plinks parameter is\n            identical to the payload of the SetPlinks API, the RevStamp parameter is new.  If the plinks file has\n            been changed since the RevStamp was originally issued then API will return a failure.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Plinks",
                  "RevStamp"
                ],
                "type": "object",
                "properties": {
                  "Plinks": {
                    "type": "array",
                    "description": "The list of PolicyLink items to be saved.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "Filters": {
                          "type": "array",
                          "description": "The policy link filters.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "AllowedPolicies": {
                          "type": "array",
                          "description": "The policy link allowed policies.",
                          "items": {
                            "type": "string"
                          }
                        },
                        "LinkType": {
                          "type": "string",
                          "description": "The policy link type."
                        },
                        "I18NDescriptionTag": {
                          "type": "string",
                          "description": "Localized version of the description."
                        },
                        "PolicySet": {
                          "type": "string",
                          "description": "The policy link policy set."
                        },
                        "EnableCompliant": {
                          "type": "boolean",
                          "description": "The policy link enable compliant."
                        },
                        "Description": {
                          "type": "string",
                          "description": "The policy link description."
                        },
                        "Params": {
                          "type": "array",
                          "description": "The policy link parameters.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "description": "A policy link."
                    }
                  },
                  "RevStamp": {
                    "type": "string",
                    "description": "The string returned from the GetNicePlinks API."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicySetPlinksv2"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Policy/SetUsingCloudMobileGP": {
      "post": {
        "tags": [
          "Policy Management"
        ],
        "summary": "Sets the using cloud mobile group policy.",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "description": "Value to use when calling SetUseCloudGP.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "useCloudCA",
            "in": "query",
            "description": "Use cloud certificate authority.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hideMobilePolicyForAD",
            "in": "query",
            "description": "Hide the mobile policy for active directory.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refreshInterval",
            "in": "query",
            "description": "The policy refresh interval.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gpUpdateInterval",
            "in": "query",
            "description": "The policy update interval.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activeDirectoryCA",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PolicySetUsingCloudMobileGP"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Ppm/GetScriptWithMetadata": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get PPM Scipt and script editor helper info",
        "description": "You must be a system administrator or have user management permissions.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PpmGetScriptWithMetadata"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Ppm/UpdatePpmConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Update Progressive Password Migration Configuration",
        "description": "You must be a system administrator or have user management permissions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "PpmScript"
                ],
                "type": "object",
                "properties": {
                  "PpmScript": {
                    "type": "string",
                    "description": "PPM Script Text"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PpmUpdatePpmConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Radius/GetClients": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get all radius clients.",
        "description": "You must be a system administrator or have radius administrator permissions.",
        "parameters": [
          {
            "name": "isQueryResponse",
            "in": "query",
            "description": "True to convert the result to UIQueryResponse format",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RadiusGetClients"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Radius/GetConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Fetch Radius config for a specified connector",
        "description": "You must be a system administrator or have radius administrator permissions.  Will return null if\n            connector has no radius config.",
        "parameters": [
          {
            "name": "connectorUuid",
            "in": "query",
            "description": "Connector UUID to fetch radius config for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RadiusGetConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Radius/GetServers": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get the list of RADIUS servers",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RadiusGetServers"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Radius/GetUserIdentifierAttributes": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get the user identifier attribute types.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RadiusGetUserIdentifierAttributes"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Radius/RemoveClients": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Remove one or more radius clients if they exist.",
        "description": "You must be a system administrator or have radius administrator permissions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "clients"
                ],
                "type": "object",
                "properties": {
                  "clients": {
                    "type": "array",
                    "description": "List of client addresses to delete",
                    "items": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RadiusRemoveClients"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Radius/RemoveServers": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Remove radius servers.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "HostAddress"
                ],
                "type": "object",
                "properties": {
                  "HostAddress": {
                    "type": "array",
                    "description": "A list of radius hosts to remove.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RadiusRemoveServers"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Radius/SetClient": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Add or update a radius client.",
        "description": "You must be a system administrator or have radius administrator permissions.  When updating an existing client,\n            any properties not provided in the body will retain the existing values.  ClientSecret and ClientName are\n            required on all new clients.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ClientAddress"
                ],
                "type": "object",
                "properties": {
                  "ClientAddress": {
                    "type": "string",
                    "description": "Client IP address"
                  },
                  "ClientCulture": {
                    "type": "string",
                    "description": "Client culture"
                  },
                  "ClientName": {
                    "type": "string",
                    "description": "Client name"
                  },
                  "ClientDescription": {
                    "type": "string",
                    "description": "Client description"
                  },
                  "ClientSecret": {
                    "type": "string",
                    "description": "Client secret"
                  },
                  "ClientAllowNewLinesInPrompts": {
                    "type": "boolean",
                    "description": "Allow embedded new-line characters when sending prompts to the client"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RadiusSetClient"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Radius/SetConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Change radius config for a connector.",
        "description": "You must be a system administrator or have radius administrator permissions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Port",
                  "connectorUuid"
                ],
                "type": "object",
                "properties": {
                  "Port": {
                    "type": "integer",
                    "description": "Radius listen port"
                  },
                  "ReceiveTimeout": {
                    "type": "integer",
                    "description": "Radius receive timeout in milliseconds (default=1000)"
                  },
                  "connectorUuid": {
                    "type": "string",
                    "description": "Connector uuid to set config for"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RadiusSetConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Radius/SetServer": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Configures a Radius server.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "HostAddress",
                  "HostCustomPromptMechChosen",
                  "HostDescription",
                  "HostDisplayName",
                  "HostSharedSecret",
                  "UserIdCustomSubstAttrName",
                  "UserIdSubstAttr"
                ],
                "type": "object",
                "properties": {
                  "HostDescription": {
                    "type": "string",
                    "description": "The description of the external RADIUS server."
                  },
                  "HostDisplayName": {
                    "type": "string",
                    "description": "The displayname of the external RADIUS server."
                  },
                  "HostPort": {
                    "type": "integer",
                    "description": "The port on the external RADIUS server."
                  },
                  "UserIdSubstAttr": {
                    "type": "integer",
                    "description": "see UsernameCustomType enum, from ExternalRadiusHelper"
                  },
                  "HostAddress": {
                    "type": "string",
                    "description": "The IP address of the server."
                  },
                  "ReceiveTimeout": {
                    "type": "integer",
                    "description": "The timeout for receiving a response from this server, in ms."
                  },
                  "HostCustomPromptMechChosen": {
                    "type": "string",
                    "description": "The custom prompt for answering RADIUS MFA."
                  },
                  "HostSharedSecret": {
                    "type": "string",
                    "description": "The shared secret to be used when connecting to the server."
                  },
                  "UserIdCustomSubstAttrName": {
                    "type": "string",
                    "description": "The name of the field to use for custom username."
                  },
                  "MaxAttempts": {
                    "type": "integer",
                    "description": "The maximum number of times to attempt the auth request."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RadiusSetServer"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Registration/CustomerInfo": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets a list of tenants for the customer.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "pass",
                  "user"
                ],
                "type": "object",
                "properties": {
                  "pass": {
                    "type": "string",
                    "description": "The user password."
                  },
                  "user": {
                    "type": "string",
                    "description": "The user to gather information about."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationCustomerInfo"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Registration/RegisterNewTenant": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Register a new tenant.",
        "description": "This takes some time to complete.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "AdminPass",
                  "AdminUser",
                  "Brand",
                  "CustomerName",
                  "CustomerPass",
                  "InitialAlias"
                ],
                "type": "object",
                "properties": {
                  "ManagedBy": {
                    "type": "string",
                    "description": "Who/what manages the tenant."
                  },
                  "InitialStateChangeReason": {
                    "type": "string",
                    "description": "The initial state change reason."
                  },
                  "Company": {
                    "type": "string",
                    "description": "The tenant company."
                  },
                  "AdminUser": {
                    "type": "string",
                    "description": "The tenant admin user name."
                  },
                  "IsMsp": {
                    "type": "boolean",
                    "description": "Is this tenant a managed service partner."
                  },
                  "Brand": {
                    "type": "string",
                    "description": "The tenant brand."
                  },
                  "EntitlementIdsToEnable": {
                    "type": "array",
                    "description": "A list of entitlement ids to enable.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "CustomerTenantData": {
                    "type": "object",
                    "properties": {},
                    "description": "Additional customer tenant data."
                  },
                  "CustomerData": {
                    "type": "object",
                    "properties": {},
                    "description": "Additional customer data."
                  },
                  "AuthSource": {
                    "type": "string",
                    "description": "Authorization source."
                  },
                  "InitialAlias": {
                    "type": "string",
                    "description": "The initial admin user for the tenant."
                  },
                  "CustomerToken": {
                    "type": "string",
                    "description": "The customer token."
                  },
                  "CustomerName": {
                    "type": "string",
                    "description": "The customer name/email."
                  },
                  "AdminPass": {
                    "type": "string",
                    "description": "The tenant admin password."
                  },
                  "AdditionalConfigSettings": {
                    "type": "object",
                    "properties": {},
                    "description": "The additional configuration settings for the tenant."
                  },
                  "AwsCustomerId": {
                    "type": "string",
                    "description": "The aws customer id."
                  },
                  "CustomerPass": {
                    "type": "string",
                    "description": "The customer password."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationRegisterNewTenant"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Roles/GetPagedRoleMembers": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "Get the users for the specfied role id and return the paged results.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Name"
                ],
                "type": "object",
                "properties": {
                  "FilterValue": {
                    "type": "string",
                    "description": "filter the users containing this value"
                  },
                  "PageNumber": {
                    "type": "integer",
                    "description": "number of users to skip"
                  },
                  "Ascending": {
                    "type": "string",
                    "description": "the order of the sorting"
                  },
                  "FilterBy": {
                    "type": "array",
                    "description": "filter the users - search query - by these cols",
                    "items": {
                      "type": "string"
                    }
                  },
                  "PageSize": {
                    "type": "integer",
                    "description": "number of users to fetch"
                  },
                  "SortBy": {
                    "type": "string",
                    "description": "sort the users by this property value"
                  },
                  "Name": {
                    "type": "string",
                    "description": "UUID of the role"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RolesGetPagedRoleMembers"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Roles/GetRole": {
      "post": {
        "tags": [
          "Role Management"
        ],
        "summary": "Fetch a Role.",
        "description": "You must be a system administrator or have role management permissions.",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "Role UUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SuppressPrincipalsList",
            "in": "query",
            "description": "If true, the principals list will not be included (may make this call much faster)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "getRights",
            "in": "query",
            "description": "If true, the get effective right for current user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RolesGetRole"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Roles/GetRoleMembers": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "Fetch a Role's principals.",
        "description": "You must be a system administrator or have role management permissions.",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "Role UUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RolesGetRoleMembers"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Roles/SetDynamicRoleScript": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "Set script of dynamic role",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID",
                  "Script"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "string",
                    "description": "ID of the role to create or update"
                  },
                  "Script": {
                    "type": "string",
                    "description": "Javascript which returns a boolean value"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RolesSetDynamicRoleScript"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Roles/StoreRole": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "Create a Principal List role.",
        "description": "You must be a system administrator or have role management permissions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Name"
                ],
                "type": "object",
                "properties": {
                  "RoleType": {
                    "type": "string",
                    "description": "The type of the role (default=PrincipalList)"
                  },
                  "CheckPrincipalTypes": {
                    "type": "array",
                    "description": "List of Principal Types whether to check (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Roles": {
                    "type": "array",
                    "description": "List of role UUIDs or Names to add to the role (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Users": {
                    "type": "array",
                    "description": "List of user UUIDs or Names to add to the role (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Groups": {
                    "type": "array",
                    "description": "List of group UUIDs or Names to add to the role (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description of the role (default=null)"
                  },
                  "Name": {
                    "type": "string",
                    "description": "Name of the role to create"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RolesStoreRole"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Roles/TestDynamicRoleScript": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "Run the script against a user to verify the expectations of the script",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Script",
                  "User"
                ],
                "type": "object",
                "properties": {
                  "User": {
                    "type": "string",
                    "description": "ID of the user object for testing the script"
                  },
                  "Script": {
                    "type": "string",
                    "description": "Script to test"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RolesTestDynamicRoleScript"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Roles/UpdateRole": {
      "post": {
        "tags": [
          "Role Management"
        ],
        "summary": "Update specific attributes.",
        "description": "Update the Role name, description, and membership using the following body parameters. Role membership can include Users, Groups, or other Roles. You must have the Role Management Administrative Right to update Role attributes.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Name"
                ],
                "type": "object",
                "properties": {
                  "CheckPrincipalTypes": {
                    "type": "array",
                    "description": "List of Principals Type whether to check (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Roles": {
                    "type": "object",
                    "properties": {},
                    "description": "DataEntity containing two lists (Add and Delete, both optional) of role names or UUIDs to add or remove from the role (default=null)"
                  },
                  "Users": {
                    "type": "object",
                    "properties": {},
                    "description": "DataEntity containing two lists (Add and Delete, both optional) of user names or UUIDs to add or remove from the role (default=null)"
                  },
                  "Groups": {
                    "type": "object",
                    "properties": {},
                    "description": "DataEntity containing two lists (Add and Delete, both optional) of group names or UUIDs to add or remove from the role (default=null)"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description of the role (default=null)"
                  },
                  "Name": {
                    "type": "string",
                    "description": "ID of the role to update"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RolesUpdateRole"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/SaasManage/AddUsersAndGroupsToRole": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "Add principals to role.",
        "description": "You must be a system administrator or have role management permissions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Name"
                ],
                "type": "object",
                "properties": {
                  "CheckPrincipalTypes": {
                    "type": "array",
                    "description": "List of Principals Type whether to check (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Roles": {
                    "type": "array",
                    "description": "List of role UUIDs or Names to add to the role (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Users": {
                    "type": "array",
                    "description": "List of user UUIDs or Names to add to the role (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Groups": {
                    "type": "array",
                    "description": "List of group UUIDs or Names to add to the role (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Name": {
                    "type": "string",
                    "description": "Role UUID"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SaasManageAddUsersAndGroupsToRole"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/SaasManage/DeleteApplication": {
      "post": {
        "tags": [
          "Application Management"
        ],
        "summary": "Delete an application.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "_RowKey"
                ],
                "type": "object",
                "properties": {
                  "_RowKey": {
                    "type": "array",
                    "description": "Application key",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SaasManageDeleteApplication"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/SaasManage/DeleteRole": {
      "post": {
        "tags": [
          "Role Management"
        ],
        "summary": "Delete a role.",
        "description": "You must be a system administrator or have role management permissions.",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "Role UUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SaasManageDeleteRole"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/SaasManage/DeleteRoles": {
      "post": {
        "tags": [
          "Role Management"
        ],
        "summary": "Delete a list of Roles.",
        "description": "You must be a system administrator or have role management permissions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "Json string list of role UUIDs to delete."
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SaasManageDeleteRoles"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/SaasManage/GetAppIDByServiceName": {
      "post": {
        "tags": [
          "Additional APIs",
          "Application Management"
        ],
        "summary": "Gets the ID of an app from its service name",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SaasManageGetAppIDByServiceName"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/SaasManage/GetApplication": {
      "post": {
        "tags": [
          "Application Management"
        ],
        "summary": "Get information for an application.",
        "parameters": [
          {
            "name": "_RowKey",
            "in": "query",
            "description": "App key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SaasManageGetApplication"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/SaasManage/GetRole": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "Fetch a Role.",
        "description": "You must be a system administrator or have role management permissions.",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "Role UUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SuppressPrincipalsList",
            "in": "query",
            "description": "If true, the principals list will not be included (may make this call much faster)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SaasManageGetRole"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false
      }
    },
    "/SaasManage/GetRoleMembers": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "Deprecated -- Fetch a Role's principals.",
        "description": "Deprecated -- Use /roles/GetRoleMembers instead\n            You must be a system administrator or have role management permissions.",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "description": "Role UUID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SaasManageGetRoleMembers"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false
      }
    },
    "/SaasManage/GetTemplatesAndCategories": {
      "post": {
        "tags": [
          "Additional APIs",
          "Application Management"
        ],
        "summary": "Get information for application templates.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SaasManageGetTemplatesAndCategories"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/SaasManage/ImportAppFromTemplate": {
      "post": {
        "tags": [
          "Application Management"
        ],
        "summary": "Create an application.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "array",
                    "description": "Application template name",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SaasManageImportAppFromTemplate"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/SaasManage/IsApplicationAvailableInCatalog": {
      "post": {
        "tags": [
          "Additional APIs",
          "Application Management"
        ],
        "summary": "Checks if Application is still available in the catalog.",
        "parameters": [
          {
            "name": "appKey",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SaasManageIsApplicationAvailableInCatalog"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/SaasManage/RemoveUsersAndGroupsFromRole": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "Remove principals from role.",
        "description": "You must be a system administrator or have role management permissions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Name"
                ],
                "type": "object",
                "properties": {
                  "Roles": {
                    "type": "array",
                    "description": "List of role UUIDs or Names to add remove from role (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Users": {
                    "type": "array",
                    "description": "List of user UUIDs or Names to remove from the role (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Groups": {
                    "type": "array",
                    "description": "List of group UUIDs or Names to remove from the role (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Name": {
                    "type": "string",
                    "description": "Role UUID"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SaasManageRemoveUsersAndGroupsFromRole"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/SaasManage/SetApplicationPermissions": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Grant permissions on applicationss",
        "description": "You must be a system administrator or have 'Grant' permission on the resource or have global 'Grant' permission on resources.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "string",
                    "description": "ID of the resource, Set to null for global permissions"
                  },
                  "Grants": {
                    "type": "object",
                    "properties": {
                      "Rights": {
                        "type": "string",
                        "description": "Permissions: Grant, View, Admin, LimitedAdmin"
                      },
                      "Principal": {
                        "type": "string",
                        "description": "User name or role name"
                      },
                      "PrincipalId": {
                        "type": "string",
                        "description": "Uuid of the principal"
                      },
                      "PType": {
                        "type": "string",
                        "description": "Principal type: User, Role etc.. "
                      }
                    },
                    "description": "Array of permissions to be set. Each item must include  Principal: User name or role name, PType: User, Role..,  Rights: ManageSession, Edit, Delete, Grant, AgentAuth"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SaasManageSetApplicationPermissions"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/SaasManage/StoreRole": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "Deprecated -- Create a Principal List role.",
        "description": "Deprecated -- Use /roles/StoreRole instead\n            You must be a system administrator or have role management permissions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Name"
                ],
                "type": "object",
                "properties": {
                  "CheckPrincipalTypes": {
                    "type": "array",
                    "description": "List of Principal Types whether to check (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Roles": {
                    "type": "array",
                    "description": "List of role UUIDs or Names to add to the role (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Users": {
                    "type": "array",
                    "description": "List of user UUIDs or Names to add to the role (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Groups": {
                    "type": "array",
                    "description": "List of group UUIDs or Names to add to the role (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description of the role (default=null)"
                  },
                  "Name": {
                    "type": "string",
                    "description": "Name of the role to create"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SaasManageStoreRole"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/SaasManage/UpdateApplicationDE": {
      "post": {
        "tags": [
          "Application Management"
        ],
        "summary": "Update an application.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "_RowKey"
                ],
                "type": "object",
                "properties": {
                  "ShowRegistration": {
                    "type": "boolean",
                    "description": "Whether to show registration link"
                  },
                  "_RowKey": {
                    "type": "string",
                    "description": "Application key"
                  },
                  "Handler": {
                    "type": "string",
                    "description": "Application handler"
                  },
                  "IconUri": {
                    "type": "string",
                    "description": "Icon path"
                  },
                  "AppRoles": {
                    "type": "object",
                    "properties": {},
                    "description": "To assign or un-assign roles for accessing the application"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Application description"
                  },
                  "Name": {
                    "type": "string",
                    "description": "Application name"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SaasManageUpdateApplicationDE"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/SaasManage/UpdateRole": {
      "post": {
        "tags": [
          "Additional APIs",
          "Role Management"
        ],
        "summary": "Deprecated -- Update a Role.",
        "description": "Deprecated -- Use /roles/UpdateRole instead\n            You must be a system administrator or have role management permissions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Name"
                ],
                "type": "object",
                "properties": {
                  "CheckPrincipalTypes": {
                    "type": "array",
                    "description": "List of Principals Type whether to check (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Roles": {
                    "type": "array",
                    "description": "List of role UUIDs or Names to add to the role (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Users": {
                    "type": "array",
                    "description": "List of user UUIDs or Names to add to the role (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Groups": {
                    "type": "array",
                    "description": "List of group UUIDs or Names to add to the role (default=null)",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description of the role (default=null)"
                  },
                  "Name": {
                    "type": "string",
                    "description": "UUID of the role to update"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SaasManageUpdateRole"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/SchedulerHistory/DeleteJobHistory": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Delete job history.",
        "parameters": [
          {
            "name": "jobid",
            "in": "query",
            "description": "The job who's history needs cleaning up.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SchedulerHistoryDeleteJobHistory"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/SchedulerHistory/GetJobReport": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Make a job report.",
        "parameters": [
          {
            "name": "jobId",
            "in": "query",
            "description": "The job to examine.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SchedulerHistoryGetJobReport"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Security/AdvanceAuthentication": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Attempt to advance the state of an authentication session.",
        "description": "<p>Use this API to advance the user authentication to authenticate the user against CyberArk Identity. \n            <ul><li>Once start authentication API is invoked and a user authentication session has been created successfully, the advance authentication API is invoked to further advance the user authentication process.</li>\n            <li>SessionId and MechanismId returned as part of the “/startAuthentication” API are passed as request parameters to this API. </li>\n            <li>If the request to the API is successful, you can expect 'StartNextChallenge' or 'LoginSuccess' response, however the system may (at any time) return a new MFA Package which may add, remove, or change challenges.</li>\n            <li>For Out of Bounds (OOB) challenge, which involves an additional entity, such as a smartphone, in the authentication process. Please refer <a href=\"https://identity-developer.cyberark.com/docs/advancing-out-of-bounds-authentication\">OOB Challenge</a></li>\n            <li>For MFA please refer <a href=\"https://identity-developer.cyberark.com/docs/advancing-multi-factor-authentication\">MFA Process</a></li>\n            <li>As a response to advance authentication API, an authentication cookie (. ASPXAUTH) would be returned for the user. This cookie can be used to access the CyberArk Identity APIs on behalf of the user. </li>\n            <li>Failure cases typically result in an 'Undefined' error message when the tenant settings are not configured properly or a \"LoginFailure' message when incorrect answers to the MFA challenges have terminated the user session (these incorrect answers may have been sent in previous calls to this API).</li>\n            </ul></p>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Action",
                  "MechanismId",
                  "SessionId"
                ],
                "type": "object",
                "properties": {
                  "TenantId": {
                    "type": "string",
                    "description": "Tenant ID received as a response to the start authentication API ",
                    "default": "abc-123"
                  },
                  "Action": {
                    "type": "string",
                    "description": "The action to be taken with respect to the supplied MechanismId(Ex: answer to the challenge, send oob challenge, wait for oob response, etc.).  <ul>possible actions <li>Unknown</li><li>Answer</li><li>StartOOB</li><li>Poll</li><li>ForgotPassword</li><li>RetryOOB</li></ul>"
                  },
                  "PersistentLogin": {
                    "type": "boolean",
                    "description": "Flag indicating if the user's session should persist after closing the browser"
                  },
                  "SessionId": {
                    "type": "string",
                    "description": "The session ID is retrieved from the response received from Start Authentication API."
                  },
                  "MechanismId": {
                    "type": "string",
                    "description": "The mechanism ID is retrieved from the response received from Start Authentication API."
                  },
                  "Answer": {
                    "type": "string",
                    "description": "For mechanisms that need to be answered such as password, security code, etc., provide the answers in this field "
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAdvanceAuthentication"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/AdvanceForgotUsername": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Advances a forgot username session (similar to MFA advance authentication).",
        "description": "Handles and mfa-like package with a single challenge (special case 'ForgotUsername' package).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Action",
                  "Answer",
                  "TenantId"
                ],
                "type": "object",
                "properties": {
                  "TenantId": {
                    "type": "string",
                    "description": "The tenant id."
                  },
                  "Action": {
                    "type": "string",
                    "description": "The payload key action."
                  },
                  "Answer": {
                    "type": "string",
                    "description": "The answer."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAdvanceForgotUsername"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/AmIAuthenticated": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deprecated -- Am I authenticated.",
        "description": "Please use WhoAmI.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAmIAuthenticated"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/AnswerOOBChallenge": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "MultiFactor Auth support: answer out of band challenge.",
        "description": "Invoked by 3rd party services for answering out of band challenges.\n            (text messages or email, not PhoneFactor)\n            Supports the click on link scenario.",
        "parameters": [
          {
            "name": "answer",
            "in": "query",
            "description": "The answer to verify against.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityAnswerOOBChallenge"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/ChallengeUser": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get challenge state ID for Authentication profile",
        "description": "<p>This API is used to get challenge state ID for an authentication profile. \n            <ul><li>The API is invoked when you want to step up authentication for sensitive applications. </li>\n            <li>Pass the authentication profile name of the profile configured for the application to this API.</li>\n            <li>The ChallengeID is received as a response for this API, and it is used to start the step-up authentication for the app.</li></ul></p>",
        "parameters": [
          {
            "name": "profileName",
            "in": "query",
            "description": "Authentication profile name should be provided which is mapped against the application for which step-up authentication should be triggered.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityChallengeUser"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Security/CleanupAuthentication": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Terminate an incomplete session started with StartAuthentication or StartChallenge.",
        "description": "Does not affect completed authentication sessions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "SessionId",
                  "TenantId"
                ],
                "type": "object",
                "properties": {
                  "TenantId": {
                    "type": "string",
                    "description": "Tenant ID/suffix returned by the call that started the authentication session"
                  },
                  "SessionId": {
                    "type": "string",
                    "description": "Session ID returned by the call that started the authentication session"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityCleanupAuthentication"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/DoIHaveRight": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deprecated -- Checks for user execute rights on the Application Role Management task.",
        "description": "Keeping this API for backward compatibility.\n            Please use TaskCheck.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityDoIHaveRight"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false
      }
    },
    "/Security/ForgotUsername": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Begin the process of recovering a lost or forgotten user name.",
        "description": "The request must be made using a tenant-specific URL.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "SearchKey"
                ],
                "type": "object",
                "properties": {
                  "SearchKey": {
                    "type": "string",
                    "description": "Email address of the user to search for."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityForgotUsername"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/GetOneTimePassword": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Fetches a one-time passcode for the specified use.",
        "parameters": [
          {
            "name": "use",
            "in": "query",
            "description": "What's the password being used for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGetOneTimePassword"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Security/GetQRCodeStatus": {
      "post": {
        "tags": [
          "Multi-Factor Registration"
        ],
        "summary": "Returns QR Code data",
        "parameters": [
          {
            "name": "guid",
            "in": "query",
            "description": "The guid associated to login QR code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "guid"
                ],
                "type": "object",
                "properties": {
                  "guid": {
                    "type": "string",
                    "description": "The guid to check if value changed."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGetQRCodeStatus"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/GetRiskAnalysisLevels": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets a list of risk levels.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGetRiskAnalysisLevels"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Security/GetTokenForUser": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Get Token for username\n            Requires OATH2 Authorization header",
        "description": "Retrieves a Bearer Token for use with the username provided",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "username to get Bearer Token for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "auth type to return for user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "user"
                ],
                "type": "object",
                "properties": {
                  "user": {
                    "type": "string",
                    "description": "username to get Bearer Token for."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGetTokenForUser"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/Login": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Deprecated -- User login.",
        "description": "Please use StartAuthentication/AdvanceAuthentication.",
        "parameters": [
          {
            "name": "systemID",
            "in": "query",
            "description": "The customer processing the login.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "The user trying to login.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The user password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "persist",
            "in": "query",
            "description": "The persist state given to the cookie.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityLogin"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/Logout": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Logout current user.",
        "description": "The user will be redirected to redirectUrl if it is present.\n            RedirectUrl can be external or relative.",
        "parameters": [
          {
            "name": "redirectUrl",
            "in": "query",
            "description": "Where to go next.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "allowIWA",
            "in": "query",
            "description": "Allow windows authentication.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityLogout"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/MultiAuthLogin": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deprecated -- Multi factor authentication login for user.",
        "description": "Please use StartAuthentication/AdvanceAuthentication.",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "Current user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Customer identifier.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "persist",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "elevate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "RecId",
                  "nextMechId"
                ],
                "type": "object",
                "properties": {
                  "nextMechId": {
                    "type": "string",
                    "description": "The id to the next authentication mechanism."
                  },
                  "RecId": {
                    "type": "string",
                    "description": "Record id."
                  },
                  "PFType": {
                    "type": "string",
                    "description": "The phone type."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityMultiAuthLogin"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/OnDemandChallenge": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Allows OAuth2 clients to perform on-demand step-up authentication challenges.",
        "description": "Uses custom policy key modifiers to choose auth rules and profiles.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "PolicyModifier",
                  "User"
                ],
                "type": "object",
                "properties": {
                  "User": {
                    "type": "string",
                    "description": "Username of the user to challenge on behalf of."
                  },
                  "PolicyModifier": {
                    "type": "string",
                    "description": "The policy modifier key to use for deterministic selection of an Authentication Profile."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityOnDemandChallenge"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/OobAuthStatus": {
      "post": {
        "tags": [],
        "summary": "Returns Out of band login status",
        "parameters": [
          {
            "name": "sessionId",
            "in": "query",
            "description": "The session associated to Oob login.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "sessionId"
                ],
                "type": "object",
                "properties": {
                  "sessionId": {
                    "type": "string",
                    "description": "The session id to check if login state changed."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityOobAuthStatus"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/RefreshToken": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management",
          "Directory Service Management"
        ],
        "summary": "Refresh current user's cached identity.",
        "description": "User cached identity in the cloud is reloaded from their directory service.  Useful when user details have changed in their remote directory service, but have not yet been pushed to the cloud.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityRefreshToken"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Security/ResumeFromExtIdpAuth": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Continues user authentication.",
        "description": "Continued after receiving authentication results from the identity provider.",
        "parameters": [
          {
            "name": "ExtIdpAuthChallengeState",
            "in": "query",
            "description": "The current Idp challenge state.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ExtIdpAuthChallengeState"
                ],
                "type": "object",
                "properties": {
                  "ExtIdpAuthChallengeState": {
                    "type": "string",
                    "description": "The Idp authentication challenge state."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityResumeFromExtIdpAuth"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/SetUserSecurityImage": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Saves an Security Image Name in DB.",
        "description": "Update Cookie if User UUID and ImageUUID not present",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "settings"
                ],
                "type": "object",
                "properties": {
                  "settings": {
                    "type": "object",
                    "properties": {
                      "Uuid": {
                        "type": "string",
                        "description": "User UUID."
                      },
                      "imageName": {
                        "type": "string",
                        "description": "image name."
                      }
                    },
                    "description": "The image details."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecuritySetUserSecurityImage"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/StartAuthentication": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Starts a user authentication session.",
        "description": "<p>Use this API to start the user authentication session to authenticate the user against CyberArk Identity.<ul><li> The API gets invoked when the user wants to authenticate to CyberArk Identity and the user enters username on the login form. </li><li>If the user exists in CyberArk Identity cloud directory, the server returns an array of security challenges to the client, that the user must fulfill for each challenge. </li><li>The user\u0092s responses to these mechanisms are processed via the AdvanceAuthentication endpoint.</li></ul></p>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "User",
                  "Version"
                ],
                "type": "object",
                "properties": {
                  "TenantId": {
                    "type": "string",
                    "description": "The ID of the tenant to which the user is logging in. If this field is not provided, the username must identify the tenant",
                    "default": "abc-123"
                  },
                  "Version": {
                    "type": "string",
                    "description": "Version of the data being sent. Options: 1.0",
                    "default": "1.0"
                  },
                  "User": {
                    "type": "string",
                    "description": "The username of the user authenticating to CyberArk Identity ",
                    "default": "Test_user"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityStartAuthentication"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/StartChallenge": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Start a step-up challenge for sensitive apps",
        "description": "<p>The API is used to start the step-up authentication for sensitive applications. \n            <ul><li>This API is invoked when a user is trying to access a sensitive application that requires additional challenges to be fulfilled.</li>\n            <li>The challenge ID parameter received from the “/ChallengeUser” API is sent as a request parameter.</li></ul></p>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ChallengeStateId",
                  "Version"
                ],
                "type": "object",
                "properties": {
                  "Version": {
                    "type": "string",
                    "description": "Version of the data being sent. Options: 1.0"
                  },
                  "ChallengeStateId": {
                    "type": "string",
                    "description": "Challenge Id returned by Challenge user API."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityStartChallenge"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/StartForgotUsername": {
      "post": {
        "tags": [
          "Additional APIs",
          "Authentication"
        ],
        "summary": "Starts a forgot username session that looks similar to an MFA authentication session.",
        "description": "Returns an mfa package with a single challenge (special case 'ForgotUsername' package). The tenant Id is derived from the URL - there is no way to specify it otherwise.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Version"
                ],
                "type": "object",
                "properties": {
                  "Version": {
                    "type": "string",
                    "description": "The payload key version."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityStartForgotUsername"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/StartQRCodeAuthentication": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Starts a user authentication session for QR code authentication.",
        "description": "The authentication package returned is a complex structure that guides the caller through the authentication process. Multiple calls to AdvanceAuthentication\n            may be required to complete the process.\n            If QR tenant config is disabled, this will result in failure.\n            Pod or tenant feature flag can be used to disable this feature. It is disabled by default.\n            Authorization cookie is required in Header arguments",
        "parameters": [
          {
            "name": "guid",
            "in": "query",
            "description": "The guid associated to login QR code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "guid"
                ],
                "type": "object",
                "properties": {
                  "guid": {
                    "type": "string",
                    "description": "The guid to start authentication on."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityStartQRCodeAuthentication"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/StartSocialAuthentication": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Start social authentication.",
        "description": "<p>Invoke this API when you want to enable the external users (such as customers or temporary contractors) to use their existing social media credentials to log into the CyberArk Identity user portal. \n            <ul><li>This Endpoint initiates the Social Authentication for the user. </li>\n            <li>For detailed Configuration refer <a href=\"https://identity-developer.cyberark.com/docs/social-login-2\">Social Login</a></li></p>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "IdpName",
                  "PostExtIdpAuthCallbackUrl"
                ],
                "type": "object",
                "properties": {
                  "PostExtIdpAuthCallbackUrl": {
                    "type": "string",
                    "description": "Where the Idp should send the user after authentication."
                  },
                  "IdpName": {
                    "type": "string",
                    "description": "The identity provider name (Facebook, Google, Twitter, LinkedIn, Microsoft)."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityStartSocialAuthentication"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/SubmitDuo": {
      "post": {
        "tags": [
          "Multi-Factor Registration"
        ],
        "summary": "Submit DUO authentication",
        "description": "The request must be made using a tenant-specific URL.",
        "parameters": [
          {
            "name": "sessionId",
            "in": "query",
            "description": "The sessionId this Duo code mech belongs to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "signedResponse",
            "in": "query",
            "description": "The signed response from Duo",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecuritySubmitDuo"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/SubmitOathOtpCode": {
      "post": {
        "tags": [
          "Multi-Factor Registration"
        ],
        "summary": "Submit OATH OTP code for the specify user",
        "description": "The request must be made using a tenant-specific URL.",
        "parameters": [
          {
            "name": "otpCode",
            "in": "query",
            "description": "OATH One time password.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userUuid",
            "in": "query",
            "description": "Uuid for the authentication user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "otpCode",
                  "userUuid"
                ],
                "type": "object",
                "properties": {
                  "otpCode": {
                    "type": "string",
                    "description": "OATH One time password."
                  },
                  "userUuid": {
                    "type": "string",
                    "description": "Uuid for the authentication user."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecuritySubmitOathOtpCode"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/SubmitQRCode": {
      "post": {
        "tags": [
          "Multi-Factor Registration"
        ],
        "summary": "Submit QR Code authentication",
        "description": "The request must be made using a tenant-specific URL.\n            The request must be authenticated",
        "parameters": [
          {
            "name": "sessionId",
            "in": "query",
            "description": "The sessionId this QR code mech belongs to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecuritySubmitQRCode"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/TaskCheck": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Checks to see if user has execute rights on the task.",
        "parameters": [
          {
            "name": "Task",
            "in": "query",
            "description": "The task.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityTaskCheck"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Security/TaskChecks": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Checks to see if user has execute rights on a list of tasks.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "tasks"
                ],
                "type": "object",
                "properties": {
                  "tasks": {
                    "type": "array",
                    "description": "A list of tasks.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityTaskChecks"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/TwilioPhoneChallengeCompleted": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Looks for the multi auth customer response.",
        "description": "Invoked by 3rd party services answering twilio messages.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ResponseXml": {
                    "type": "string",
                    "description": "The multi auth digit response from the customer."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityTwilioPhoneChallengeCompleted"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/TwilioPhoneChallengeNotAnswered": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Looks for the multi auth customer response.",
        "description": "Invoked by 3rd party services answering twilio messages.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ResponseXml": {
                    "type": "string",
                    "description": "The multi auth digit response from the customer."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityTwilioPhoneChallengeNotAnswered"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Security/WhoAmI": {
      "post": {
        "tags": [
          "Additional APIs",
          "Authorization"
        ],
        "summary": "Confirms user authentication state.",
        "parameters": [
          {
            "name": "challenge",
            "in": "query",
            "description": "Not used.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityWhoAmI"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/ServerAgent/AddEnrollmentCode": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Add an enrollment code",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ConnectorID",
                  "Description",
                  "IPRange",
                  "MaxUseCount",
                  "NeverExpire",
                  "NoMaxUseCount",
                  "Owner",
                  "OwnerType",
                  "SetID",
                  "UseCount"
                ],
                "type": "object",
                "properties": {
                  "NeverExpire": {
                    "type": "boolean",
                    "description": "Enrollment code never expires"
                  },
                  "MaxUseCount": {
                    "type": "integer",
                    "description": "The number of times allowed to enroll using this enrollment code"
                  },
                  "IPRange": {
                    "type": "array",
                    "description": "List of IP ranges for the enrollment code",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description of the enrollment code"
                  },
                  "NoMaxUseCount": {
                    "type": "boolean",
                    "description": "No limit on the number of times allowed to enroll using this enrollment code"
                  },
                  "UseCount": {
                    "type": "integer",
                    "description": "The number of times already enrolled using this enrollment code"
                  },
                  "OwnerID": {
                    "type": "string",
                    "description": "ID of the owner of the enrollment code"
                  },
                  "SetID": {
                    "type": "array",
                    "description": "List of Set ID for the enrollment code",
                    "items": {
                      "type": "string"
                    }
                  },
                  "OwnerType": {
                    "type": "string",
                    "description": "Type of the owner of the enrollment code"
                  },
                  "ConnectorID": {
                    "type": "array",
                    "description": "List of Connector ID for the enrollment code",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Owner": {
                    "type": "string",
                    "description": "Name of the owner of the enrollment code"
                  },
                  "SetName": {
                    "type": "array",
                    "description": "List of Set Name for the enrollment code",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerAgentAddEnrollmentCode"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerAgent/DeleteEnrollmentCode": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Delete an enrollment code",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "EnrollmentCode"
                ],
                "type": "object",
                "properties": {
                  "EnrollmentCode": {
                    "type": "string",
                    "description": "The enrollment code to delete."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerAgentDeleteEnrollmentCode"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerAgent/DisableFeatures": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Disables zero or more features for an enrolled machine.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerAgentDisableFeatures"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerAgent/EnableFeatures": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deprecated -- EnableFeatures",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerAgentEnableFeatures"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false
      }
    },
    "/ServerAgent/EnableFeaturesV2": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Enables zero or more features for an enrolled machine.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "AccountName",
                  "Features",
                  "ResourceName",
                  "Uuid"
                ],
                "type": "object",
                "properties": {
                  "AgentAuthRoles": {
                    "type": "string",
                    "description": "Comma separated string of CIP Roles to give Agent Auth permission to on the PAS system corresponding to the machine. No permissions are granted if null or the empty string is provided",
                    "default": null
                  },
                  "Features": {
                    "type": "string",
                    "description": "Comma separated string representing features to enable: "
                  },
                  "Uuid": {
                    "type": "string",
                    "description": "UUID of the agent profile corresponding to the machine to enable features for"
                  },
                  "ResourceName": {
                    "type": "string",
                    "description": "Name of the PAS system corresponding to the machine"
                  },
                  "AccountName": {
                    "type": "string",
                    "description": "Name of the agent profile corresponding to the machine"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerAgentEnableFeaturesV2"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerAgent/Enroll": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deprecated -- Enroll",
        "description": "Please use EnrollV2 instead.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerAgentEnroll"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false
      }
    },
    "/ServerAgent/EnrollV2": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Enrolls a machine to the CIP using user credentials.",
        "description": "See  for enrolling using an enrollment code.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "AgentVersion",
                  "FQDN",
                  "Name",
                  "OperatingSystem",
                  "Owner",
                  "ResourceSetting"
                ],
                "type": "object",
                "properties": {
                  "OperatingSystem": {
                    "type": "string",
                    "description": "Operating system of the enrolling machine. Should start with 'darwin' for macOS, and 'windows' for Windows. Can start with anything for Linux. See "
                  },
                  "Sets": {
                    "type": "array",
                    "description": "List of system sets to add the created system to: ",
                    "items": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "Name": {
                    "type": "string",
                    "description": "Name prefix of the agent / corresponding service user. If the Suffix argument is supplied, said suffix will be used to form the final name. Otherwise, a default suffix will be used"
                  },
                  "CertificatePassword": {
                    "type": "string",
                    "description": "Password to protect the PKCS #12 'Cert' return value. If omitted or empty, a default password is used",
                    "default": "[default password]"
                  },
                  "ResourcePolicy": {
                    "type": "string",
                    "description": "JSON encoded policies the corresponding system should have",
                    "default": null
                  },
                  "DeviceID": {
                    "type": "string",
                    "description": "Device ID of the enrolling machine. Should only be provided by Mac agents",
                    "default": ""
                  },
                  "AgentVersion": {
                    "type": "string",
                    "description": "Version of the agent performing the enrollment"
                  },
                  "ResourceName": {
                    "type": "string",
                    "description": "Name the PAS system corresponding to the enrolled machine should have. If the Suffix argument is supplied, the final name of the system will be in the form '[name]@[suffix]'. Otherwise, the final name will be in the form '[name]'",
                    "default": "[value of Name]"
                  },
                  "Suffix": {
                    "type": "string",
                    "description": "Specific suffix to use for the login and resource names. See the documentation of Name and ResourceName for details",
                    "default": ""
                  },
                  "FQDN": {
                    "type": "string",
                    "description": "Either the FQDN or IP address of the machine being enrolled"
                  },
                  "ResourceSetting": {
                    "type": "string",
                    "description": "JSON encoded settings the corresponding system should have. At minimum, the 'ComputerClass' and 'SessionType' values should be provided"
                  },
                  "Overwrite": {
                    "type": "boolean",
                    "description": "Whether an agent profile take over attempt is made if the enrollment would result in such a scenario",
                    "default": false
                  },
                  "Owner": {
                    "type": "string",
                    "description": "Name of a user or CIP role to set as the owner of the agent profile. The owner impacts what users can manage or take over the profile"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerAgentEnrollV2"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerAgent/GetAllEnrollmentCodes": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get all enrollment codes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "RRFormat": {
                    "type": "boolean",
                    "description": "Return data in database format.",
                    "default": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerAgentGetAllEnrollmentCodes"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerAgent/GetCertificate": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Returns a machine certificate.",
        "description": "The agent uses the certificate to establish an SslStream with a DirectAudit collector.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "CertificatePassword": {
                    "type": "string",
                    "description": "The certificate password.",
                    "default": ""
                  },
                  "ServerAuthentication": {
                    "type": "boolean",
                    "description": "Is the certificate being used for server authentication.",
                    "default": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerAgentGetCertificate"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerAgent/Register": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Register",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerAgentRegister"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": true
      }
    },
    "/ServerAgent/RegisterV2": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Enrolls a machine to the CIP using an enrollment code.",
        "description": "See EnrollV2 for enrolling using user credentials.\n            Use the same arguments as EnrollV2 with the following modifications:\n                Added: EnrollmentCode\n                Disallowed: Owner\n                    Owner must be omitted or the empty string since the agent profile will be the owner\n                    of the enrollment code.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "AgentVersion",
                  "EnrollmentCode",
                  "FQDN",
                  "Name",
                  "OperatingSystem",
                  "Owner",
                  "ResourceSetting"
                ],
                "type": "object",
                "properties": {
                  "OperatingSystem": {
                    "type": "string",
                    "description": "Operating system of the enrolling machine. Should start with 'darwin' for macOS, and 'windows' for Windows. Can start with anything for Linux. See "
                  },
                  "Sets": {
                    "type": "array",
                    "description": "List of system sets to add the created system to: ",
                    "items": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "Name": {
                    "type": "string",
                    "description": "Name prefix of the agent / corresponding service user. If the Suffix argument is supplied, said suffix will be used to form the final name. Otherwise, a default suffix will be used"
                  },
                  "CertificatePassword": {
                    "type": "string",
                    "description": "Password to protect the PKCS #12 'Cert' return value. If omitted or empty, a default password is used",
                    "default": "[default password]"
                  },
                  "ResourcePolicy": {
                    "type": "string",
                    "description": "JSON encoded policies the corresponding system should have",
                    "default": null
                  },
                  "DeviceID": {
                    "type": "string",
                    "description": "Device ID of the enrolling machine. Should only be provided by Mac agents",
                    "default": ""
                  },
                  "AgentVersion": {
                    "type": "string",
                    "description": "Version of the agent performing the enrollment"
                  },
                  "ResourceName": {
                    "type": "string",
                    "description": "Name the PAS system corresponding to the enrolled machine should have. If the Suffix argument is supplied, the final name of the system will be in the form '[name]@[suffix]'. Otherwise, the final name will be in the form '[name]'",
                    "default": "[value of Name]"
                  },
                  "Suffix": {
                    "type": "string",
                    "description": "Specific suffix to use for the login and resource names. See the documentation of Name and ResourceName for details",
                    "default": ""
                  },
                  "FQDN": {
                    "type": "string",
                    "description": "Either the FQDN or IP address of the machine being enrolled"
                  },
                  "ResourceSetting": {
                    "type": "string",
                    "description": "JSON encoded settings the corresponding system should have. At minimum, the 'ComputerClass' and 'SessionType' values should be provided"
                  },
                  "Overwrite": {
                    "type": "boolean",
                    "description": "Whether an agent profile take over attempt is made if the enrollment would result in such a scenario",
                    "default": false
                  },
                  "EnrollmentCode": {
                    "type": "string",
                    "description": "Enrollment code to enroll with."
                  },
                  "Owner": {
                    "type": "string",
                    "description": "Name of a user or CIP role to set as the owner of the agent profile. The owner impacts what users can manage or take over the profile"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerAgentRegisterV2"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerAgent/Unenroll": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Unenroll an enrolled Agent.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Delete",
                  "Uuid"
                ],
                "type": "object",
                "properties": {
                  "Delete": {
                    "type": "boolean",
                    "description": "Remove all reseources, the agent profile, and the service account."
                  },
                  "Uuid": {
                    "type": "string",
                    "description": "The agent unique identifier."
                  },
                  "ResourceName": {
                    "type": "string",
                    "description": "The agent resource name."
                  },
                  "AccountName": {
                    "type": "string",
                    "description": "The agent profile name."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerAgentUnenroll"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerAgent/VerifyPasswordV2": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Verify password.",
        "description": "Verify that the given password is correct for the given user.\n            Similar to VerifyPassword, but this API is preferred.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Password",
                  "Uuid"
                ],
                "type": "object",
                "properties": {
                  "Password": {
                    "type": "string",
                    "description": "Password of the user."
                  },
                  "AllowPasswordExpiration": {
                    "type": "boolean",
                    "description": "If true, an expired password will be considered valid. Otherwise, an expired password is considered an error."
                  },
                  "Uuid": {
                    "type": "string",
                    "description": "UUID/GUID of the user."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerAgentVerifyPasswordV2"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerManage/AddAccount": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Add an account for a resource",
        "description": "The CaseSensitiveCheck parameter is not applicable to Domain and Windows resource accounts.\n            Either \"Host\" or \"DomainID\" or \"DatabaseID\" need to be provided.\n            Either \"Password\" or \"SshKeyId\" need to be provided.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "DatabaseID",
                  "DomainID",
                  "Host",
                  "Password",
                  "SshKeyId",
                  "User"
                ],
                "type": "object",
                "properties": {
                  "IsManaged": {
                    "type": "boolean",
                    "description": "True to create managed account",
                    "default": false
                  },
                  "Password": {
                    "type": "string",
                    "description": "Password for the user"
                  },
                  "SshKeyId": {
                    "type": "string",
                    "description": "Ssh Id for authentication"
                  },
                  "Host": {
                    "type": "string",
                    "description": "ID of the resource"
                  },
                  "DomainID": {
                    "type": "string",
                    "description": "ID of the domain"
                  },
                  "CaseSensitiveCheck": {
                    "type": "boolean",
                    "description": "True to allow adding new accounts even if accounts with similar names (only differ by letter cases) already exist. Default is false."
                  },
                  "UseWheel": {
                    "type": "boolean",
                    "description": "True to use proxy account",
                    "default": false
                  },
                  "DatabaseID": {
                    "type": "string",
                    "description": "ID of the database"
                  },
                  "User": {
                    "type": "string",
                    "description": "User name for the account"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description for the account"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerManageAddAccount"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerManage/CheckoutPassword": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Checks out an account password",
        "description": "You must be a system administrator or have 'Checkout' permission on the account or have global 'Checkout' permission on accounts.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID"
                ],
                "type": "object",
                "properties": {
                  "Lifetime": {
                    "type": "integer",
                    "description": "Duration of the checkout"
                  },
                  "ID": {
                    "type": "string",
                    "description": "ID for the account"
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description for the checkout"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerManageCheckoutPassword"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerManage/DeleteAccount": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Delete an account",
        "description": "You must be a system administrator or have 'Delete' permission on the account or have global 'Delete' permission on accounts.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "string",
                    "description": "Id of the account to be deleted"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerManageDeleteAccount"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerManage/GetAccountPermissions": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets list of permissions associated with an account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "string",
                    "description": "ID of the account, set to null to get global account permissions"
                  },
                  "RRFormat": {
                    "type": "boolean",
                    "description": "Return data in database format.",
                    "default": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerManageGetAccountPermissions"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerManage/GetAdministrativeAccountCandidates": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Get administrator information",
        "description": "You must be a system administrator.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Ascending": {
                    "type": "string",
                    "description": "Sort in ascending order, default true"
                  },
                  "Filter": {
                    "type": "string",
                    "description": "All or part of username"
                  },
                  "SortBy": {
                    "type": "string",
                    "description": "Field to sort by, default Name"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerManageGetAdministrativeAccountCandidates"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerManage/GetAdministrativeAccounts": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Get administrator information for a domain",
        "description": "You must be a system administrator.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Domains"
                ],
                "type": "object",
                "properties": {
                  "Domains": {
                    "type": "array",
                    "description": "List of domains to get information on",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerManageGetAdministrativeAccounts"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerManage/GetAllADTopologyWithAdministrativeAccounts": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Get AD topology and administrator information",
        "description": "You must be a system administrator.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerManageGetAllADTopologyWithAdministrativeAccounts"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/ServerManage/GetDomainAccountStatus": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Get the account status for an administrator",
        "description": "You must be a system administrator.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "UserUuid": {
                    "type": "string",
                    "description": "UUID or user. This or User must be supplied"
                  },
                  "User": {
                    "type": "string",
                    "description": "Username of user. This or UserUuid must be supplied"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerManageGetDomainAccountStatus"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerManage/GetRetiredPassword": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get a retired password of an account",
        "description": "You must be a system administrator to get a retired password.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "string",
                    "description": "ID for the retired password"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerManageGetRetiredPassword"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerManage/SetAccountPermissions": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Grants permissions on accounts",
        "description": "You must be a system administrator or have 'Grant' permission on the account or have global 'Grant' permission on accounts.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Grants"
                ],
                "type": "object",
                "properties": {
                  "Grants": {
                    "type": "object",
                    "properties": {
                      "Rights": {
                        "type": "string",
                        "description": "Permissions: Owner, Naked, Login, Manage, Delete, UpdatePassword, UserPortalLogin, RotatePassword"
                      },
                      "Principal": {
                        "type": "string",
                        "description": "User name or role name"
                      },
                      "PrincipalId": {
                        "type": "string",
                        "description": "Uuid of the principal"
                      },
                      "PType": {
                        "type": "string",
                        "description": "Principal type: User, Role etc.. "
                      }
                    },
                    "description": "Array of permissions to be set. Each item must include  Principal: User name or role name, PType: User, Role..,  Rights: Owner, Naked, Login, Manage, Delete, UpdatePassword, UserPortalLogin, RotatePassword"
                  },
                  "PVID": {
                    "type": "string",
                    "description": "ID of an account or set to null to set  global account permissions"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerManageSetAccountPermissions"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerManage/SetAdministrativeAccounts": {
      "post": {
        "tags": [
          "Additional APIs",
          "Directory Service Management"
        ],
        "summary": "Create or remove administrator accounts",
        "description": "You must be a system administrator.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Domains"
                ],
                "type": "object",
                "properties": {
                  "Password": {
                    "type": "string",
                    "description": "Password of user to update or create."
                  },
                  "UserUuid": {
                    "type": "string",
                    "description": "UUID or user. This or User must be supplied"
                  },
                  "User": {
                    "type": "string",
                    "description": "Username of user. This or UserUuid must be supplied"
                  },
                  "Domains": {
                    "type": "array",
                    "description": "List of domains the administrator is or should be a part of",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerManageSetAdministrativeAccounts"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerManage/SetDomainPermissions": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Grant permissions on domains",
        "description": "You must be a system administrator or have 'Grant' permission on the domain.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Grants",
                  "ID"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "string",
                    "description": "ID of the domain"
                  },
                  "Grants": {
                    "type": "object",
                    "properties": {
                      "Rights": {
                        "type": "string",
                        "description": "Permissions: Edit, Delete, Grant"
                      },
                      "Principal": {
                        "type": "string",
                        "description": "User name or role name"
                      },
                      "PrincipalId": {
                        "type": "string",
                        "description": "Uuid of the principal"
                      },
                      "PType": {
                        "type": "string",
                        "description": "Principal type: User, Role etc.. "
                      }
                    },
                    "description": "Array of permissions to be set. Each item must include  Principal: User name or role name, PType: User, Role..,  Rights: Edit, Delete, Grant"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerManageSetDomainPermissions"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/ServerManage/UpdateAccount": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Update an account",
        "description": "Either \"Host\" or \"DomainID\" or \"DatabaseID\" should be provided.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "WorkflowSent": {
                    "type": "boolean",
                    "description": "Informs whether or not this is a workflow change."
                  },
                  "WorkflowApprover": {
                    "type": "object",
                    "properties": {
                      "DirectoryServiceUuid": {
                        "type": "string",
                        "description": "Directory service Uuid"
                      },
                      "ObjectType": {
                        "type": "string",
                        "description": "Approver object type ex: \"User\""
                      },
                      "Name": {
                        "type": "string",
                        "description": "Account Name"
                      },
                      "SystemName": {
                        "type": "string",
                        "description": "Name of account on system"
                      },
                      "ServiceInstanceLocalized": {
                        "type": "string",
                        "description": "Explicitly written Service Instance."
                      },
                      "Enabled": {
                        "type": "boolean",
                        "description": "Is account enabled"
                      },
                      "StatusEnum": {
                        "type": "string",
                        "description": "Same as \"Status\""
                      },
                      "Status": {
                        "type": "string",
                        "description": "Account status. Ex: \"Active\""
                      },
                      "DistinguishedName": {
                        "type": "string",
                        "description": "Full login name of Approver."
                      },
                      "ServiceInstance": {
                        "type": "string",
                        "description": "Same as ServiceType"
                      },
                      "Type": {
                        "type": "string",
                        "description": "Account type. ex: \"User\""
                      },
                      "DisplayName": {
                        "type": "string",
                        "description": "User display name"
                      },
                      "InternalName": {
                        "type": "string",
                        "description": "Internal UUID of account"
                      },
                      "Guid": {
                        "type": "string",
                        "description": "Internal UUID of account. Same as InternalName"
                      },
                      "PType": {
                        "type": "string",
                        "description": "Account type. ex: \"User\""
                      },
                      "EMail": {
                        "type": "string",
                        "description": "Account email"
                      },
                      "Principal": {
                        "type": "string",
                        "description": "Account Name"
                      },
                      "BackupApprover": {
                        "type": "object",
                        "properties": {},
                        "description": "Backup Approver object. Same schema as WorkflowApprover."
                      },
                      "Locked": {
                        "type": "boolean",
                        "description": "Is the user locked."
                      },
                      "ServiceType": {
                        "type": "string",
                        "description": "Directory service type"
                      }
                    },
                    "description": "For when there is just one workflow approver."
                  },
                  "Description": {
                    "type": "string",
                    "description": "Description for the account"
                  },
                  "WorkflowApprovers": {
                    "type": "array",
                    "description": "An array of WorkflowApprover objects. Refer to WorkflowApprover. Not necessary when removing workflow.",
                    "items": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "IsManaged": {
                    "type": "boolean",
                    "description": "True to create a managed account"
                  },
                  "DatabaseID": {
                    "type": "string",
                    "description": "ID of the database"
                  },
                  "UseWheel": {
                    "type": "boolean",
                    "description": "True to use proxy account"
                  },
                  "DomainID": {
                    "type": "string",
                    "description": "ID of the domain"
                  },
                  "Host": {
                    "type": "string",
                    "description": "ID of the resource"
                  },
                  "WorkflowEnabled": {
                    "type": "boolean",
                    "description": "Determines whether you are removing or adding/updating a workflow"
                  },
                  "User": {
                    "type": "string",
                    "description": "User name for the account"
                  },
                  "BackupApprover": {
                    "type": "object",
                    "properties": {},
                    "description": "Determines approver if user has no manager. Refer to WorkflowApprover. Use WorkflowApprover object. Only required when NoManagerAction=useBackup"
                  },
                  "ID": {
                    "type": "string",
                    "description": "ID of the account to be updated"
                  },
                  "WorkflowApproversList": {
                    "type": "array",
                    "description": "Identical to WorkflowApprovers. Refer to WorkflowApprover. Stored in database, but not used in code.",
                    "items": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "WorkflowDefaultOptions": {
                    "type": "string",
                    "description": "Stringified JSON object detailing default options. Example: {\"GrantMin\":60}"
                  },
                  "NoManagerAction": {
                    "type": "string",
                    "description": "Determines what to do when account/system does not have manager. Not required. \"useBackup\", \"approve\" or \"deny\""
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerManageUpdateAccount"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Signup/GetVerificationState": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get verification status",
        "description": "Use verificationid as input and this will return verifcation status of signup verification.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "VerificationId"
                ],
                "type": "object",
                "properties": {
                  "VerificationId": {
                    "type": "string",
                    "description": "verificationid for signup verification"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SignupGetVerificationState"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Signup/SendVerificationEmail": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Send an verification email",
        "description": "Based on userid input it will fetch the email address and send confirmation email to respective user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "UserId"
                ],
                "type": "object",
                "properties": {
                  "UserId": {
                    "type": "string",
                    "description": "uuid of the user"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SignupSendVerificationEmail"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Signup/VerifyLink": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Mandatory link Verification support: Verifies magic link sent in email",
        "description": "Invoked by 3rd party services for answering magic link.\n            Supports the click on link scenario.",
        "parameters": [
          {
            "name": "codeId",
            "in": "query",
            "description": "unique value generated during mandatory verification",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "answer",
            "in": "query",
            "description": "The answer to verify against.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SignupVerifyLink"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/SocialAuth/FacebookAuthCallback": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "For social authentication, this is the Facebook call back.",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Not used.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Not used.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SocialAuthFacebookAuthCallback"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/SocialAuth/GoogleAuthCallback": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "For social authentication, this is the Google call back.",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Not used.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Not used.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SocialAuthGoogleAuthCallback"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/SocialAuth/LinkedInAuthCallback": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "For social authentication, this is the LinkedIn call back.",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Not used.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Not used.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SocialAuthLinkedInAuthCallback"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/SocialAuth/MicrosoftActAuthCallback": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "For social authentication, this is the Microsoft call back.",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "Not used.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Not used.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SocialAuthMicrosoftActAuthCallback"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/SocialAuth/TwitterAuthCallback": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "For social authentication, this is the Twitter call back.",
        "parameters": [
          {
            "name": "oauth_token",
            "in": "query",
            "description": "Not used.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "oauth_verifier",
            "in": "query",
            "description": "Not used.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Not used.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SocialAuthTwitterAuthCallback"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/SocialAuthMgmt/GetAllCustomConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the social configurations for all identity providers.",
        "description": "Requires administrator rights.\n            Requesting secret as plain text requires directory services administrator rights.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "GetSecretAsPlainText": {
                    "type": "boolean",
                    "description": "Get the secret as plain text.",
                    "default": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SocialAuthMgmtGetAllCustomConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/SocialAuthMgmt/GetApplicationClientSecret": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get the application client secret.",
        "description": "Requires directory service administrator rights.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ApplicationClientId",
                  "IdpName"
                ],
                "type": "object",
                "properties": {
                  "ApplicationClientId": {
                    "type": "boolean",
                    "description": "The application client id."
                  },
                  "IdpName": {
                    "type": "string",
                    "description": "The identity provider name (Facebook, Google, Twitter, LinkedIn, Microsoft)."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SocialAuthMgmtGetApplicationClientSecret"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/SocialAuthMgmt/GetAuthConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the social user authentication configuration.",
        "description": "Requires administrator rights.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SocialAuthMgmtGetAuthConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/SocialAuthMgmt/GetCustomConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the social configuration for the requested identity provider.",
        "description": "Requires administrator rights.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "IdpName"
                ],
                "type": "object",
                "properties": {
                  "GetSecretAsPlainText": {
                    "type": "boolean",
                    "description": "Get the secret as plain text.",
                    "default": false
                  },
                  "IdpName": {
                    "type": "string",
                    "description": "The identity provider name (Facebook, Google, Twitter, LinkedIn, Microsoft)."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SocialAuthMgmtGetCustomConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/SocialAuthMgmt/ResetAuthConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Resets the social user authentication configuration.",
        "description": "Requires directory service administrator rights.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SocialAuthMgmtResetAuthConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/SocialAuthMgmt/SetAuthConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Sets the social user authentication configuration.",
        "description": "Requires directory service administrator rights.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "EnableFacebookLogin",
                  "EnableGoogleLogin",
                  "EnableLinkedInLogin",
                  "EnableMicrosoftLogin",
                  "EnableTwitterLogin",
                  "Version"
                ],
                "type": "object",
                "properties": {
                  "EnableMicrosoftLogin": {
                    "type": "boolean",
                    "description": "Is Microsoft login enabled."
                  },
                  "Version": {
                    "type": "string",
                    "description": "The configuration version."
                  },
                  "EnableTwitterLogin": {
                    "type": "boolean",
                    "description": "Is Twitter login enabled."
                  },
                  "EnableGoogleLogin": {
                    "type": "boolean",
                    "description": "Is Google login enabled."
                  },
                  "EnableLinkedInLogin": {
                    "type": "boolean",
                    "description": "Is LinkedIn login enabled."
                  },
                  "EnableFacebookLogin": {
                    "type": "boolean",
                    "description": "Is Facebook login enabled."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SocialAuthMgmtSetAuthConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/SocialAuthMgmt/SetCustomConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Set custom configuration.",
        "description": "Requires directory service administrator rights.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "CustomConfigEnabled",
                  "IdpName",
                  "TrustedRedirectUris"
                ],
                "type": "object",
                "properties": {
                  "TrustedRedirectUris": {
                    "type": "array",
                    "description": "A list of trusted Uris for this client.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "ApplicationClientSecret": {
                    "type": "object",
                    "properties": {},
                    "description": "The application client secret."
                  },
                  "IdpName": {
                    "type": "string",
                    "description": "The identity provider name (Facebook, Google, Twitter, LinkedIn, Microsoft)."
                  },
                  "CustomConfigEnabled": {
                    "type": "boolean",
                    "description": "Enable custom configuration."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SocialAuthMgmtSetCustomConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/StaticVfs/GetFile": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Retrieves the file from the virtual file system.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "The file to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/StaticVfsGetFile"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/SysInfo/About": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Describe the system.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SysInfoAbout"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/SysInfo/Dummy": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Dummy",
        "description": "Use for a ping test to verify connectors.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SysInfoDummy"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/SysInfo/GetMySession": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Retrieve a session id.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SysInfoGetMySession"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/SysInfo/Version": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get the system version.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SysInfoVersion"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/Task/CancelJob": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Request the cancellation of a job.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "jobId",
                  "reason"
                ],
                "type": "object",
                "properties": {
                  "jobId": {
                    "type": "string",
                    "description": "The job id to cancel."
                  },
                  "reason": {
                    "type": "string",
                    "description": "The reason for cancelling the job."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCancelJob"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Task/CreateOneTimeJob": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Create a one time job.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Description",
                  "Name",
                  "ScheduledTimeTicks",
                  "ScriptArgs",
                  "ScriptPath",
                  "TimeoutSeconds"
                ],
                "type": "object",
                "properties": {
                  "ScriptArgs": {
                    "type": "object",
                    "properties": {},
                    "description": "The arguments for the script."
                  },
                  "TimeoutSeconds": {
                    "type": "integer",
                    "description": "How many seconds to give the job as a timeout."
                  },
                  "ScriptPath": {
                    "type": "string",
                    "description": "The path to the script to run for the job."
                  },
                  "ScheduledTimeTicks": {
                    "type": "integer",
                    "description": "How long from now to schedule the job."
                  },
                  "Description": {
                    "type": "string",
                    "description": "The job description."
                  },
                  "Name": {
                    "type": "string",
                    "description": "The job name."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCreateOneTimeJob"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Task/EmailReport": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Emails the report from scriptPath to the emailTo address.",
        "description": "ScriptPath must have a .report extension.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "emailTo",
                  "format",
                  "parameters",
                  "scriptPath"
                ],
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string",
                    "description": "The report format (html, csv, excel)."
                  },
                  "parameters": {
                    "type": "object",
                    "properties": {},
                    "description": "The arguments for the script."
                  },
                  "emailTo": {
                    "type": "string",
                    "description": "Where to send the report."
                  },
                  "scriptPath": {
                    "type": "string",
                    "description": "The report source."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TaskEmailReport"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Task/GetJobHistory": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Returns streaming job history data via a redrock style interface.",
        "description": "Expects RedRock style json arguments.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Args"
                ],
                "type": "object",
                "properties": {
                  "Args": {
                    "type": "object",
                    "properties": {
                      "FilterValue": {
                        "type": "string",
                        "description": "Look for job names that start with this value."
                      },
                      "PageNumber": {
                        "type": "integer",
                        "description": "Used for calculating Count/FullCount return values."
                      },
                      "Token": {
                        "type": "string",
                        "description": "The user token.",
                        "default": null
                      },
                      "FilterQuery": {
                        "type": "object",
                        "properties": {
                          "JobHidden": {
                            "type": "boolean",
                            "description": "Look at hidden jobs."
                          }
                        },
                        "description": "If present allows display of hidden jobs."
                      },
                      "PageSize": {
                        "type": "integer",
                        "description": "How big a should the page be."
                      }
                    },
                    "description": "RedRock style json arguments."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TaskGetJobHistory"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Task/GetSingleJobHistory": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the history of a single job.",
        "parameters": [
          {
            "name": "jobId",
            "in": "query",
            "description": "The job id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TaskGetSingleJobHistory"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Task/JobReport": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Retrieve simple job metrics from the persistent job system.",
        "parameters": [
          {
            "name": "hoursBack",
            "in": "query",
            "description": "How many hours before now to start the report",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TaskJobReport"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantCnames/Get": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "List the cnames assigned for the tenant.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantCnamesGet"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantCnames/GetDomainInfo": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the domain of tenant urls",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantCnamesGetDomainInfo"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantCnames/Register": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Creates a cname with prefix specified for the tenant.",
        "description": "If the cname is the only user created, it is set as preferred cname.",
        "parameters": [
          {
            "name": "cnamePrefix",
            "in": "query",
            "description": "Prefix of cname to create",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantCnamesRegister"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantCnames/SetPreferred": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Sets the tenant cname to preferred as cname",
        "parameters": [
          {
            "name": "customCname",
            "in": "query",
            "description": "preferred cname",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantCnamesSetPreferred"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantCnames/UiGet": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the tenant cnames.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantCnamesUiGet"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantCnames/UnRegister": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deletes the cname for the tenant",
        "parameters": [
          {
            "name": "customCname",
            "in": "query",
            "description": "Cname to remove",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantCnamesUnRegister"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantConfig/DeleteAdminSecurityQuestion": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Delete admin security question.",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "Uuid of the question to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Id"
                ],
                "type": "object",
                "properties": {
                  "Id": {
                    "type": "string",
                    "description": "Uuid of the question to delete"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigDeleteAdminSecurityQuestion"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/TenantConfig/DeleteAdvancedConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deletes a single key record from the config table.",
        "description": "Reserved for on premises environments.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "key",
                  "tenantId"
                ],
                "type": "object",
                "properties": {
                  "tenantId": {
                    "type": "string",
                    "description": "The tenant id."
                  },
                  "key": {
                    "type": "string",
                    "description": "The key to delete."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigDeleteAdvancedConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/TenantConfig/GetAdminSecurityQuestion": {
      "post": {
        "tags": [
          "Multi-Factor Registration"
        ],
        "summary": "Get a specific admin security question.",
        "description": "<p><ul><li>You can get the details of a particular admin-defined question by invoking the endpoint.</li>\n            <li>Refer guides section https://identity-developer.cyberark.com/docs/multiple-secret-question-enrollment </li></ul></p>",
        "parameters": [
          {
            "name": "Id",
            "in": "query",
            "description": "The unique ID of the security question created by the admin. We get this ID when the security question is created.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigGetAdminSecurityQuestion"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantConfig/GetAdminSecurityQuestions": {
      "post": {
        "tags": [
          "Multi-Factor Registration"
        ],
        "summary": "Get a specific admin security question.",
        "description": "<p><ul><li>Once you've added all of the questions, you can then get the list of admin-defined questions available for the tenant by invoking the endpoint.</li>\n            <li>Refer guides section https://identity-developer.cyberark.com/docs/multiple-secret-question-enrollment </li></ul></p>",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigGetAdminSecurityQuestions"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantConfig/GetAdvancedConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Returns tenant's configuration values.",
        "description": "Retrieves the full configuration list for Opie... the combined set of \"global\" config table rows \n            and \"blessed tenant\" rows from config table, so that they can be presented in a UI.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigGetAdvancedConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantConfig/GetCustomerConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get tenant configuration.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigGetCustomerConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantConfig/GetEditableMailTemplates": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deprecated -- Get editable mail templates.",
        "description": "Please use the generic GetEditableMessageTemplates instead.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigGetEditableMailTemplates"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false
      }
    },
    "/TenantConfig/GetEditableMessageTemplate": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get editable message template.",
        "parameters": [
          {
            "name": "templateName",
            "in": "query",
            "description": "The message template name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateType",
            "in": "query",
            "description": "The message template type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigGetEditableMessageTemplate"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantConfig/GetEditableMessageTemplates": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get editable message templates.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigGetEditableMessageTemplates"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantConfig/GetGoogleKey": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the google key for the tenant.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigGetGoogleKey"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantConfig/GetMobileConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets the tenant mobile configuration data.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigGetMobileConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantConfig/GetSMTPConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get the tenant Simple Mail Transport Protocol configuration.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigGetSMTPConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantConfig/GetTelephonyCreditsNotificationConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get the tenant Telephony Credits Notification configuration.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigGetTelephonyCreditsNotificationConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantConfig/GetTwilioConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get the tenant Twilio configuration.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigGetTwilioConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantConfig/ResetPortalConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Reset portal configuration.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigResetPortalConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantConfig/SendTestMessageTemplate": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Send a test message template.",
        "parameters": [
          {
            "name": "templatePath",
            "in": "query",
            "description": "The message template path.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateType",
            "in": "query",
            "description": "The message template type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigSendTestMessageTemplate"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantConfig/SetAdminSecurityQuestion": {
      "post": {
        "tags": [
          "Multi-Factor Registration"
        ],
        "summary": "Add admin security question",
        "description": "<p><lu><li>Invoke this API if you want to setup a security question which would be prompted to the end-user while logging in to CyberArk Identity.</li>\n            <li>Only system administrator, users with user management rights, or the user itself can invoke this API.</li>\n            <li>Refer guides section https://identity-developer.cyberark.com/docs/multiple-secret-question-enrollment </li></ul></p>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Question"
                ],
                "type": "object",
                "properties": {
                  "Culture": {
                    "type": "string",
                    "description": "Culture of the question to add.",
                    "default": "all"
                  },
                  "Question": {
                    "type": "string",
                    "description": "The security question to be added. Ex: What is your birthplace?"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigSetAdminSecurityQuestion"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/TenantConfig/SetAdvancedConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Set the tenant configuration.",
        "description": "Reserved for on premises environments.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "key",
                  "tenantId",
                  "value"
                ],
                "type": "object",
                "properties": {
                  "tenantId": {
                    "type": "string",
                    "description": "The tenant id."
                  },
                  "value": {
                    "type": "string",
                    "description": "The configuration setting."
                  },
                  "key": {
                    "type": "string",
                    "description": "The configuration key."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigSetAdvancedConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/TenantConfig/SetCustomerConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Set a tenant configuration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "OtpCodeLength": {
                    "type": "integer",
                    "description": "Defines the Otp code length for this tenant."
                  },
                  "TenantUrlDeprecationEnabled": {
                    "type": "boolean",
                    "description": "Determines whether or not legacy centrify urls can be used to access the tenant. "
                  },
                  "Icon": {
                    "type": "string",
                    "description": "The tenant icon."
                  },
                  "EnableUmc": {
                    "type": "boolean",
                    "description": "Enable Umc for this tenant."
                  },
                  "SendPasswordChangeConfirmation": {
                    "type": "boolean",
                    "description": "Enable sending password change confirmation for this tenant."
                  },
                  "LoginBannerMessage": {
                    "type": "string",
                    "description": "The login banner message for this tenant."
                  },
                  "StoreCorporateAppUserCredsInVault": {
                    "type": "boolean",
                    "description": "Store corporate app user credentials in the password vault."
                  },
                  "LoginSampleText": {
                    "type": "string",
                    "description": "The tenant login sample text."
                  },
                  "PortalImage": {
                    "type": "string",
                    "description": "The tenant portal image."
                  },
                  "LoginBannerMessageL10nEnabled": {
                    "type": "boolean",
                    "description": "The localized version of the tenant login banner message."
                  },
                  "CompanySupportLink": {
                    "type": "string",
                    "description": "The tenant company support link."
                  },
                  "ThemeColor": {
                    "type": "string",
                    "description": "The tenant theme color."
                  },
                  "GlobalImage": {
                    "type": "string",
                    "description": "The tenant global image."
                  },
                  "ZsoCertLifeTime": {
                    "type": "integer",
                    "description": "Defines the number of days for which the ZSO certificate will be valid"
                  },
                  "MfaAttributeMapping": {
                    "type": "array",
                    "description": "The tenant mfa attibute mappings.",
                    "items": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "LoginBackgroundImage": {
                    "type": "string",
                    "description": "The tenant login background image."
                  },
                  "StorePersonalAppUserCredsInVault": {
                    "type": "boolean",
                    "description": "Store personal app user credentials in the password vault."
                  },
                  "CompanyName": {
                    "type": "string",
                    "description": "The tenant company name."
                  },
                  "IsOriginValidationEnabled": {
                    "type": "boolean",
                    "description": "Enable origin validation for this tenant."
                  },
                  "reCaptchaThreshold": {
                    "type": "integer",
                    "description": "The number of failed login attempts before showing ReCAPTCHA."
                  },
                  "WelcomeMessage": {
                    "type": "string",
                    "description": "The tenant welcome message."
                  },
                  "ZsoCertRenewalWindow": {
                    "type": "integer",
                    "description": "Defines the number of days before expiry date the certificate gets renewed"
                  },
                  "EmailImage": {
                    "type": "string",
                    "description": "The tenant email image."
                  },
                  "LoginImage": {
                    "type": "string",
                    "description": "The tenant login image."
                  },
                  "IsOriginValidationOnGetEnabled": {
                    "type": "boolean",
                    "description": "Enable origin validation on get requests for this tenant."
                  },
                  "ForgotUsernameAllowed": {
                    "type": "boolean",
                    "description": "Enable forgotten user name for this tenant."
                  },
                  "NavigationColor": {
                    "type": "string",
                    "description": "The tenant navigation color."
                  },
                  "IsPasswordPersistanceEnabled": {
                    "type": "boolean",
                    "description": "Enable password persistance for this tenant."
                  },
                  "FastSearchEnabledEntities": {
                    "type": "array",
                    "description": "Enable fast search entities.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "PrivacyPolicyLink": {
                    "type": "string",
                    "description": "The tenant privacy policy link."
                  },
                  "AllowCors": {
                    "type": "array",
                    "description": "",
                    "items": {
                      "type": "string"
                    }
                  },
                  "BackgroundColor": {
                    "type": "string",
                    "description": "The tenant background color."
                  },
                  "EnableQRCode": {
                    "type": "boolean",
                    "description": "Enable QR code for authentication."
                  },
                  "CustomerCompany": {
                    "type": "string",
                    "description": "The tenant company."
                  },
                  "DisplayLoginBanner": {
                    "type": "boolean",
                    "description": "Display the login banner for this tenant."
                  },
                  "TermsOfUseLink": {
                    "type": "string",
                    "description": "The tenant terms of use link."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigSetCustomerConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/TenantConfig/SetGoogleKey": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Sets the google key for the tenant.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "CustomReCaptchaSecretKey",
                  "CustomReCaptchaSiteKey",
                  "GoogleKeyEnabled",
                  "IsCustomCaptchaSettingsEnabled",
                  "googleKey"
                ],
                "type": "object",
                "properties": {
                  "googleKey": {
                    "type": "string",
                    "description": "The google key."
                  },
                  "CustomReCaptchaSiteKey": {
                    "type": "string",
                    "description": "The site key is used to invoke the reCAPTCHA service on your site."
                  },
                  "GoogleKeyEnabled": {
                    "type": "boolean",
                    "description": "Is the google key enabled for this tenant."
                  },
                  "CustomReCaptchaSecretKey": {
                    "type": "string",
                    "description": "The secret key authorizes communication between your application backend and the reCAPTCHA server to verify the user's response."
                  },
                  "IsCustomCaptchaSettingsEnabled": {
                    "type": "boolean",
                    "description": "Enabling this option to use custom reCAPTCHA settings for your tenant."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigSetGoogleKey"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/TenantConfig/SetMobileConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Sets the tenant mobile configuration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "CompanyName": {
                    "type": "string",
                    "description": "The company name for this tenant."
                  },
                  "WelcomeMessage": {
                    "type": "string",
                    "description": "The tenant welcome message."
                  },
                  "EndpointEnrollWelcomeTextL10nEnabled": {
                    "type": "boolean",
                    "description": "Is endpoint enrollment welcome text localization enabled."
                  },
                  "CompanyImageBackgroundColor": {
                    "type": "string",
                    "description": "The company image background color."
                  },
                  "CompanyImage": {
                    "type": "string",
                    "description": "The company image content type and the image encoded as base64."
                  },
                  "LocalizationMappings": {
                    "type": "array",
                    "description": "A list of localization mappings.",
                    "items": {
                      "type": "object",
                      "properties": {}
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigSetMobileConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/TenantConfig/SetPasswordPersistance": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Set password persistance. i.e. do we save your password.",
        "description": "Reserved for on premises environments.",
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "description": "Allow or not the use of active directory credentials for tenant applications.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigSetPasswordPersistance"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/TenantConfig/SetSMTPConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Set the tenant Simple Mail Transport Protocol configuration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Host",
                  "Pass",
                  "Port",
                  "SSL",
                  "SmtpConfigEnabled",
                  "UseConnectors",
                  "User"
                ],
                "type": "object",
                "properties": {
                  "Connectors": {
                    "type": "array",
                    "description": "The connectors for SMTP to use.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Port": {
                    "type": "boolean",
                    "description": "The SMTP port."
                  },
                  "Host": {
                    "type": "boolean",
                    "description": "The SMTP host."
                  },
                  "SSL": {
                    "type": "boolean",
                    "description": "Enabled SSL SMTP."
                  },
                  "Pass": {
                    "type": "boolean",
                    "description": "The SMTP password."
                  },
                  "User": {
                    "type": "boolean",
                    "description": "The SMTP user."
                  },
                  "SmtpConfigEnabled": {
                    "type": "boolean",
                    "description": "Is SMTP enabled."
                  },
                  "UseConnectors": {
                    "type": "boolean",
                    "description": "Does SMTP use connectors."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigSetSMTPConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/TenantConfig/SetTelephonyCreditsNotificationConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Set the tenant Telephony Credits Notification configuration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Emails",
                  "Threshold"
                ],
                "type": "object",
                "properties": {
                  "Threshold": {
                    "type": "integer",
                    "description": "Threshold"
                  },
                  "Emails": {
                    "type": "string",
                    "description": "Email"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigSetTelephonyCreditsNotificationConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/TenantConfig/SetTwilioConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Set the tenant Twilio configuration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "FromNumber",
                  "Sid",
                  "SmsConfigEnabled",
                  "Token"
                ],
                "type": "object",
                "properties": {
                  "Sid": {
                    "type": "string",
                    "description": "The unique identifier for the message."
                  },
                  "Token": {
                    "type": "string",
                    "description": "The Twilio authentication token."
                  },
                  "FromNumber": {
                    "type": "string",
                    "description": "The from number for Twilio messages."
                  },
                  "SmsConfigEnabled": {
                    "type": "string",
                    "description": "Is Twilio configured."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigSetTwilioConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/TenantConfig/TestSMTPConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Test the tenant Simple Mail Transport Protocol configuration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Host",
                  "Pass",
                  "Port",
                  "SSL",
                  "SmtpConfigEnabled",
                  "UseConnectors",
                  "User"
                ],
                "type": "object",
                "properties": {
                  "Connectors": {
                    "type": "array",
                    "description": "The connectors for SMTP to use.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Port": {
                    "type": "boolean",
                    "description": "The SMTP port."
                  },
                  "Host": {
                    "type": "boolean",
                    "description": "The SMTP host."
                  },
                  "SSL": {
                    "type": "boolean",
                    "description": "Enabled SSL SMTP."
                  },
                  "Pass": {
                    "type": "boolean",
                    "description": "The SMTP password."
                  },
                  "User": {
                    "type": "boolean",
                    "description": "The SMTP user."
                  },
                  "SmtpConfigEnabled": {
                    "type": "boolean",
                    "description": "Is SMTP enabled."
                  },
                  "UseConnectors": {
                    "type": "boolean",
                    "description": "Does SMTP use connectors."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigTestSMTPConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/TenantConfig/TestTwilioConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Test the tenant Twilio configuration.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "FromNumber",
                  "Sid",
                  "SmsConfigEnabled",
                  "Token"
                ],
                "type": "object",
                "properties": {
                  "Sid": {
                    "type": "string",
                    "description": "The unique identifier for the message."
                  },
                  "Token": {
                    "type": "string",
                    "description": "The Twilio authentication token."
                  },
                  "FromNumber": {
                    "type": "string",
                    "description": "The from number for Twilio messages."
                  },
                  "SmsConfigEnabled": {
                    "type": "string",
                    "description": "Is Twilio configured."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TenantConfigTestTwilioConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/U/Evaluate": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Evaluate a shortened URL key, redirecting to its long URL if valid.",
        "description": "This won't generally be invoked as \"https://xxxxxxx/u/evaluate/12345\".  \n            Instead, it will be invoked as \"https://podname.shortdomain/u/12345\".  \n            The RewriteRules governing this are in Global.asax.cs.",
        "parameters": [
          {
            "name": "shortUrlKey",
            "in": "query",
            "description": "The short url key to evaluate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UEvaluate"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/U2f/AnswerRegistrationChallenge": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Answer the registration challenge.",
        "parameters": [
          {
            "name": "rawRegisterResponse",
            "in": "query",
            "description": "The raw registation response.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Challenge",
                  "ClientData",
                  "RegistrationData"
                ],
                "type": "object",
                "properties": {
                  "ClientData": {
                    "type": "string",
                    "description": "The client data."
                  },
                  "RegistrationData": {
                    "type": "string",
                    "description": "The registration data."
                  },
                  "Challenge": {
                    "type": "string",
                    "description": "The registration challenge."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/U2fAnswerRegistrationChallenge"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/U2f/DeleteU2fDevice": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Deletes the U2f device.",
        "parameters": [
          {
            "name": "keyHandle",
            "in": "query",
            "description": "The device key to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/U2fDeleteU2fDevice"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/U2f/DeleteU2fDevices": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Delete a list of U2f devices.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "KeyHandles"
                ],
                "type": "object",
                "properties": {
                  "KeyHandles": {
                    "type": "array",
                    "description": "A list of handles to U2f devices.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/U2fDeleteU2fDevices"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/U2f/Facets": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get the trusted facet list for the tenant.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/U2fFacets"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/U2f/GetRegistrationChallenge": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get registration challenge.",
        "parameters": [
          {
            "name": "userDefinedName",
            "in": "query",
            "description": "The user defined name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "authenticatortype",
            "in": "query",
            "description": "The type of authenticator",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/U2fGetRegistrationChallenge"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/U2f/GetU2fDevices": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets a list of U2f devices.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/U2fGetU2fDevices"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/U2f/GetU2fDevicesForUser": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Gets a list of U2f devices for the current user.",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "The authenticator type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/U2fGetU2fDevicesForUser"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UPRest/CreateTagWithNoApp": {
      "post": {
        "tags": [
          "Application Management"
        ],
        "summary": "Create a tag with no apps for the current user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "tagname"
                ],
                "type": "object",
                "properties": {
                  "tagname": {
                    "type": "string",
                    "description": "tag name"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UPRestCreateTagWithNoApp"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UPRest/DeleteTag": {
      "post": {
        "tags": [
          "Application Management"
        ],
        "summary": "Delete a tag",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "tagname"
                ],
                "type": "object",
                "properties": {
                  "tagname": {
                    "type": "string",
                    "description": "tag name"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UPRestDeleteTag"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UPRest/GetAppByKey": {
      "post": {
        "tags": [
          "Additional APIs",
          "Application Management"
        ],
        "summary": "Get an application's data.",
        "parameters": [
          {
            "name": "appkey",
            "in": "query",
            "description": "Application key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "markAppVisited": {
                    "type": "string",
                    "description": "Should the application be mark as visited.",
                    "default": "false"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UPRestGetAppByKey"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UPRest/GetResultantAppsForUser": {
      "post": {
        "tags": [
          "Application Management"
        ],
        "summary": "Return a user's portal applications and how the user has access to each application.",
        "description": "Your must have user management rights to invoke this API.  This call caches the list of applications and roles.  Personal apps are not included in the result.",
        "parameters": [
          {
            "name": "userUuid",
            "in": "query",
            "description": "Target user uuid.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UPRestGetResultantAppsForUser"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UPRest/GetTagsForApp": {
      "post": {
        "tags": [
          "Application Management"
        ],
        "summary": "Get the list of application tags for the current user.",
        "parameters": [
          {
            "name": "appkey",
            "in": "query",
            "description": "Application key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UPRestGetTagsForApp"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UPRest/GetUPData": {
      "post": {
        "tags": [
          "Additional APIs",
          "Application Management"
        ],
        "summary": "Gets all available data for the user portal in one call.",
        "description": "This call caches the list of applications but does not cache tag information.",
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "Whether to use the cache. If set to true, the call does not use the cache.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Target user name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UPRestGetUPData"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UPRest/RenameTag": {
      "post": {
        "tags": [
          "Application Management"
        ],
        "summary": "Rename a tag",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "newTagname",
                  "tagname"
                ],
                "type": "object",
                "properties": {
                  "newTagname": {
                    "type": "string",
                    "description": "new tag name"
                  },
                  "tagname": {
                    "type": "string",
                    "description": "tag name"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UPRestRenameTag"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UPRest/SetUserCredsForApp": {
      "post": {
        "tags": [
          "Additional APIs",
          "Application Management"
        ],
        "summary": "Set user credentials for an application.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Password",
                  "Username",
                  "appkey"
                ],
                "type": "object",
                "properties": {
                  "Password": {
                    "type": "string",
                    "description": "Application password"
                  },
                  "PublicKeyHash": {
                    "type": "string",
                    "description": "SHA256 Hex of the public key used to encrypt the password"
                  },
                  "appkey": {
                    "type": "string",
                    "description": "Application key"
                  },
                  "Username": {
                    "type": "string",
                    "description": "Application user name"
                  },
                  "ConnectorId": {
                    "type": "string",
                    "description": "ID of the connector were a public key used to encrypt exists"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UPRestSetUserCredsForApp"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UPRest/UpdateCredsForSecuredItem": {
      "post": {
        "tags": [
          "Application Management"
        ],
        "summary": "Update secured item credentials.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Password": {
                    "type": "string",
                    "description": "User password"
                  },
                  "CustomFields": {
                    "type": "string",
                    "description": "Custom user fields"
                  },
                  "Notes": {
                    "type": "string",
                    "description": "Notes for secured item"
                  },
                  "Username": {
                    "type": "string",
                    "description": "Username"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UPRestUpdateCredsForSecuredItem"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UPRest/UpdateUserApplication": {
      "post": {
        "tags": [
          "Additional APIs",
          "Application Management"
        ],
        "summary": "update user application for the current user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "appkey",
                  "notes"
                ],
                "type": "object",
                "properties": {
                  "appkey": {
                    "type": "string",
                    "description": "Application key"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Application Notes"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UPRestUpdateUserApplication"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UPRest/UploadSecuredItemIcon": {
      "post": {
        "tags": [
          "Application Management"
        ],
        "summary": "Upload secured item icon.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "sItemkey"
                ],
                "type": "object",
                "properties": {
                  "sItemkey": {
                    "type": "string",
                    "description": "Name of secured item"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UPRestUploadSecuredItemIcon"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UPRest/UpsertTagsForApp": {
      "post": {
        "tags": [
          "Additional APIs",
          "Application Management"
        ],
        "summary": "Add and update application tags for the current user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "appkey",
                  "tagnames"
                ],
                "type": "object",
                "properties": {
                  "appkey": {
                    "type": "string",
                    "description": "Application key"
                  },
                  "tagnames": {
                    "type": "array",
                    "description": "list of tag names",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UPRestUpsertTagsForApp"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UPRest/UpsertTagsForSecuredItem": {
      "post": {
        "tags": [
          "Application Management"
        ],
        "summary": "Add and update secured item tags for the current user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "itemkey",
                  "tagnames"
                ],
                "type": "object",
                "properties": {
                  "tagnames": {
                    "type": "array",
                    "description": "list of tag names",
                    "items": {
                      "type": "string"
                    }
                  },
                  "itemkey": {
                    "type": "string",
                    "description": "Secured item key"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UPRestUpsertTagsForSecuredItem"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/User/UpdateProfile": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Change cloud user properties and set the value of additional attributes.(Early Access)",
        "description": "<strong><font color = #46B8DA> Early access </font>\n            This API is an early access API. It is possible that it may change in near future.</strong>\n            User must be a cloud user.\n            Specified user must be you, you must be a system administrator or have user management permissions.\n            Specifying 'ServiceUser' will override the 'InEveryBodyRole' property if both are provided.\n            This api also updates additional attributes which are present in the system.\n            All the parameters other than that mentioned in the body args are treated as additional attributes.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID"
                ],
                "type": "object",
                "properties": {
                  "HomeNumber": {
                    "type": "string",
                    "description": "User home number."
                  },
                  "DisplayName": {
                    "type": "string",
                    "description": "User display name."
                  },
                  "ID": {
                    "type": "string",
                    "description": "UUID of the cloud user to change (default=current user)."
                  },
                  "OfficeNumber": {
                    "type": "string",
                    "description": "User office number."
                  },
                  "MobileNumber": {
                    "type": "string",
                    "description": "User mobile number."
                  },
                  "Mail": {
                    "type": "string",
                    "description": "User email."
                  },
                  "Description": {
                    "type": "string",
                    "description": "User description."
                  },
                  "Name": {
                    "type": "string",
                    "description": "User name. format:username@suffix.  You must be a system administrator or have user management permissions to change this field."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdateProfile"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UserMgmt/AnalyzeAdaptiveMfaRisk": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Runs a risk check for the current user.",
        "description": "You must be logged in and the tenant must have the Adaptive MFA entitlement enabled.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtAnalyzeAdaptiveMfaRisk"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/CanEditUserAttributes": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Check to see if a user can edit attributes.",
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "description": "User UUID or name to check (default=current user)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "directoryServiceUuid",
            "in": "query",
            "description": "Directory service UUID of the user (default=null)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtCanEditUserAttributes"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/ChangeUserAttributes": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Update user attributes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID"
                ],
                "type": "object",
                "properties": {
                  "CmaRedirectedUserUuid": {
                    "type": "string",
                    "description": "Redirected user uuid. Send null to remove existing value."
                  },
                  "ID": {
                    "type": "string",
                    "description": "User UUID or name to set redirection for"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtChangeUserAttributes"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UserMgmt/ChangeUserPassword": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Change the password for the current user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "newPassword",
                  "oldPassword"
                ],
                "type": "object",
                "properties": {
                  "oldPassword": {
                    "type": "string",
                    "description": "Current password"
                  },
                  "newPassword": {
                    "type": "string",
                    "description": "New password"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtChangeUserPassword"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UserMgmt/CheckUserProfileChallenge": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Check if a user profile challenge is required for the current user.",
        "description": "Responds with challenge exception if a challenge is necessary, or success: true if it is not.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtCheckUserProfileChallenge"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/DirectoryServiceQuery": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management",
          "Directory Service Management"
        ],
        "summary": "Query all directory services for users, groups, and/or roles using a json query string.",
        "description": "Either a 'user', a 'group', or a 'role' query must be specified.  If no directoryServices are specified, all available\n            directory services will be searched.",
        "parameters": [
          {
            "name": "args",
            "in": "query",
            "description": "PageOptionBase\n            {\n                \"PageNumber\": 1,\n                \"PageSize\": 100000,\n                \"Limit\": 100000,\n                \"SortBy\": \"DisplayName\",\n                \"direction\": \"DESC\"\n            }",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "directoryServices",
                  "group",
                  "roles",
                  "user"
                ],
                "type": "object",
                "properties": {
                  "roles": {
                    "type": "string",
                    "description": "Json query for the roles table"
                  },
                  "group": {
                    "type": "string",
                    "description": "Json query for the dsgroups table"
                  },
                  "directoryServices": {
                    "type": "array",
                    "description": "string list of diretory service uuids to limit search to",
                    "items": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "user": {
                    "type": "string",
                    "description": "Json query for the dsusers table"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtDirectoryServiceQuery"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UserMgmt/GetCachedEntity": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Get the cached entity.",
        "parameters": [
          {
            "name": "uuidOrName",
            "in": "query",
            "description": "Unique identifier or name of entity.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtGetCachedEntity"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/GetCachedUser": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Get the cached user.",
        "parameters": [
          {
            "name": "uuidOrName",
            "in": "query",
            "description": "Unique identifier or name of user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtGetCachedUser"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/GetSecurityQuestions": {
      "post": {
        "tags": [
          "Multi-Factor Registration"
        ],
        "summary": "Get security questions for the current user",
        "description": "<p><ul><li>Once you've added all of the questions you can then get the list of security questions available for the tenant by invoking the endpoint.</li>\n            <li>Refer guides section https://identity-developer.cyberark.com/docs/multiple-secret-question-enrollment </li></ul></p>",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The unique ID of the user for whom the security question should be retrieved. The unique ID is generated when the user is created.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addAdminQuestions",
            "in": "query",
            "description": "This flag specifies if the admin defined security questions have to be sent in the API response or not.The default value is false.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtGetSecurityQuestions"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/GetUserAttributes": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Fetch attributes for a specified user.",
        "description": "Attributes will vary depending on the type of the directory service the user belongs to.",
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "description": "User UUID to fetch attributes for (default=current user)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "directoryServiceUuid",
            "in": "query",
            "description": "Directory service UUID of the user (default=null)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtGetUserAttributes"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/GetUserCertificateInfo": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Get certificate info for a given user.",
        "description": "Returns  Thumbprint and certificate type information for all certificates issued to the user.\n            Specified user must be you or you must be a system administrator or have user management permissions.",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "The name or uuid of the user to fetch certificate info for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtGetUserCertificateInfo"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/GetUserHierarchy": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Fetch the reporting hierarchy for a specified user.",
        "description": "Attributes will vary depending on the type of the directory service the user belongs to.",
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "description": "User UUID to fetch hierarchy for (default=current user)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtGetUserHierarchy"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/GetUserInfo": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Get additional info for a specified user",
        "description": "<p><ul><li>Invoke this API to get the user information for a given user.</li>\n             <li>Only system administrator, users with user management rights, or the user itself can invoke this API.</li>\n             <li>NOTE: This is a high CPU intensive call, so it should be used appropriately. (Cache the result as needed).</li></ul></p>",
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "description": "The unique ID of the user to fetch attributes for. The unique ID is generated when the user is created.(default=current user)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtGetUserInfo"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/GetUserPicture": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Fetch a cloud user's picture.",
        "description": "Specified user must be you or you must be a system administrator or have user management permissions.",
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "description": "User UUID or name to fetch picture for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "directoryServiceUuid",
            "in": "query",
            "description": "UUID of the user's directory service (default=null)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "file": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtGetUserPicture"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/GetUserPreferences": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Get the user preferences.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtGetUserPreferences"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/GetUsersRolesAndAdministrativeRights": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Gets user roles and administrative rights.",
        "description": "The list consists of all user roles and associated administrative rights associated with a role.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "UUID of User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtGetUsersRolesAndAdministrativeRights"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/InviteUsers": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Invite one or more users to the cloud portal.",
        "description": "You must be a system administrator or have user management permissions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "EmailInvite",
                  "Entities"
                ],
                "type": "object",
                "properties": {
                  "SmsInvite": {
                    "type": "boolean",
                    "description": "Send SMS invitations to invited entities if possible (default=false)"
                  },
                  "Entities": {
                    "type": "array",
                    "description": "Users or groups to invite; each entry is a dictionary including 'Type' (User, Group, Role), 'Guid' (entity UUID), and 'Name' (entity name, only applicable to User entities)",
                    "items": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "Role": {
                    "type": "string",
                    "description": "Add each invited user to this role name if specified (default=null)"
                  },
                  "GroupInvite": {
                    "type": "boolean",
                    "description": "For invited groups, send a single email invitation to the group rather than to each user within the group (default=true)"
                  },
                  "EmailInvite": {
                    "type": "boolean",
                    "description": "Send email invitations to invited entities if possible (default=true)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtInviteUsers"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UserMgmt/IsUserCloudLocked": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Checks to see if a given user is cloud locked.",
        "description": "You must be a system administrator, have user management permissions, or be checking yourself.",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "The name or uuid of the user to check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtIsUserCloudLocked"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/IsUserLockedOutByPolicy": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Determine if the current user can (or cannot...) satisfy the requisite MFA challenges.",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "The name or uuid of the user to test. Pass an empty string to test the\n            currently logged-in user.  Note that only administrative users can test other users.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtIsUserLockedOutByPolicy"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/IsUserSubjectToCloudLocks": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Checks to see if a given user is subject to cloud locks.",
        "description": "You must be a system administrator, have user management permissions, or be checking yourself.",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "The name or uuid of the user to check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtIsUserSubjectToCloudLocks"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/RemoveUser": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Remove a user from the cloud.",
        "description": "You must be a system administrator or have user management permissions.  Will delete cloud users.  Users for other directory services are only removed from the cloud.\n            This API will fail if the id specified is the current user.",
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "description": "The name or UUID of the user to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtRemoveUser"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/RemoveUserCertificate": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Remove one or more certificates for a given user.",
        "description": "Specified user must be you or you must be a system administrator or have user management permissions.\n            'certType' will be ignored if 'thumbprint' is specified.\n            If 'thumbprint' is null, all certs of 'cerType' for the user are removed.\n            If both 'thumbprint' and 'certType' are null, all certificates for the user are removed.",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "The name or uuid of the user to remove certificate(s) for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "thumbprint",
            "in": "query",
            "description": "Thumbprint of the certificate to remove.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "certType",
            "in": "query",
            "description": "Type of certificates to remove.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtRemoveUserCertificate"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/RemoveUsers": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Remove one or more users.",
        "description": "You must be a system administrator or have user management permissions.  Will delete cloud users.  Users for other directory services are only removed from the cloud.\n            This API will fail if any of the ids specified are the current user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Users"
                ],
                "type": "object",
                "properties": {
                  "Users": {
                    "type": "array",
                    "description": "List of user UUIDs to send invitations to",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtRemoveUsers"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UserMgmt/ResetSecurityQuestions": {
      "post": {
        "tags": [
          "Multi-Factor Registration"
        ],
        "summary": "Resets (clears) security questions for a user",
        "description": "<p><ul><li>This endpoint is used to reset all the security questions.</li>\n            <li>Refer guides section https://identity-developer.cyberark.com/docs/multiple-secret-question-enrollment </li></ul></p>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Id": {
                    "type": "string",
                    "description": "The unique ID of the user for whom the security question should be reset or cleared. The unique ID is generated when the user is created"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtResetSecurityQuestions"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UserMgmt/ResetUserPassword": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Reset the password for a specified user",
        "description": "<p><ul><li>This API is invoked when you want to change the password of a given user.</li>\n              <li>Only system administrator, users with user management rights, or the user itself can invoke this API.</li>\n              <li>The API can be invoked by an admin to reset the user password or by the user incase the user has lost the password.</li></ul></p>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID",
                  "newPassword"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "string",
                    "description": "User Id or name to set password for"
                  },
                  "newPassword": {
                    "type": "string",
                    "description": "The new password should be given. This password should comply to the password requirements setup for the given user."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtResetUserPassword"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UserMgmt/SendLoginEmail": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Send email invitation to a specified user.",
        "description": "You must be a system administrator.",
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "description": "User UUID to send invitation to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtSendLoginEmail"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/SendLoginEmails": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Send invitation emails to one or more users.",
        "description": "You must be a system administrator.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "array",
                    "description": "List of user UUIDs to send invitations to",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtSendLoginEmails"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UserMgmt/SendSmsInvite": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Send SMS invitation to a specified user.",
        "description": "You must be a system administrator or have user management permissions.",
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "description": "User UUID to send invitation to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtSendSmsInvite"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/SetCloudLock": {
      "post": {
        "tags": [
          "User Management"
        ],
        "summary": "Applies or clears a cloud lock for a given user.",
        "description": "<p><ul><li>Invoke this API if you want to lock the user account of a given user</li>\n             <li>Only system administrator, users with user management rights, or the user itself can invoke this API.</li></ul></p>",
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "description": "The unique ID of the user. The unique ID is generated when the user is created.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lockUser",
            "in": "query",
            "description": "This parameter specifies if the user account should be locked or not.The default value is 'false'.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtSetCloudLock"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/SetPhonePin": {
      "post": {
        "tags": [
          "Multi-Factor Registration"
        ],
        "summary": "Set the phone pin for a user",
        "description": "<p>Using this endpoint we can set phonepin for the user.</p>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "ID",
                  "phonepin"
                ],
                "type": "object",
                "properties": {
                  "ID": {
                    "type": "string",
                    "description": "The unique ID of the user. The unique ID is generated when the user is created."
                  },
                  "phonepin": {
                    "type": "string",
                    "description": "Enter a pin that the user needs to enter for the phone call MFA. The minimum digits required for the pin are 4. This can be controlled in the user policy."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtSetPhonePin"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UserMgmt/SetSecurityQuestion": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "DEPRECATED -- This API is deprecated and should not be used.",
        "description": "Please use UpdateSecurityQuestions and/or ResetSecurityQuestions instead.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtSetSecurityQuestion"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UserMgmt/SignOutCurrentSession": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Sign out for the current session",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtSignOutCurrentSession"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/SignOutEverywhere": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Sign out everywhere for user",
        "parameters": [
          {
            "name": "ID",
            "in": "query",
            "description": "User UUID to sign out everywhere for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtSignOutEverywhere"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/UncacheUserPreferences": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Uncache the user preferences.",
        "parameters": [
          {
            "name": "userUuidOrName",
            "in": "query",
            "description": "Unique identifier or name of user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtUncacheUserPreferences"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/UserMgmt/UpdateSecurityQuestions": {
      "post": {
        "tags": [
          "Multi-Factor Registration"
        ],
        "summary": "Updates security questions for a user",
        "description": "<p><ul><li>This API can be used by the admin/user to add multiple security question.</li>\n            <li>This API can also be used to update or delete security questions added by the admin/user.</li>\n            <li>Refer guides section https://identity-developer.cyberark.com/docs/multiple-secret-question-enrollment </li></ul></p>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Added"
                ],
                "type": "object",
                "properties": {
                  "Added": {
                    "type": "array",
                    "description": "List of key-value pair entities specifying questions to add. Each question entity has the following properties: <ul><li>Key - 'QuestionText' (string, text of user question) and Value - 'Example - BirthDate'</li><li>Key - 'Answer' (string, text of answer) and Value - 'Example - 1st Feb 2000'</li><li>Key - 'Type' (string, type of question (user/admin)) and Value - 'Example - Admin'</li></ul>",
                    "items": {
                      "type": "object",
                      "properties": {}
                    }
                  },
                  "Id": {
                    "type": "string",
                    "description": "The unique ID of the user. The unique ID is generated when the user is created. (or) the username can be entered too."
                  },
                  "Deleted": {
                    "type": "array",
                    "description": "– List of the unique IDs of the security questions that need to be deleted. The unique IDs are generated when the user adds the security question.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "Replace": {
                    "type": "boolean",
                    "description": "Replace all existing questions with this update.",
                    "default": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtUpdateSecurityQuestions"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/UserMgmt/UpdateUserPreferences": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "Updates various user preferences for the currently logged in user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "PreferredCulture": {
                    "type": "string",
                    "description": "Idaptive supported culture code. Use Core/GetSupportedCultures for a list. Set to an empty string to remove the user's preferred culture."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserMgmtUpdateUserPreferences"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Vfs/GetFile": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get the file.",
        "description": "vfs/...... points here.",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "Path to the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/VfsGetFile"
                }
              }
            }
          }
        },
        "x-idap-anon": true,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Vfs/GetFileLower": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Get lower case file name.",
        "description": "Our js files don't match the class names so we get requests for \n            FooBar.js but the file is called foobar.js.\n            \n            Hence this method (js upload forces all files to lower case too).\n            \n            vfslow/...... points here",
        "parameters": [
          {
            "name": "path",
            "in": "query",
            "description": "Path to the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/VfsGetFileLower"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/WinDpa/CreateUser": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "To create a local user on target windows machine",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Password",
                  "RequestId",
                  "TargetMachine",
                  "UserName"
                ],
                "type": "object",
                "properties": {
                  "Password": {
                    "type": "string",
                    "description": "User password"
                  },
                  "TargetMachine": {
                    "type": "string",
                    "description": "Machine FQDN"
                  },
                  "UserName": {
                    "type": "string",
                    "description": "User to be created"
                  },
                  "Groups": {
                    "type": "string",
                    "description": "Comma seperated group names that user must be part of"
                  },
                  "RequestId": {
                    "type": "string",
                    "description": "Correlation ID to the external system"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/WinDpaCreateUser"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/WinDpa/DeleteUser": {
      "post": {
        "tags": [
          "Additional APIs",
          "User Management"
        ],
        "summary": "To delete a local user on target windows machine",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "RequestId",
                  "TargetMachine",
                  "UserName"
                ],
                "type": "object",
                "properties": {
                  "TargetMachine": {
                    "type": "string",
                    "description": "Machine FQDN"
                  },
                  "UserName": {
                    "type": "string",
                    "description": "User to be deleted"
                  },
                  "RequestId": {
                    "type": "string",
                    "description": "Correlation ID to the external system"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/WinDpaDeleteUser"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/WinDpa/GetDpaAdmin": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "To get the DpaAdmin user details",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "RequestId"
                ],
                "type": "object",
                "properties": {
                  "RequestId": {
                    "type": "string",
                    "description": "Correlation ID to the external system"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/WinDpaGetDpaAdmin"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/WinDpa/SetDpaAdmin": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Domain",
                  "Password",
                  "RequestId",
                  "UserName"
                ],
                "type": "object",
                "properties": {
                  "Password": {
                    "type": "string",
                    "description": "User password"
                  },
                  "Domain": {
                    "type": "string",
                    "description": "Domain Name"
                  },
                  "UserName": {
                    "type": "string",
                    "description": "User"
                  },
                  "RequestId": {
                    "type": "string",
                    "description": "Correlation ID to the external system"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/WinDpaSetDpaAdmin"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/WinDpa/SetDpaConfig": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "To get the DpaAdmin user details",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "Enabled",
                  "ProxyUuid",
                  "RequestId"
                ],
                "type": "object",
                "properties": {
                  "ProxyUuid": {
                    "type": "string",
                    "description": "The connector Uuid."
                  },
                  "Enabled": {
                    "type": "boolean",
                    "description": "To enable or disable the Dpa configuration of the specified connector"
                  },
                  "RequestId": {
                    "type": "string",
                    "description": "Correlation ID to the external system"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/WinDpaSetDpaConfig"
                }
              }
            }
          }
        },
        "x-idap-anon": false,
        "x-codegen-request-body-name": "payload"
      }
    },
    "/Zso/AuthenticateSession": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Authenticate the ZSO session.",
        "parameters": [
          {
            "name": "sessionId",
            "in": "query",
            "description": "The session id to authenticate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ZsoAuthenticateSession"
                }
              }
            }
          }
        },
        "x-idap-anon": false
      }
    },
    "/Zso/CertLogin": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Login using a tenant Certificate authority certificate.",
        "description": "Certificate to use must be attached to the HTTP REST request.",
        "parameters": [
          {
            "name": "redirectUrl",
            "in": "query",
            "description": "URL to redirect to; must begin with the appropriate tenant host name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ZsoCertLogin"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/Zso/ClearMacSafariZsoCookie": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Clears the Mac Safari Zso cookie.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ZsoClearMacSafariZsoCookie"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/Zso/IsMacSafariZsoCookieSet": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Is the Mac Safari Zso cookie set.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ZsoIsMacSafariZsoCookieSet"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/Zso/IsSessionAuthenticated": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Checks to see if sessionId is authenticated.",
        "parameters": [
          {
            "name": "sessionId",
            "in": "query",
            "description": "The session id to check.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ZsoIsSessionAuthenticated"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    },
    "/Zso/SetMacSafariZsoCookie": {
      "post": {
        "tags": [
          "Additional APIs"
        ],
        "summary": "Sets the Mac Safari Zso cookie.",
        "responses": {
          "200": {
            "description": "API-Result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ZsoSetMacSafariZsoCookie"
                }
              }
            }
          }
        },
        "x-idap-anon": true
      }
    }
  },
  "components": {
    "schemas": {
      "UPRestRenameTag": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Whether the operation is successful or not."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityGetRiskAnalysisLevels": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "A list of risk levels."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetPremDetectRanges": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of IP Ranges in UI Query Response format.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityTwilioPhoneChallengeCompleted": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The response xml found in the request."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "AuthenticationWidgetsWidgetPage": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Page Html"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceGetUsers": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "List of all cloud users.",
            "items": {
              "type": "object",
              "properties": {
                "Uuid": {
                  "type": "string",
                  "description": "User UUID."
                },
                "Name": {
                  "type": "string",
                  "description": "User name."
                },
                "DisplayName": {
                  "type": "string",
                  "description": "User display name."
                },
                "Description": {
                  "type": "string",
                  "description": "User description."
                },
                "Mail": {
                  "type": "string",
                  "description": "User email."
                },
                "OfficeNumber": {
                  "type": "string",
                  "description": "User office phone number."
                },
                "MobileNumber": {
                  "type": "string",
                  "description": "User mobile phone number."
                },
                "HomeNumber": {
                  "type": "string",
                  "description": "User home phone number."
                },
                "ReportsTo": {
                  "type": "string",
                  "description": "User reports to user UUID."
                },
                "PictureUri": {
                  "type": "string",
                  "description": "File system path to user picture file."
                },
                "PreferredCulture": {
                  "type": "string",
                  "description": "User preferred culture."
                }
              },
              "description": "A cloud user."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigGetCustomerConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "LoginBannerMessageL10nEnabled": {
                "type": "boolean",
                "description": "Display or not the tenant login banner message."
              },
              "LoginBannerMessage": {
                "type": "string",
                "description": "The tenant login banner message."
              },
              "DisplayLoginBanner": {
                "type": "boolean",
                "description": "Display or not the tenant login banner."
              },
              "LocalizationMappings": {
                "type": "array",
                "description": "The tenant localization mappings.",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "description": "A tenant configuration."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UPRestUpsertTagsForSecuredItem": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Whether the operation is successful or not."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetProxyNotificationMembers": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Guid": {
                "type": "string",
                "description": "Principal UUID"
              },
              "Type": {
                "type": "string",
                "description": "Principal type, one of 'User', 'Group', or 'Role'"
              },
              "Name": {
                "type": "string",
                "description": "Principal name"
              }
            },
            "description": "Proxy notification principal list (each list entry has these properties)"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceCreateUserBulk": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "Success or fail, if fail includes -'d list of filenames that failed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ExternalCaMgmtRemoveCertAuthority": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the certificate authority get removed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigGetSMTPConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Connectors": {
                "type": "array",
                "description": "The connectors for SMTP to use.",
                "items": {
                  "type": "string"
                }
              },
              "Port": {
                "type": "boolean",
                "description": "The SMTP port."
              },
              "Host": {
                "type": "boolean",
                "description": "The SMTP host."
              },
              "SSL": {
                "type": "boolean",
                "description": "Enabled SSL SMTP."
              },
              "Pass": {
                "type": "boolean",
                "description": "The SMTP password."
              },
              "User": {
                "type": "boolean",
                "description": "The SMTP user."
              },
              "SmtpConfigEnabled": {
                "type": "boolean",
                "description": "Is SMTP enabled."
              },
              "UseConnectors": {
                "type": "boolean",
                "description": "Does SMTP use connectors."
              }
            },
            "description": "The tenant SMTP configuration."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SaasManageGetTemplatesAndCategories": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Category": {
                "type": "string",
                "description": "Application category"
              },
              "DisplayName": {
                "type": "string",
                "description": "Application template display name"
              },
              "AppType": {
                "type": "string",
                "description": "Application type"
              },
              "AppTypeDisplayName": {
                "type": "string",
                "description": "Display name of application type"
              },
              "Icon": {
                "type": "string",
                "description": "Path of application icon image"
              },
              "WebAppType": {
                "type": "string",
                "description": "Application web-app-type"
              },
              "Description": {
                "type": "string",
                "description": "Application description"
              },
              "Name": {
                "type": "string",
                "description": "Application template name"
              }
            },
            "description": "A list of application templates"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreDeleteAliases": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Were the suffixes successfully removed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityCleanupAuthentication": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ConsentManagementIsConsentManagementEnabled": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreDeleteTenantConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the tenant configuration key value get removed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigTestSMTPConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The user email address."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "DeviceEnrollIosDevice": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "WelcomePageInfo": {
                "type": "object",
                "properties": {
                  "IconBackgroundColor": {
                    "type": "string",
                    "description": "Background color of the company icon"
                  },
                  "IconUrl": {
                    "type": "string",
                    "description": "Url of the company icon"
                  },
                  "Icon": {
                    "type": "string",
                    "description": "Company icon"
                  },
                  "WelcomeText": {
                    "type": "string",
                    "description": "Welcome text to show to the user"
                  }
                },
                "description": "Information to show to user after enrollment"
              },
              "UserCert": {
                "type": "string",
                "description": "Unique certificate created againt the user"
              }
            },
            "description": "Enrollment Details"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ExternalCaMgmtUpdateCertAuthority": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard Json Result"
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "Standard Json Result"
          }
        }
      },
      "LDAPDirectoryServiceGetMappableAttributeList": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "An array of human-readable field descriptions.",
            "items": {
              "type": "string",
              "description": "Attribute Field Description."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SaasManageGetRoleMembers": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Guid": {
                "type": "string",
                "description": "Principal UUID"
              },
              "Type": {
                "type": "string",
                "description": "Principal type, one of 'User', 'Group', or 'Role'"
              },
              "Name": {
                "type": "string",
                "description": "Principal name"
              }
            },
            "description": "Role principal list (each list entry has these properties)"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CollectionGetObjectCollectionsAndFilters": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of object collections",
            "items": {
              "type": "object",
              "properties": {
                "Name": {
                  "type": "string",
                  "description": "The name of the collection."
                },
                "Description": {
                  "type": "string",
                  "description": "The collection description."
                },
                "OjbectType": {
                  "type": "string",
                  "description": "The collection object type."
                },
                "Filters": {
                  "type": "string",
                  "description": "The collection filters."
                },
                "CollectionType": {
                  "type": "string",
                  "description": "The collections collectiontype."
                },
                "Rank": {
                  "type": "string",
                  "description": "The collections rank."
                },
                "Parent": {
                  "type": "string",
                  "description": "The collections parent."
                },
                "ParentPath": {
                  "type": "string",
                  "description": "The collections parent path."
                }
              },
              "description": "A list of collections."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PKILogin": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the login work."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OAuth2Revoke": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the revoke work."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Did the revoke work.\", type: \"boolean\"\n            }\n            "
          }
        }
      },
      "JsManageGetReportRolesAndRights": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "Role and rights for Reports.",
            "items": {
              "type": "object",
              "properties": {
                "PrincipalType": {
                  "type": "string",
                  "description": "The ace principal type."
                },
                "Rights": {
                  "type": "string",
                  "description": "The rights of the principal."
                }
              },
              "description": "A report role and right."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerAgentDeleteEnrollmentCode": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "MobileRemoveDeviceProfile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "WinDpaGetDpaAdmin": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "LDAPDirectoryServiceAddLDAPDirectoryServiceConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The LDAP service that was just added."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "RadiusGetClients": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ClientAllowNewLinesInPrompts": {
                "type": "boolean",
                "description": "Allow embedded new-line characters when sending prompt to the client"
              },
              "ClientName": {
                "type": "string",
                "description": "Client name"
              },
              "ClientAddress": {
                "type": "string",
                "description": "Client IP address"
              },
              "ClientDescription": {
                "type": "string",
                "description": "Client description"
              },
              "ClientCulture": {
                "type": "string",
                "description": "Client culture"
              },
              "ClientVendorId": {
                "type": "integer",
                "description": "Client radius vendor ID"
              },
              "ClientSecret": {
                "type": "string",
                "description": "Client secret"
              }
            },
            "description": "List of radius clients; each user contains the following properties."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OathValidateOtpCode": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Is the otp code valid."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Is the otp code valid.\", type: \"boolean\"\n            }\n            "
          }
        }
      },
      "CoreDeleteFile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Was the file delete successful."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TaskGetSingleJobHistory": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The history of the job."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityGetQRCodeStatus": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": " A JSON with the QR code data\n            "
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "MobileSetApnsCertForClientApp": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard Success result based on the successful storage"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigGetTwilioConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Sid": {
                "type": "string",
                "description": "The unique identifier for the message."
              },
              "Token": {
                "type": "string",
                "description": "The Twilio authentication token."
              },
              "FromNumber": {
                "type": "string",
                "description": "The from number for Twilio messages."
              },
              "SmsConfigEnabled": {
                "type": "string",
                "description": "Is Twilio configured."
              }
            },
            "description": "The tenant Twilio configuration."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityDoIHaveRight": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Does the user have execute rights on the Application Role Management task."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "LDAPDirectoryServiceModifyLDAPDirectoryServiceConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The LDAP service that was just added."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CollectionGetCollectionRights": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "integer",
            "description": "The permissions on the collection."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceGetUserAttributes": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "InEverybodyRole": {
                "type": "boolean",
                "description": "Is user in the Everybody role?"
              },
              "Description": {
                "type": "string",
                "description": "User description"
              },
              "Name": {
                "type": "string",
                "description": "User name"
              },
              "MobileNumber": {
                "type": "string",
                "description": "User mobile phone number"
              },
              "LastPasswordChangeDate": {
                "type": "string",
                "description": "Date/time user last changed their password",
                "format": "date-time"
              },
              "OfficeNumber": {
                "type": "string",
                "description": "User office phone number"
              },
              "PictureUri": {
                "type": "string",
                "description": "File system path to user picture file"
              },
              "ReportsTo": {
                "type": "string",
                "description": "User reports to user UUID."
              },
              "HomeNumber": {
                "type": "string",
                "description": "User home phone number"
              },
              "DisplayName": {
                "type": "string",
                "description": "User display name"
              },
              "Alias": {
                "type": "string",
                "description": "Login suffix of the user"
              },
              "State": {
                "type": "string",
                "description": "User state (locked, enabled, expired)"
              },
              "PasswordNeverExpire": {
                "type": "boolean",
                "description": "Does the user's password never expire?"
              },
              "Uuid": {
                "type": "string",
                "description": "User UUID"
              },
              "Mail": {
                "type": "string",
                "description": "User email"
              }
            },
            "description": "Cloud user details"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreAssignFileRightsToRoles": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "The result of the rights assignemt."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UPRestGetAppByKey": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Shortcut": {
                "type": "boolean",
                "description": "Whether the application has been set for optional installation"
              },
              "Url": {
                "type": "string",
                "description": "Application Url"
              },
              "AdminTag": {
                "type": "string",
                "description": "Application admin tag"
              },
              "Description": {
                "type": "string",
                "description": "Application description"
              },
              "Category": {
                "type": "string",
                "description": "Application category"
              },
              "Name": {
                "type": "string",
                "description": "Application name"
              },
              "TemplateName": {
                "type": "string",
                "description": "Application template name"
              },
              "PasswordIsSet": {
                "type": "boolean",
                "description": "Whether the password has been set"
              },
              "WebAppType": {
                "type": "string",
                "description": "Application web-app-type"
              },
              "DisplayName": {
                "type": "string",
                "description": "Application display name"
              },
              "UsernameRO": {
                "type": "boolean",
                "description": "Whether user name is read-only"
              },
              "WebAppTypeDisplayName": {
                "type": "string",
                "description": "Display name of web-app-type"
              },
              "AppTypeDisplayName": {
                "type": "string",
                "description": "Display name of application type"
              },
              "Intranet": {
                "type": "boolean",
                "description": "Whether the application is an intranet app"
              },
              "AppType": {
                "type": "string",
                "description": "Application type"
              },
              "AppKey": {
                "type": "string",
                "description": "Application key"
              },
              "Rank": {
                "type": "integer",
                "description": "Application rank"
              },
              "Icon": {
                "type": "string",
                "description": "Path of application icon image"
              },
              "Username": {
                "type": "string",
                "description": "Application username"
              }
            },
            "description": "Application data"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "GoogleDirectoryRemoveDirectoryService": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the directory service removal work."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Did the directory service removal work.\", type: \"boolean\"\n            }\n            "
          }
        }
      },
      "TaskGetJobHistory": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "A page of job history."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "RadiusRemoveServers": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "RemovedServers": {
                "type": "array",
                "description": "A list of radius hosts removed.",
                "items": {
                  "type": "string"
                }
              },
              "Removed": {
                "type": "integer",
                "description": "The count of radius servers removed"
              }
            },
            "description": "Results from the removal of the radius servers."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Results from the removal of the radius servers.\", \n                type: \"object\",\n                properties:\n                {\n                    Removed: { description: \"The count of radius servers removed\", type: \"integer\" },\n                    RemovedServers: { description: \"A list of radius hosts removed.\", type: \"array\", items: { type: \"string\" } }\n                }\n            }\n            "
          }
        }
      },
      "CDirectoryServiceSetDirectoryServiceSettings": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the directory service config update work."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetUserSettings": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "The user settings in UI Query Response format.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OAuth2Keys": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of keys",
            "items": {
              "type": "object",
              "properties": {
                "kty": {
                  "type": "string",
                  "description": "The type of key."
                },
                "alg": {
                  "type": "string",
                  "description": "The algorithm of the key."
                },
                "use": {
                  "type": "string",
                  "description": "The use of key."
                },
                "kid": {
                  "type": "string",
                  "description": "The thumbprint of key."
                }
              },
              "description": "A certificate key"
            }
          },
          "Error": {
            "type": "object",
            "properties": {
              "InvalidThumbprint": {
                "type": "string",
                "description": "Certificate with thumbprint not found in given tenant"
              },
              "InvalidApp": {
                "type": "string",
                "description": "unknown app"
              },
              "InvalidURLRequest": {
                "type": "string",
                "description": "This endpoint is only supported on tenant URL, not pod URL"
              },
              "InvalidRequest": {
                "type": "string",
                "description": "bad url"
              }
            },
            "description": "The below error message is displayed incase of failure"
          }
        }
      },
      "CoreAssignDirectoryFileRightsToRoles": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "The result of the rights assignemt."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityTaskCheck": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Does the user have execute rights on the task."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationUpdateGlobalGroupAssertionMappings": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the assertion mappings get updated."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationGetFederation": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The federation."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtIsUserCloudLocked": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "MobileResetClientAppLockPin": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreSetConnectorLog4NetConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the Log4Net config get set."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigGetMobileConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "CompanyName": {
                "type": "string",
                "description": "The company name for this tenant."
              },
              "WelcomeMessage": {
                "type": "string",
                "description": "The tenant welcome message."
              },
              "EndpointEnrollWelcomeTextL10nEnabled": {
                "type": "boolean",
                "description": "Is endpoint enrollment welcome text localization enabled."
              },
              "CompanyImageBackgroundColor": {
                "type": "string",
                "description": "The company image background color."
              },
              "CompanyImage": {
                "type": "string",
                "description": "The company image content type and the image encoded as base64."
              },
              "LocalizationMappings": {
                "type": "array",
                "description": "A list of localization mappings.",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "description": "The tenant mobile configuration."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetDownloadUrls": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "Download urls include Windows and Mac agent urls, CBE urls"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OrgGetRoles": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "List of role and associated rights in redrock result format"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "RegistrationRegisterNewTenant": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The tenant registration result."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "MobileEnableSSO": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "IdentityProofingGetScriptWithMetaData": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SignupSendVerificationEmail": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Verification Id and status"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "LDAPDirectoryServiceGetDirectoryServiceVersion": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "integer",
            "description": "The directory service version."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicyGetNicePlinks": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "The list of policy links in UI Query Response format.",
            "items": {
              "type": "object",
              "properties": {
                "Description": {
                  "type": "string",
                  "description": "The policy link description."
                },
                "I18NDescriptionTag": {
                  "type": "string",
                  "description": "Localized version of the description."
                },
                "PolicySet": {
                  "type": "string",
                  "description": "The policy link policy set."
                },
                "LinkType": {
                  "type": "string",
                  "description": "The policy link type."
                },
                "Params": {
                  "type": "array",
                  "description": "The policy link parameters.",
                  "items": {
                    "type": "string"
                  }
                },
                "Filters": {
                  "type": "array",
                  "description": "The policy link filters.",
                  "items": {
                    "type": "string"
                  }
                },
                "AllowedPolicies": {
                  "type": "array",
                  "description": "The policy link allowed policies.",
                  "items": {
                    "type": "string"
                  }
                },
                "EnableCompliant": {
                  "type": "boolean",
                  "description": "The policy link enable compliant."
                }
              },
              "description": "A policy link."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerManageGetAccountPermissions": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Rights": {
                "type": "string",
                "description": "list of permissions"
              },
              "Principal": {
                "type": "string",
                "description": "User name or role name"
              },
              "PrincipalId": {
                "type": "string",
                "description": "Uuid of the principal"
              },
              "PType": {
                "type": "string",
                "description": "Principal type: User, Role,.. "
              }
            },
            "description": "List of permissions"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantCnamesUnRegister": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "status of deletion"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceExemptUserFromMfa": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicySetPlinks": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the policy links get set."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtSetPhonePin": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ErrorID": {
                "type": "string",
                "description": "Error ID if any error is received from the API. By default it is 'null'"
              },
              "ErrorCode": {
                "type": "string",
                "description": "Error code if any error is received from the API. By default it is 'null'"
              },
              "Exception": {
                "type": "string",
                "description": "Exception message if any exception is received from the API. By default it is 'null'"
              },
              "MessageID": {
                "type": "string",
                "description": "Message Id for failure response. By default it is 'null'"
              },
              "Result": {
                "type": "string",
                "description": "The result will be null."
              },
              "InnerExceptions": {
                "type": "string",
                "description": "InnerExceptions"
              },
              "Message": {
                "type": "string",
                "description": "Error message for failure response. By default it is 'null'"
              },
              "success": {
                "type": "boolean",
                "description": "The success will be true or false."
              },
              "IsSoftError": {
                "type": "boolean",
                "description": "SoftError if true indicates this is not actually an exception but an UI warning popup."
              }
            },
            "description": "Return object for a successful API call."
          },
          "Error": {
            "type": "object",
            "properties": {
              "InvalidPin": {
                "type": "string",
                "description": "This error message is seen when the PIN entered is not as per the requirements mentioned in the user policy. Ex: 'Phone PIN must be minimum of 4 digits.'"
              },
              "InvalidId": {
                "type": "string",
                "description": "User with given unique ID doesn’t exist."
              }
            },
            "description": "Error message text on failure."
          }
        }
      },
      "CoreRenameCertificate": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the certificate rename succeed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "U2fFacets": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The trusted facets for the tenant."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicySavePolicyBlock2": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetCaCertChain": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "FileResult containing the authority certificate."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OathCentrifyOathOtpProfileCheck": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceSetUserState": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Success or fail for the user state attempt."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreUpdateDirectoryServicesPrecedence": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the directory services precedence update succeed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceGetUsersFromCsvFile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "QueryResult in UI format."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtSignOutCurrentSession": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PpmUpdatePpmConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "success result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtGetUserInfo": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Result": {
                "type": "object",
                "properties": {
                  "DirectoryServiceId": {
                    "type": "string",
                    "description": "The unique ID for the directory service. This ID is created when at the time of the directory service integration with the CyberArk Identity. There is a unique ID available for CDS to."
                  },
                  "ThirdPartyOathConfigured": {
                    "type": "boolean",
                    "description": "Has a third party OATH token been configured for this user? - A Boolean flag that specifies if third-party OATH token has been configured for the user"
                  },
                  "ErrorID": {
                    "type": "string",
                    "description": "Error ID if any error is received from the API. By default it is 'null'"
                  },
                  "EmailAddress": {
                    "type": "string",
                    "description": "User email address"
                  },
                  "HasPicture": {
                    "type": "boolean",
                    "description": "Specifies if there is a picture available for this user in cloud directory service."
                  },
                  "Settings": {
                    "type": "object",
                    "properties": {
                      "uisection": {
                        "type": "object",
                        "properties": {
                          "doNotShowIdaptiveWelcomeWizard": {
                            "type": "boolean",
                            "description": "donot show Idaptive Welcome Wizard"
                          },
                          "floating-nav-part-Settings-expanded": {
                            "type": "boolean",
                            "description": "expand floating-nav-part settings"
                          },
                          "nav-part-Settings-expanded": {
                            "type": "boolean",
                            "description": "expand nav-part settings"
                          }
                        },
                        "description": "UI Settings Section"
                      },
                      "SlackAuthEnabled": {
                        "type": "boolean",
                        "description": "Is Slack Auth Enabled?"
                      },
                      "SecurityKeyConfigured": {
                        "type": "boolean",
                        "description": "Has the user configured a U2F Security Key?"
                      },
                      "HasU2fDeviceWithFacetIdMatched": {
                        "type": "boolean",
                        "description": "Has U2fDevice with FacetId matched?"
                      },
                      "SlackMemberIdSet": {
                        "type": "boolean",
                        "description": "Is Slack MemberId Set?"
                      },
                      "EnablePurchasedLicenseMenu": {
                        "type": "boolean",
                        "description": "Does the user have the right to view licenses?"
                      },
                      "MobileDeviceAuthCapableCount": {
                        "type": "integer",
                        "description": "Mobile Device Auth Capable Count"
                      },
                      "PreferredCulture": {
                        "type": "string",
                        "description": "User's preferred culture if any in culture code format (e.g. fr)"
                      },
                      "DisplayPreferredCulture": {
                        "type": "string",
                        "description": "User's preferred culture if any in display format (e.g. French - français) "
                      },
                      "MfaSetupWizardSettings": {
                        "type": "object",
                        "properties": {
                          "ShowU2fInMfaSetupWizard": {
                            "type": "boolean",
                            "description": "Want to show U2f in Mfa Setup Wizard?"
                          },
                          "ShowSecurityQuestionInMfaSetupWizard": {
                            "type": "boolean",
                            "description": "Want to show security question in Mfa Setup Wizard?"
                          },
                          "ShowOathPassCodeInMfaSetupWizard": {
                            "type": "boolean",
                            "description": "Want to show OathPassCode in Mfa Setup Wizard?"
                          },
                          "ShowSmsMessageInMfaSetupWizard": {
                            "type": "boolean",
                            "description": "Want to show SmsMessage in Mfa Setup Wizard?"
                          },
                          "RequiredFactorSetupCount": {
                            "type": "integer",
                            "description": "Required Factor Setup Count"
                          },
                          "ShowMfaSetupWizard": {
                            "type": "boolean",
                            "description": "Want to show Mfa Setup Wizard?"
                          }
                        },
                        "description": "Contains settings that guide MFA setup"
                      },
                      "OnDeviceAuthenticatorConfigured": {
                        "type": "boolean",
                        "description": "Is OnDeviceAuthenticator configured?"
                      }
                    },
                    "description": "Contains internal state for the Portal Web UI; this property can be ignored."
                  },
                  "LastPasswordChangeDate": {
                    "type": "string",
                    "description": "The date-time when the user has last changed the password.",
                    "format": "date-time"
                  },
                  "DisplayName": {
                    "type": "string",
                    "description": "Display name of the user."
                  },
                  "ErrorCode": {
                    "type": "string",
                    "description": "Error code if any error is received from the API. By default it is 'null'"
                  },
                  "PasswordExpDate": {
                    "type": "string",
                    "description": "The expiry date-time of the user's password.",
                    "format": "date-time"
                  },
                  "MobileNumber": {
                    "type": "string",
                    "description": "User mobile phone number"
                  },
                  "Exception": {
                    "type": "string",
                    "description": "Exception message if any exception is received from the API. By default it is 'null'"
                  },
                  "SelfUnlocked": {
                    "type": "string",
                    "description": "Self Unlock"
                  },
                  "LastLastLoginDate": {
                    "type": "string",
                    "description": "Date-time user prior last logged in to the CyberArk Identity portal",
                    "format": "date-time"
                  },
                  "DirectoryServiceLocalizedName": {
                    "type": "string",
                    "description": "Directory service name localized to user's preferred language"
                  },
                  "DirectoryServiceName": {
                    "type": "string",
                    "description": "Directory service name"
                  },
                  "Message": {
                    "type": "string",
                    "description": "Error message for failure response. By default it is 'null'"
                  },
                  "DirectoryServiceType": {
                    "type": "string",
                    "description": "The directory service type to which the user belongs. Ex- CDS (Cloud directory service)."
                  },
                  "IsSysAdmin": {
                    "type": "boolean",
                    "description": "Specifies if the user is a system administrator."
                  },
                  "SecurityQuestion": {
                    "type": "string",
                    "description": "Specifies if any security question has been added to the user. The value will be 'yes' if the question is added. Else it will be 'null'."
                  },
                  "IsSoftError": {
                    "type": "boolean",
                    "description": "SoftError if true indicates this is not actually an exception but an UI warning popup."
                  },
                  "CanChangePassword": {
                    "type": "boolean",
                    "description": "A Boolean flag that specifies whether the user can change the password."
                  },
                  "Name": {
                    "type": "string",
                    "description": "User name"
                  },
                  "Id": {
                    "type": "string",
                    "description": "The unique ID of the user. The unique ID is generated when the user is created."
                  },
                  "SecurityQuestionsLastUpdate": {
                    "type": "string",
                    "description": "Date-time user has last updated the security question",
                    "format": "date-time"
                  },
                  "PasswordResetFlag": {
                    "type": "integer",
                    "description": "An integer that specifies if the password reset is required for the user. <p><ul>The integer can be interpreted as below: <li>0: no reset needed</li><li>1: Reset required</li><li>2: Reset optional</li><li>3: Reset warning</li></ul>"
                  },
                  "PhonePinLastChangeDate": {
                    "type": "string",
                    "description": "Date-time user last set their phone PIN",
                    "format": "date-time"
                  },
                  "SqEnabled": {
                    "type": "boolean",
                    "description": "Specifies if the security question MFA setup has been enabled for the user."
                  },
                  "TenantId": {
                    "type": "string",
                    "description": "The ID of the tenant to which the user belongs."
                  },
                  "LastLoginDate": {
                    "type": "string",
                    "description": "Date-time user last logged in",
                    "format": "date-time"
                  },
                  "InnerExceptions": {
                    "type": "string",
                    "description": "InnerExceptions"
                  },
                  "PasswordChangeSoftDays": {
                    "type": "integer",
                    "description": "Days before a user should be warned to change a near to expiring password"
                  },
                  "MessageID": {
                    "type": "string",
                    "description": "Message Id for failure response. By default it is 'null'"
                  },
                  "PasswordChangeHardHours": {
                    "type": "integer",
                    "description": "Hours before a user should be prompted to change an near to expiring password"
                  }
                },
                "description": "The user information is returned as the response to the API"
              },
              "success": {
                "type": "boolean",
                "description": "The success will be true or false"
              }
            },
            "description": "Return object for a successful API call."
          },
          "Error": {
            "type": "object",
            "properties": {
              "InvalidUserId": {
                "type": "string",
                "description": "User with given Id not found."
              }
            },
            "description": "Error message text on failure. Below message would be returned if provided user is invalid."
          }
        }
      },
      "TenantConfigResetPortalConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OAuth2ManCreateClientToken": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "AppID": {
                "type": "string",
                "description": "The application id."
              },
              "Tenant": {
                "type": "string",
                "description": "The tenant id."
              },
              "ClientSecret": {
                "type": "string",
                "description": "The client secret."
              },
              "ClientID": {
                "type": "string",
                "description": "The client id."
              },
              "Scopes": {
                "type": "array",
                "description": "The scopes of the token.",
                "items": {
                  "type": "string",
                  "description": "A scope."
                }
              }
            },
            "description": "A client token."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationCreateFederation": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The results of creating the federation."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SaasManageDeleteRoles": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicyDeletePolicyBlock": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the policy block delete succeed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "MobileDeleteDevice": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SaasManageIsApplicationAvailableInCatalog": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "False if app is not found in tenants application table OR appKey's template is not found in the global catalog. True otherwise"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityStartChallenge": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "success"
              },
              "MessageID": {
                "type": "string",
                "description": "MessageID"
              },
              "EventDescription": {
                "type": "string",
                "description": "EventDescription"
              },
              "TenantId": {
                "type": "string",
                "description": "The ID of the tenant to which the user is logging in. If this field is not provided, the username must identify the tenant. Ex: abc-123 "
              },
              "Challenges": {
                "type": "object",
                "properties": {
                  "Mechanisms": {
                    "type": "object",
                    "properties": {
                      "PromptSelectMech": {
                        "type": "string",
                        "description": "Prompt for the selected mechanism. Ex: If the selected mechanism is Password then then this field would have the value \u0093Password\u0094 on the UI. "
                      },
                      "PromptMechChosen": {
                        "type": "string",
                        "description": "Prompt for the chosen mechanism. Ex: If the chosen mechanism is Password then then this field would have the value \u0093Enter password\u0094 on the UI. "
                      },
                      "MechanismId": {
                        "type": "string",
                        "description": "This is a random generated ID that is used to identify the mechanism uniquely. This ID is provided in the request body for advance authentication API. "
                      },
                      "AnwerType": {
                        "type": "string",
                        "description": "The answer type for the given mechanism. Ex: If the mechanism is password, \u0093AnswerType\u0094 would be \u0093Answer\u0094 and If the mechanism is email, \u0093AnswerType\u0094 would be \u0093startOOB\u0094"
                      },
                      "Name": {
                        "type": "string",
                        "description": "The name of the MFA mechanism Ex: The name of the password mechanism is \u0093UP\u0094"
                      }
                    },
                    "description": "The list of MFA mechanisms that a user should select and respond"
                  }
                },
                "description": "The challenges consist of an array of MFA mechanisms out of which at least one MFA mechanism should be satisfied by the user to proceed further."
              },
              "Exception": {
                "type": "string",
                "description": "Exception"
              },
              "Version": {
                "type": "string",
                "description": "Version of the API Ex: v1.0 "
              },
              "Message": {
                "type": "string",
                "description": "Message"
              },
              "AllowLoginMfaCache": {
                "type": "boolean",
                "description": "Allows login MFA cache"
              },
              "ErrorID": {
                "type": "string",
                "description": "ErrorID"
              },
              "InnerExceptions": {
                "type": "string",
                "description": "InnerExceptions"
              },
              "SessionId": {
                "type": "string",
                "description": "This is a random generated ID that is used to identify the user session uniquely. This ID is provided in the request body for advance authentication API. "
              },
              "ErrorCode": {
                "type": "string",
                "description": "ErrorCode"
              },
              "RetryWaitingTime": {
                "type": "string",
                "description": "Retry waiting time"
              },
              "Summary": {
                "type": "string",
                "description": "Summary"
              },
              "IsSoftError": {
                "type": "string",
                "description": "IsSoftError"
              },
              "ClientHints": {
                "type": "object",
                "properties": {
                  "AllowPersist": {
                    "type": "boolean",
                    "description": "Allow Persistent cookies"
                  },
                  "PersistDefault": {
                    "type": "boolean",
                    "description": "Persist Default"
                  },
                  "AllowForgotPassword": {
                    "type": "boolean",
                    "description": "This Boolean flag specifies whether the user should be displayed with forgot password link"
                  },
                  "EndpointAuthenticationEnabled": {
                    "type": "boolean",
                    "description": "This Boolean flag specifies whether the endpoint authentication is enabled for the user. "
                  }
                },
                "description": "These client hints are displayed on the login form to the user."
              }
            },
            "description": "The below is the response received from the CyberArk Identity when the request to the API is successful. "
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SocialAuthMgmtResetAuthConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard Json Result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "MobileUpdateDevicePolicy": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "AclGetFileAces": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "List of access files.",
            "items": {
              "type": "object",
              "properties": {
                "Principal": {
                  "type": "string",
                  "description": "Entity with file access rights."
                },
                "PrincipalType": {
                  "type": "string",
                  "description": "The type of entity."
                },
                "PrincipalName": {
                  "type": "string",
                  "description": "The principal name."
                },
                "GrantStr": {
                  "type": "string",
                  "description": "The name of the right being granted."
                },
                "Grant": {
                  "type": "integer",
                  "description": "What right to grant."
                },
                "StartTime": {
                  "type": "string",
                  "description": "Start time of the access right."
                },
                "EndTime": {
                  "type": "string",
                  "description": "End time of the access right."
                },
                "AceID": {
                  "type": "string",
                  "description": "The access right id."
                },
                "Inherited": {
                  "type": "boolean",
                  "description": "Is inheritence being used (default=false)."
                },
                "ObjectType": {
                  "type": "string",
                  "description": "The object type."
                },
                "PrincipalObjectType": {
                  "type": "string",
                  "description": "The principal object type."
                }
              },
              "description": "An access file."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OrgGet": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ID": {
                "type": "string",
                "description": "ID of organization"
              },
              "Description": {
                "type": "string",
                "description": "description of organization"
              },
              "Name": {
                "type": "string",
                "description": "The name of organization"
              }
            },
            "description": "The organization unit."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UPRestCreateTagWithNoApp": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Whether the operation is successful or not."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicyGetPolicyBlock": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "RiskAnalysisLevels": {
                "type": "object",
                "properties": {},
                "description": "The risk analysis mapping."
              },
              "AuthProfiles": {
                "type": "array",
                "description": "A list of authentication profiles.",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              },
              "PolicyModifiers": {
                "type": "array",
                "description": "The policy modifiers.",
                "items": {
                  "type": "string"
                }
              },
              "RevStamp": {
                "type": "string",
                "description": "The policy revision stamp."
              },
              "RadiusClientList": {
                "type": "array",
                "description": "The list of radius clients.",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "description": "The policy block."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The policy block.\",\n                type: \"object\",\n                properties:\n                {\n                    AuthProfiles: { description: \"A list of authentication profiles.\", type: \"array\", items: { type: \"object\" } },\n                    RiskAnalysisLevels: { description: \"The risk analysis mapping.\", type: \"object\" },\n                    PolicyModifiers: { description: \"The policy modifiers.\", type: \"array\", items: { type: \"string\" } },\n                    RevStamp: { description: \"The policy revision stamp.\", type: \"string\" },\n                    RadiusClientList: { description: \"The list of radius clients.\", type: \"array\", items: { type: \"object\" } }\n                }\n            }\n            "
          }
        }
      },
      "CoreSetProxyIwaHostCertificateFile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "HttpPort": {
                "type": "integer",
                "description": "Hyper text transport port number."
              },
              "Port": {
                "type": "integer",
                "description": "Port number for the connector."
              },
              "WebProxyEnabled": {
                "type": "boolean",
                "description": "Should the web connector be enabled."
              },
              "CertThumbprint": {
                "type": "string",
                "description": "certificate thumbprint"
              },
              "WebProxyPort": {
                "type": "integer",
                "description": "The port used by the web connector."
              },
              "Enabled": {
                "type": "boolean",
                "description": "Is the connector enabled."
              },
              "IwaCheckTimeout": {
                "type": "integer",
                "description": "The Iwa timeout value to use."
              },
              "Name": {
                "type": "string",
                "description": "The proxies name."
              },
              "Hostname": {
                "type": "string",
                "description": "The host name of the connector."
              }
            },
            "description": "The connector that got its certificate set"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigSetAdvancedConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OrgUpdate": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantCnamesGet": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Resulting set contains Cname and type of Cname. Cname type can be one of following - System, Preferred, Other"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceCreateUserQuick": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "UUID of the created user."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CollectionGetCollectionReferences": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "List of set id's that refer to passedin id.",
            "items": {
              "type": "string",
              "description": "A set id."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UPRestGetResultantAppsForUser": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Shortcut": {
                "type": "boolean",
                "description": "Whether the application has been set for optional installation"
              },
              "Url": {
                "type": "string",
                "description": "Application Url"
              },
              "Description": {
                "type": "string",
                "description": "Application description"
              },
              "Category": {
                "type": "string",
                "description": "Application category"
              },
              "AdminTag": {
                "type": "string",
                "description": "Application admin tag"
              },
              "Name": {
                "type": "string",
                "description": "Application name"
              },
              "TemplateName": {
                "type": "string",
                "description": "Application template name"
              },
              "WebAppType": {
                "type": "string",
                "description": "Application web-app-type"
              },
              "PasswordIsSet": {
                "type": "boolean",
                "description": "Whether the password has been set"
              },
              "DisplayName": {
                "type": "string",
                "description": "Application display name"
              },
              "UsernameRO": {
                "type": "boolean",
                "description": "Whether user name is read-only"
              },
              "WebAppTypeDisplayName": {
                "type": "string",
                "description": "Display name of web-app-type"
              },
              "AppTypeDisplayName": {
                "type": "string",
                "description": "Display name of application type"
              },
              "AppType": {
                "type": "string",
                "description": "Application type"
              },
              "Intranet": {
                "type": "boolean",
                "description": "Whether the application is an intranet app"
              },
              "AppKey": {
                "type": "string",
                "description": "Application key"
              },
              "Automatic": {
                "type": "boolean",
                "description": "Whether the application has been set for automatic installation"
              },
              "Rank": {
                "type": "integer",
                "description": "Application rank"
              },
              "ID": {
                "type": "string",
                "description": "Application ID"
              },
              "Icon": {
                "type": "string",
                "description": "Path of application icon image"
              },
              "AccessList": {
                "type": "array",
                "description": "How user got acess to the application; each entry is a dictionary including 'Type' (User, Role), 'ID' (role/user UUID), and 'Name' (role name or 'User' if user is granted direct access)",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              },
              "Username": {
                "type": "string",
                "description": "Application username"
              }
            },
            "description": "A list of applications including how the user has access"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SchedulerHistoryGetJobReport": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The job report."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UPRestUploadSecuredItemIcon": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Whether the operation is successful or not."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "RolesTestDynamicRoleScript": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OAuth2Confirm": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "ActionResult from saving user confirmation."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"ActionResult from saving user confirmation.\", type: \"object\"\n            }\n            "
          }
        }
      },
      "GoogleDirectoryUpdateDirectoryServiceConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the directory service update work."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Did the directory service update work.\", type: \"boolean\"\n            }\n            "
          }
        }
      },
      "ServerManageSetAdministrativeAccounts": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigGetEditableMessageTemplates": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of editable message templates.",
            "items": {
              "type": "object",
              "properties": {
                "Name": {
                  "type": "string",
                  "description": "The message template name."
                },
                "Type": {
                  "type": "string",
                  "description": "The message template type."
                },
                "TemplateName": {
                  "type": "string",
                  "description": "The template name."
                },
                "DisplayType": {
                  "type": "string",
                  "description": "The message template display type."
                },
                "ModifiedLanguages": {
                  "type": "array",
                  "description": "A list of languages available for the message template.",
                  "items": {
                    "type": "string"
                  }
                },
                "Substitutions": {
                  "type": "array",
                  "description": "A list of substitutable templates.",
                  "items": {
                    "type": "object",
                    "properties": {}
                  }
                }
              },
              "description": "An editable message template."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetConnectorLog4NetConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "a DataEntity containing:"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtCheckUserProfileChallenge": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "AuthProfileSaveProfile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Challenges": {
                "type": "array",
                "description": "Selected authentication mechanisms.",
                "items": {
                  "type": "string"
                }
              },
              "AdditionalData": {
                "type": "object",
                "properties": {},
                "description": "DataEntity with additional data (default=null)."
              },
              "Uuid": {
                "type": "string",
                "description": "Profile UUID."
              },
              "SingleChallengeMechanisms": {
                "type": "string",
                "description": "Selected single authentication mechanisms."
              },
              "DurationInMinutes": {
                "type": "integer",
                "description": "How many minutes the profile is valid."
              },
              "Name": {
                "type": "string",
                "description": "Profile name."
              }
            },
            "description": "An authentication profile."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SocialAuthMgmtGetAllCustomConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of identity provider configurations.",
            "items": {
              "type": "object",
              "properties": {},
              "description": "An identity profider configuration."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "RadiusRemoveClients": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "RemovedClients": {
                "type": "array",
                "description": "List of removed clients",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              },
              "Removed": {
                "type": "integer",
                "description": "Total clients removed"
              }
            },
            "description": "Remove clients result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationGetFederationGroupAssertionMappings": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The federation group assertion mappings."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The federation group assertion mappings.\", type: \"object\"\n            }\n            "
          }
        }
      },
      "OAuth2PlatformToken": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "expires_in": {
                "type": "integer",
                "description": "How long is the token good."
              },
              "scope": {
                "type": "string",
                "description": "The scope of the token."
              },
              "access_token": {
                "type": "string",
                "description": "The token unique identifier."
              },
              "token_type": {
                "type": "string",
                "description": "The type of token."
              },
              "id_token": {
                "type": "string",
                "description": "The token id."
              },
              "refresh_token": {
                "type": "string",
                "description": "The token refresh."
              },
              "state": {
                "type": "string",
                "description": "The state of the token."
              }
            },
            "description": "The token"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "AclGetRowAcesHelper": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "GoogleDirectoryGetAuthTokenState": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The IDP authorization state."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The IDP authorization state.\", type: \"object\"\n            }\n            "
          }
        }
      },
      "MobileGetGlobalDevicePermissions": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Rights": {
                "type": "string",
                "description": "list of permissions"
              },
              "Principal": {
                "type": "string",
                "description": "User name or role name"
              },
              "PrincipalId": {
                "type": "string",
                "description": "Uuid of the principal"
              },
              "PType": {
                "type": "string",
                "description": "Principal type: User, Role,.. "
              }
            },
            "description": "List of permissions"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreDeleteFiles": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of files and the result of their deletion attempt.",
            "items": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "description": "Result of the file delete attempt."
                },
                "path": {
                  "type": "string",
                  "description": "The file acted upon."
                },
                "PermissionException": {
                  "type": "boolean",
                  "description": "Was there a permission exception."
                },
                "Exception": {
                  "type": "string",
                  "description": "The exception text."
                }
              },
              "description": "A file and its deletion attempt result."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicyAddAuthPolicyModifier": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the policy modifier get added."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Did the policy modifier get added.\", type: \"boolean\"\n            }\n            "
          }
        }
      },
      "ExtDataSetColumns": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the extended column value get set."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerAgentGetAllEnrollmentCodes": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "NeverExpire": {
                "type": "boolean",
                "description": "Enrollment code never expires"
              },
              "MaxUseCount": {
                "type": "integer",
                "description": "The number of times allowed to enroll using this enrollment code"
              },
              "IPRange": {
                "type": "array",
                "description": "List of IP ranges for the enrollment code",
                "items": {
                  "type": "string"
                }
              },
              "Description": {
                "type": "string",
                "description": "Description of the enrollment code"
              },
              "NoMaxUseCount": {
                "type": "boolean",
                "description": "No limit on the number of times allowed to enroll using this enrollment code"
              },
              "UseCount": {
                "type": "integer",
                "description": "The number of times already enrolled using this enrollment code"
              },
              "ConnectorName": {
                "type": "array",
                "description": "List of Connector Name for the enrollment code",
                "items": {
                  "type": "string"
                }
              },
              "OwnerID": {
                "type": "string",
                "description": "ID of the owner of the enrollment code"
              },
              "SetID": {
                "type": "array",
                "description": "List of Set ID for the enrollment code",
                "items": {
                  "type": "string"
                }
              },
              "OwnerType": {
                "type": "string",
                "description": "Type of the owner of the enrollment code"
              },
              "EnrollmentCode": {
                "type": "string",
                "description": "ID of the enrollment code"
              },
              "ExpiryDate": {
                "type": "string",
                "description": "The expiry date of the enrollment code"
              },
              "Owner": {
                "type": "string",
                "description": "Name of the owner of the enrollment code"
              },
              "ConnectorID": {
                "type": "array",
                "description": "List of Connector ID for the enrollment code",
                "items": {
                  "type": "string"
                }
              },
              "SetName": {
                "type": "array",
                "description": "List of Set Name for the enrollment code",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": "A list of enrollment codes for this tenant"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerManageSetAccountPermissions": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "U2fDeleteU2fDevices": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ZsoIsSessionAuthenticated": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the session authenticate."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerManageDeleteAccount": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "True , If the resource is deleted successfully"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetReportsDirectoryContents": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Parameters": {
                "type": "string",
                "description": "What parameters to use."
              },
              "Query": {
                "type": "string",
                "description": "Query used to find the files."
              },
              "Map": {
                "type": "boolean",
                "description": "Is there a map (default=false)."
              },
              "Description": {
                "type": "string",
                "description": "The file contents description."
              },
              "Name": {
                "type": "string",
                "description": "File name."
              }
            },
            "description": "A file extension filtered list of files found in the path."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "LDAPDirectoryServiceSetScriptingPropertyToAttributeMappings": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The requested property to attribute mapping."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtUpdateSecurityQuestions": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ErrorID": {
                "type": "string",
                "description": "Error ID if any error is received from the API. By default it is 'null'"
              },
              "ErrorCode": {
                "type": "string",
                "description": "Error code if any error is received from the API. By default it is 'null'"
              },
              "Exception": {
                "type": "string",
                "description": "Exception message if any exception is received from the API. By default it is 'null'"
              },
              "MessageID": {
                "type": "string",
                "description": "Message Id for failure response. By default it is 'null'"
              },
              "Result": {
                "type": "string",
                "description": "The result will be null."
              },
              "InnerExceptions": {
                "type": "string",
                "description": "InnerExceptions"
              },
              "Message": {
                "type": "string",
                "description": "Error message for failure response. By default it is 'null'"
              },
              "success": {
                "type": "boolean",
                "description": "The success will be true or false."
              },
              "IsSoftError": {
                "type": "boolean",
                "description": "SoftError if true indicates this is not actually an exception but an UI warning popup."
              }
            },
            "description": "Return object for a successful API call."
          },
          "Error": {
            "type": "object",
            "properties": {
              "InvalidQuestion": {
                "type": "string",
                "description": "The error message is displayed when the security question update fails. You see an error message as below 'Security question update failed.'"
              }
            },
            "description": "Error message text on failure."
          }
        }
      },
      "UserMgmtSendLoginEmails": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ExtDataSetColumn": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the extended column value get set."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigSetPasswordPersistance": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceStandardJsonResultWithPermissionCheck": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "The result of the action."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "DeviceEnrollAndroidDevice": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ErrorCode": {
                "type": "string",
                "description": "Error code if enrollment fails"
              },
              "Status": {
                "type": "string",
                "description": "Status of the enrollment"
              },
              "WelcomePageInfo": {
                "type": "object",
                "properties": {
                  "IconBackgroundColor": {
                    "type": "string",
                    "description": "Background color of the company icon"
                  },
                  "WelcomeUserName": {
                    "type": "string",
                    "description": "User name of the enrolled user"
                  },
                  "IconUrl": {
                    "type": "string",
                    "description": "Url of the company icon"
                  },
                  "Icon": {
                    "type": "string",
                    "description": "Company icon"
                  },
                  "WelcomeText": {
                    "type": "string",
                    "description": "Welcome text to show to the user"
                  }
                },
                "description": "Information to show to user after enrollment"
              },
              "UserCert": {
                "type": "string",
                "description": "Unique certificate created againt the user"
              },
              "Message": {
                "type": "string",
                "description": "Error Message if enrollment fails"
              }
            },
            "description": "Enrollment Details"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtSetCloudLock": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ErrorID": {
                "type": "string",
                "description": "Error ID if any error is received from the API. By default it is 'null'"
              },
              "ErrorCode": {
                "type": "string",
                "description": "Error code if any error is received from the API. By default it is 'null'"
              },
              "Exception": {
                "type": "string",
                "description": "Exception message if any exception is received from the API. By default it is 'null'"
              },
              "MessageID": {
                "type": "string",
                "description": "Message Id for failure response. By default it is 'null'"
              },
              "Result": {
                "type": "string",
                "description": "The result will be null."
              },
              "InnerExceptions": {
                "type": "string",
                "description": "InnerExceptions"
              },
              "Message": {
                "type": "string",
                "description": "Error message for failure response. By default it is 'null'"
              },
              "success": {
                "type": "boolean",
                "description": "The success will be true or false."
              },
              "IsSoftError": {
                "type": "boolean",
                "description": "SoftError if true indicates this is not actually an exception but an UI warning popup."
              }
            },
            "description": "Return object for a successful API call."
          },
          "Error": {
            "type": "object",
            "properties": {
              "InvalidUserId": {
                "type": "string",
                "description": "User with given Id not found."
              }
            },
            "description": "Error message text on failure."
          }
        }
      },
      "CoreUpdateProxyIwaSettings": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "HttpPort": {
                "type": "integer",
                "description": "Hyper text transport port number."
              },
              "Port": {
                "type": "integer",
                "description": "Port number for the connector."
              },
              "WebProxyEnabled": {
                "type": "boolean",
                "description": "Should the web connector be enabled."
              },
              "CertThumbprint": {
                "type": "string",
                "description": "Certificate thumbprint."
              },
              "WebProxyPort": {
                "type": "integer",
                "description": "The port used by the web connector."
              },
              "Enabled": {
                "type": "boolean",
                "description": "Is the connector enabled."
              },
              "IwaCheckTimeout": {
                "type": "integer",
                "description": "The Iwa timeout value to use."
              },
              "Name": {
                "type": "string",
                "description": "The proxies name."
              },
              "Hostname": {
                "type": "string",
                "description": "The host name of the connector."
              }
            },
            "description": "The connector that got set."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SocialAuthMgmtGetAuthConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "EnableMicrosoftLogin": {
                "type": "boolean",
                "description": "Is Microsoft login enabled."
              },
              "Version": {
                "type": "string",
                "description": "The configuration version."
              },
              "EnableTwitterLogin": {
                "type": "boolean",
                "description": "Is Twitter login enabled."
              },
              "EnableGoogleLogin": {
                "type": "boolean",
                "description": "Is Google login enabled."
              },
              "EnableLinkedInLogin": {
                "type": "boolean",
                "description": "Is LinkedIn login enabled."
              },
              "EnableFacebookLogin": {
                "type": "boolean",
                "description": "Is Facebook login enabled."
              }
            },
            "description": "The social user authentication configuration."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreDeleteDirectory": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Was the folder removal successful."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PpmGetScriptWithMetadata": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SysInfoAbout": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "CompanyName": {
                "type": "string",
                "description": "The system company name."
              },
              "TermsOfUseLink": {
                "type": "string",
                "description": "The system terms of use link."
              },
              "PodRegion": {
                "type": "string",
                "description": "The system region."
              },
              "PodName": {
                "type": "string",
                "description": "The system pod name."
              },
              "Version": {
                "type": "string",
                "description": "The system version."
              },
              "PortalImage": {
                "type": "string",
                "description": "The system image."
              },
              "HostName": {
                "type": "string",
                "description": "The system host name."
              },
              "LicensedTo": {
                "type": "string",
                "description": "The system on premises licensed to."
              },
              "PodFqdn": {
                "type": "string",
                "description": "The system Fqdn."
              },
              "PrivacyPolicyLink": {
                "type": "string",
                "description": "The system privacy policy link."
              },
              "OnPremCompanyName": {
                "type": "string",
                "description": "The system on premises company name."
              },
              "OnPremLicenseKey": {
                "type": "string",
                "description": "The system on premises license key."
              }
            },
            "description": "The system information."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OathGetProfileList": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CollectionUpdateCollection": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Success or failure of the set update."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OathAddOrUpdateProfile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreAddPremDetectRange": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the IP range add succeed."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Did the IP range add succeed.\", type: \"boolean\"\n            }\n            "
          }
        }
      },
      "SecurityOnDemandChallenge": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Login success (or error) message or an Authentication package to guide client through the MFA process."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtGetUserCertificateInfo": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "User certificate information.  Dictionary of string key to string value, where keys are the certificate thumbprint and values are the certificate type."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "IdentityProofingGetIdentityProofingInfoByUser": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ExternalCaMgmtDownloadCertAuthority": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "A file containing the certificate authority."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ZsoIsMacSafariZsoCookieSet": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Is the Mac Safari Zso cookie set."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetDefaultGlobalAppSigningCert": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The public part of the global signing certificate."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreCreateTenantReportsDirectory": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Was the folder add successful."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicyGetPolicyMetaData": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of meta data.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "LDAPDirectoryServiceGetCloudConnectors": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of LDAP enabled cloud connectors for the tenant.",
            "items": {
              "type": "object",
              "properties": {
                "proxyName": {
                  "type": "string",
                  "description": "The name of the connector."
                },
                "name": {
                  "type": "string",
                  "description": "The machine name."
                },
                "version": {
                  "type": "string",
                  "description": "The connectors version."
                },
                "lastPing": {
                  "type": "string",
                  "description": "The last time the connector was seen on the network."
                },
                "proxyId": {
                  "type": "string",
                  "description": "The connectors unique identifier."
                }
              },
              "description": "A cloud connector"
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "AclGetEffectiveDirRights": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of directory rights.",
            "items": {
              "type": "object",
              "properties": {
                "Path": {
                  "type": "string",
                  "description": "The directory name."
                },
                "GrantStr": {
                  "type": "string",
                  "description": "The right being granted."
                }
              },
              "description": "A directory right."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "LDAPDirectoryServiceSetPropertyToAttributeMappings": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the property to attribute mapping get set."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CollectionGetBucketContents": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "All attributes of the bucket."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "LDAPDirectoryServiceDeleteLDAPDirectoryServiceConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The LDAP service that was just removed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtUpdateUserPreferences": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtGetCachedUser": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Uuid": {
                "type": "string",
                "description": "The user unique identifier."
              },
              "Email": {
                "type": "string",
                "description": "The user email address."
              },
              "CanonicalName": {
                "type": "string",
                "description": "The user canonical name."
              },
              "Sid": {
                "type": "string",
                "description": "The user sid."
              },
              "DistinguishedName": {
                "type": "string",
                "description": "The user distinguished name."
              },
              "type": {
                "type": "string",
                "description": "The user classification."
              },
              "SamAccountName": {
                "type": "string",
                "description": "The user sam account name."
              }
            },
            "description": "The cached user."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The cached user.\", \n                type: \"object\",\n                properties:\n                {\n                    type: { description: \"The user classification.\", type: \"string\" },\n                    Uuid: { description: \"The user unique identifier.\", type: \"string\" },\n                    CanonicalName: { description: \"The user canonical name.\", type: \"string\" },\n                    DistinguishedName: { description: \"The user distinguished name.\", type: \"string\" },\n                    Email: { description: \"The user email address.\", type: \"string\" },\n                    Sid: { description: \"The user sid.\", type: \"string\" },\n                    SamAccountName:  { description: \"The user sam account name.\", type: \"string\" }\n                }\n            }\n            "
          }
        }
      },
      "SecurityChallengeUser": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ErrorID": {
                "type": "string",
                "description": "ErrorID"
              },
              "ErrorCode": {
                "type": "string",
                "description": "ErrorID"
              },
              "MessageID": {
                "type": "string",
                "description": "MessageID"
              },
              "Result": {
                "type": "object",
                "properties": {
                  "ChallengeId": {
                    "type": "string",
                    "description": "This is a random generated ID that is used to identify the challenge (Authentication profile) uniquely.  "
                  }
                },
                "description": "The result received from the Identity cloud. "
              },
              "InnerExceptions": {
                "type": "string",
                "description": "ErrorID"
              },
              "Message": {
                "type": "string",
                "description": "Message"
              },
              "success": {
                "type": "boolean",
                "description": "Success "
              },
              "IsSoftError": {
                "type": "string",
                "description": "ErrorID"
              }
            },
            "description": "Below is the response structure if the API request is successful."
          },
          "Error": {
            "type": "object",
            "properties": {
              "AuthCookie": {
                "type": "string",
                "description": "AThreadDescriptor AuthCookie is null"
              },
              "InvalidProfileName": {
                "type": "string",
                "description": "The profile name cannot be identified by the CyberArk Identity."
              },
              "InvalidArguments": {
                "type": "string",
                "description": "Invalid arguments passed to the server. "
              },
              "NullArguments": {
                "type": "string",
                "description": "Unexpected null arguments passed to the server."
              }
            },
            "description": "Below is the list of errors received by the API."
          }
        }
      },
      "CDirectoryServiceSubmitUploadedFile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Success or failure of job creation."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicyGetOathOtpClientName": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The oath otp client name."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigGetAdminSecurityQuestion": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ErrorID": {
                "type": "string",
                "description": "Error ID if any error is received from the API. By default it is 'null'"
              },
              "ErrorCode": {
                "type": "string",
                "description": "Error code if any error is received from the API. By default it is 'null'"
              },
              "Exception": {
                "type": "string",
                "description": "Exception message if any exception is received from the API. By default it is 'null'"
              },
              "MessageID": {
                "type": "string",
                "description": "Message Id for failure response. By default it is 'null'"
              },
              "Result": {
                "type": "object",
                "properties": {
                  "Culture": {
                    "type": "string",
                    "description": "Culture of the question, 'all' implies all cultures"
                  },
                  "Uuid": {
                    "type": "string",
                    "description": "The unique ID of the security question created by the admin"
                  },
                  "Question": {
                    "type": "string",
                    "description": "The text of the admin setup security question Ex: What is your birthplace?"
                  }
                },
                "description": "Details of the admin security question."
              },
              "InnerExceptions": {
                "type": "string",
                "description": "InnerExceptions"
              },
              "Message": {
                "type": "string",
                "description": "Error message for failure response. By default it is 'null'"
              },
              "success": {
                "type": "boolean",
                "description": "The success will be true or false"
              },
              "IsSoftError": {
                "type": "boolean",
                "description": "SoftError if true indicates this is not actually an exception but an UI warning popup."
              }
            },
            "description": "Return object for a successful API call."
          },
          "Error": {
            "type": "object",
            "properties": {
              "InvalidQuestionId": {
                "type": "string",
                "description": "This error message is displayed for invalid question ID. Error message displayed 'The requested data or its dependent data was not found in the service.'"
              }
            },
            "description": "Error message text on failure."
          }
        }
      },
      "UserMgmtUncacheUserPreferences": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the user preferences cache get flushed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OrgTaskCheck": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "HasGlobalRight": {
                "type": "boolean",
                "description": "Whether current user have right to perform task on global objects."
              },
              "ManagingOrganizations": {
                "type": "array",
                "description": "List or organization units that current user have right to perform the specific task",
                "items": {
                  "type": "object",
                  "properties": {
                    "ID": {
                      "type": "string",
                      "description": "ID of organization"
                    },
                    "Path": {
                      "type": "string",
                      "description": "The full path of organization"
                    },
                    "Description": {
                      "type": "string",
                      "description": "description of organization"
                    },
                    "Name": {
                      "type": "string",
                      "description": "The name of organization"
                    }
                  },
                  "description": "The organization unit."
                }
              }
            },
            "description": "The result."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreStartService": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the service start."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtDirectoryServiceQuery": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Exceptions": {
                "type": "object",
                "properties": {
                  "Roles": {
                    "type": "string",
                    "description": "Exception for role query"
                  },
                  "Group": {
                    "type": "string",
                    "description": "Exception for group query"
                  },
                  "User": {
                    "type": "string",
                    "description": "Exception for user query"
                  }
                },
                "description": "Any exceptions that occurred"
              },
              "Roles": {
                "type": "object",
                "properties": {},
                "description": "Query results for role query"
              },
              "Group": {
                "type": "object",
                "properties": {},
                "description": "Query results for group query"
              },
              "User": {
                "type": "object",
                "properties": {},
                "description": "Query results for user query"
              }
            },
            "description": "Query results"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantCnamesSetPreferred": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "status of operation"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigSetTelephonyCreditsNotificationConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ExternalCaMgmtGetCertAuthorities": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of certificate authorities for the tenant.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreAssignDirectoryRightsToRoles": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "The result of the rights assignemt."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "MobileWipeDevice": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SaasManageStoreRole": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Role UUID"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "WinDpaSetDpaConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreDisableBlockedIpRange": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigSetTwilioConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreDelBlockedIpRange": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did removing the blocked IP range succeed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "LDAPDirectoryServiceGetPropertyToAttributeMappings": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The requested property to attribute mapping."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "RolesStoreRole": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Role UUID"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreDeleteBlockedIpRange": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did removing the blocked IP range succeed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreListDirectory": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "List of files",
            "items": {
              "type": "string"
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtGetUsersRolesAndAdministrativeRights": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "\n             Standard Redrock data format, with the following columns:\n                 ID : The role UUID\n                 Name: The role name\n                 Description: The role description\n                 AdministrativeRights : List of objects that have\n                   Description: localized name of the administrative right\n                   Path: file that describes the administrative right\n            \n                 ** Obsolete columns - Exist for backward compatibility **\n                 Role : The role UUID\n                 RoleName: The role name\n             "
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtResetUserPassword": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ErrorID": {
                "type": "string",
                "description": "Error ID if any error is received from the API. By default it is 'null'"
              },
              "ErrorCode": {
                "type": "string",
                "description": "Error code if any error is received from the API. By default it is 'null'"
              },
              "Exception": {
                "type": "string",
                "description": "Exception message if any exception is received from the API. By default it is 'null'"
              },
              "MessageID": {
                "type": "string",
                "description": "Message Id for failure response. By default it is 'null'"
              },
              "Result": {
                "type": "string",
                "description": "The result will be null."
              },
              "InnerExceptions": {
                "type": "string",
                "description": "InnerExceptions"
              },
              "Message": {
                "type": "string",
                "description": "Error message for failure response. By default it is 'null'"
              },
              "success": {
                "type": "boolean",
                "description": "The success will be true or false."
              },
              "IsSoftError": {
                "type": "boolean",
                "description": "SoftError if true indicates this is not actually an exception but an UI warning popup."
              }
            },
            "description": "Return object for a successful API call."
          },
          "Error": {
            "type": "object",
            "properties": {
              "InvalidPassword": {
                "type": "string",
                "description": "Password update failed. Please make sure the password meet the complexity requirements. Password must be at least 8 characters long not be longer than 64 characters contain at least one digit contain at least one upper and one lower case letter"
              },
              "InvalidUserId": {
                "type": "string",
                "description": "User with given unique ID doesn’t exist."
              }
            },
            "description": "Error message text on failure."
          }
        }
      },
      "PolicyPolicyChecks": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of policies for the device.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SaasManageUpdateRole": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerManageCheckoutPassword": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Password": {
                "type": "string",
                "description": "Password in plain text format"
              },
              "COID": {
                "type": "string",
                "description": "ID for the checkout"
              }
            },
            "description": "ID for for the checkout and the password text"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OrgGetAdministrators": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "List of administrators in redrock result format"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigGetAdminSecurityQuestions": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ErrorID": {
                "type": "string",
                "description": "Error ID if any error is received from the API. By default it is 'null'"
              },
              "ErrorCode": {
                "type": "string",
                "description": "Error code if any error is received from the API. By default it is 'null'"
              },
              "Exception": {
                "type": "string",
                "description": "Exception message if any exception is received from the API. By default it is 'null'"
              },
              "MessageID": {
                "type": "string",
                "description": "Message Id for failure response. By default it is 'null'"
              },
              "Result": {
                "type": "object",
                "properties": {
                  "Culture": {
                    "type": "string",
                    "description": "Culture of the question, 'all' implies all cultures"
                  },
                  "Uuid": {
                    "type": "string",
                    "description": "The unique ID of the security question created by the admin"
                  },
                  "Question": {
                    "type": "string",
                    "description": "The text of the admin setup security question Ex: What is your birthplace?"
                  }
                },
                "description": "Details of the admin security question."
              },
              "InnerExceptions": {
                "type": "string",
                "description": "InnerExceptions"
              },
              "Message": {
                "type": "string",
                "description": "Error message for failure response. By default it is 'null'"
              },
              "success": {
                "type": "boolean",
                "description": "The success will be true or false"
              },
              "IsSoftError": {
                "type": "boolean",
                "description": "IsSoftError"
              }
            },
            "description": "The response contains the details of all the admin security questions."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OathResetCentrifyOathProfile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the profile get reset."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Did the profile get reset.\", type: \"boolean\"\n            }\n            "
          }
        }
      },
      "WinDpaSetDpaAdmin": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OrgDelete": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "true"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "LDAPDirectoryServiceGetLDAPDirectoryServiceUuidByName": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The UUID of the requested directory service, or an empty string if not found."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OAuth2Token": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "expires_in": {
                "type": "integer",
                "description": "How long is the token good"
              },
              "scope": {
                "type": "string",
                "description": "The scope of the token"
              },
              "access_token": {
                "type": "string",
                "description": "The token unique identifier"
              },
              "token_type": {
                "type": "string",
                "description": "The type of token"
              },
              "id_token": {
                "type": "string",
                "description": "The token Id"
              },
              "refresh_token": {
                "type": "string",
                "description": "The token refresh"
              },
              "state": {
                "type": "string",
                "description": "The state of the token"
              }
            },
            "description": "The response object consists of below properties"
          },
          "Error": {
            "type": "object",
            "properties": {
              "InvalidClientId": {
                "type": "string",
                "description": "pending oauth ClientId does not match current ClientId"
              },
              "InvalidAuthRequest": {
                "type": "string",
                "description": "auth mode not allowed"
              },
              "UnAuthorized": {
                "type": "string",
                "description": "Invalid user request"
              },
              "MisMatchedURI": {
                "type": "string",
                "description": "pending redirect uri does not match current redirect uri "
              },
              "InvalidScope": {
                "type": "string",
                "description": "unknown scope requested"
              },
              "InvalidTokenRequest": {
                "type": "string",
                "description": "unknown token"
              },
              "AccessDenied": {
                "type": "string",
                "description": "Invalid client creds or client not allowed"
              },
              "InvalidRequest": {
                "type": "string",
                "description": "unknown app"
              },
              "InvalidRedirectURI": {
                "type": "string",
                "description": "current req redirect uri is expected to be empty but it is actually not"
              },
              "InvalidToken": {
                "type": "string",
                "description": "Wrong type of token (not refresh token)"
              },
              "InvalidAuthPublicRequest": {
                "type": "string",
                "description": "auth mode not allowed (public client)"
              }
            },
            "description": "The below error message is displayed incase of failure"
          }
        }
      },
      "LDAPDirectoryServiceVerifyLDAPDirectoryServiceConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the LDAP directory service config verify."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OrgUpdateAdministrators": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OathResetCloudOathProfile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the profile get reset."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Did the profile get reset.\", type: \"boolean\"\n            }\n            "
          }
        }
      },
      "CoreGetDirectoryRolesAndRights": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "Role and rights for a directory.",
            "items": {
              "type": "object",
              "properties": {
                "Role": {
                  "type": "string",
                  "description": "The directory ace principal."
                },
                "Rights": {
                  "type": "string",
                  "description": "The rights the principal has."
                }
              },
              "description": "A directory role and right."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SaasManageSetApplicationPermissions": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "this function returns nothing"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityLogin": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the user login succeed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetAssignedAdministrativeRights": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "\n             Standard Redrock data format, with the following columns:\n                 Description : localized name of the administrative right\n                 Path : The file that describes the administrative right\n            \n             "
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "JobFlowGetJobs": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "List of job records",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TaskEmailReport": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The unique identifier from the email send job."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OathDeleteProfiles": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Were the profiles deleted."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtGetUserPreferences": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The user preferences."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "HealthCheck": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "200 on yes, 503 on no, and a report."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationGetFederatedGroupsForUser": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The list of Federated Groups that the user is a member of."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityStartQRCodeAuthentication": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Login success (or error) message or an Authentication package to guide client through the MFA process."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceDeleteUser": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationDeleteFederation": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the federation get removed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "MobileDeleteApnsCertForClientApp": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard Success result based on the successful deletion"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OrgCreate": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ID": {
                "type": "string",
                "description": "ID of organization"
              },
              "Description": {
                "type": "string",
                "description": "description of organization"
              },
              "Name": {
                "type": "string",
                "description": "The name of organization"
              }
            },
            "description": "The organization unit."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "RolesGetRoleMembers": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Guid": {
                "type": "string",
                "description": "Principal UUID"
              },
              "Type": {
                "type": "string",
                "description": "Principal type, one of 'User', 'Group', or 'Role'"
              },
              "Name": {
                "type": "string",
                "description": "Principal name"
              }
            },
            "description": "Role principal list (each list entry has these properties)"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreStopService": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the service stop."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityGetOneTimePassword": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The password."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerAgentEnableFeaturesV2": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "FeatureAAPM": {
                "type": "object",
                "properties": {},
                "description": "Whether the AAPM feature was changed or enabled: "
              },
              "Warnings": {
                "type": "array",
                "description": "A list of warning messages for things like unrecognized features, or an empty list to represent no warnings.",
                "items": {
                  "type": "string"
                }
              },
              "FeatureAgentAuth": {
                "type": "object",
                "properties": {},
                "description": "Whether the Agent Auth feature was changed or enabled: "
              }
            },
            "description": "The result of enabling the feature."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtSetSecurityQuestion": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "LDAPDirectoryServiceGetScriptingPropertyToAttributeMappings": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The scripting property to attribute mapping."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtResetSecurityQuestions": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ErrorID": {
                "type": "string",
                "description": "Error ID if any error is received from the API. By default it is 'null'"
              },
              "ErrorCode": {
                "type": "string",
                "description": "Error code if any error is received from the API. By default it is 'null'"
              },
              "Exception": {
                "type": "string",
                "description": "Exception message if any exception is received from the API. By default it is 'null'"
              },
              "MessageID": {
                "type": "string",
                "description": "Message Id for failure response. By default it is 'null'"
              },
              "Result": {
                "type": "string",
                "description": "The result will be null."
              },
              "InnerExceptions": {
                "type": "string",
                "description": "InnerExceptions"
              },
              "Message": {
                "type": "string",
                "description": "Error message for failure response. By default it is 'null'"
              },
              "success": {
                "type": "boolean",
                "description": "The success will be true or false."
              },
              "IsSoftError": {
                "type": "boolean",
                "description": "SoftError if true indicates this is not actually an exception but an UI warning popup."
              }
            },
            "description": "Return object for a successful API call."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "RolesSetDynamicRoleScript": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtIsUserSubjectToCloudLocks": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtSendLoginEmail": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationGetGlobalGroupAssertionMappings": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of group assertion mappings.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CollectionSetCollectionPermissions": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "This function returns nothing."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreNotifyEnvironment": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "Message showing the connector Uuid and UTC time NotifyEnvironment was called."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Message showing the connector Uuid and UTC time NotifyEnvironment was called.\", type: \"string\"\n            }\n            "
          }
        }
      },
      "UPRestGetUPData": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Shortcut": {
                "type": "boolean",
                "description": "Whether the application has been set for optional installation"
              },
              "_RowKey": {
                "type": "string",
                "description": "Application ID"
              },
              "Url": {
                "type": "string",
                "description": "Application Url"
              },
              "Description": {
                "type": "string",
                "description": "Application description"
              },
              "Category": {
                "type": "string",
                "description": "Application category"
              },
              "AdminTag": {
                "type": "string",
                "description": "Application admin tag"
              },
              "Name": {
                "type": "string",
                "description": "Application name"
              },
              "TemplateName": {
                "type": "string",
                "description": "Application template name"
              },
              "WebAppType": {
                "type": "string",
                "description": "Application web-app-type"
              },
              "PasswordIsSet": {
                "type": "boolean",
                "description": "Whether the password has been set"
              },
              "DisplayName": {
                "type": "string",
                "description": "Application display name"
              },
              "UsernameRO": {
                "type": "boolean",
                "description": "Whether user name is read-only"
              },
              "WebAppTypeDisplayName": {
                "type": "string",
                "description": "Display name of web-app-type"
              },
              "Personal": {
                "type": "boolean",
                "description": "Whether the application is a self-service application."
              },
              "AppTypeDisplayName": {
                "type": "string",
                "description": "Display name of application type"
              },
              "AppType": {
                "type": "string",
                "description": "Application type"
              },
              "Intranet": {
                "type": "boolean",
                "description": "Whether the application is an intranet app"
              },
              "AppKey": {
                "type": "string",
                "description": "Application key"
              },
              "Automatic": {
                "type": "boolean",
                "description": "Whether the application has been set for automatic installation"
              },
              "Rank": {
                "type": "integer",
                "description": "Application rank"
              },
              "Icon": {
                "type": "string",
                "description": "Path of application icon image"
              },
              "Username": {
                "type": "string",
                "description": "Application username"
              }
            },
            "description": "A list of applications"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SaasManageRemoveUsersAndGroupsFromRole": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationSPSigningCertificateAuthority": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The SP signing certificate authority."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceGrantAccess": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Uuid": {
                "type": "string",
                "description": "Support user UUID"
              },
              "AuthUrl": {
                "type": "string",
                "description": "If 'SendEmail' in request is false, this property will contain the Auth URL that would have been in the email."
              },
              "PasswordExp": {
                "type": "string",
                "description": "Support user expire date",
                "format": "date-time"
              },
              "Name": {
                "type": "string",
                "description": "Support user name"
              }
            },
            "description": "Support user information"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OrgChangeMemberShip": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityAnswerOOBChallenge": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Redirect to answer challenge page."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "MobileReapplyDevicePolicy": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "MobileSetPrimaryDevice": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerAgentUnenroll": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Unenrollment Status"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicySavePolicyBlock3": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response, with error information on failure."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtSignOutEverywhere": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtIsUserLockedOutByPolicy": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "True if the user is locked out (i.e. cannot answer MFA challenges), false otherwise."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantCnamesGetDomainInfo": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Resulting set contains the domain of the tenant url"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigGetTelephonyCreditsNotificationConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Threshold": {
                "type": "integer",
                "description": "Threshold"
              },
              "Emails": {
                "type": "string",
                "description": "Emails"
              }
            },
            "description": "The tenant Telephony Credits Notification configuration."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "AuthProfileGetProfileList": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "List of Authentication profiles.",
            "items": {
              "type": "object",
              "properties": {
                "Uuid": {
                  "type": "string",
                  "description": "Profile UUID."
                },
                "Name": {
                  "type": "string",
                  "description": "Profile name."
                },
                "DurationInMinutes": {
                  "type": "integer",
                  "description": "How many minutes the profile is valid."
                },
                "Challenges": {
                  "type": "array",
                  "description": "Selected authentication mechanisms.",
                  "items": {
                    "type": "string"
                  }
                },
                "SingleChallengeMechanisms": {
                  "type": "string",
                  "description": "Selected single authentication mechanisms."
                },
                "AdditionalData": {
                  "type": "object",
                  "properties": {},
                  "description": "DataEntity with additional data (default=null)."
                }
              },
              "description": "An Authentication profile."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "StaticVfsGetFile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The file."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The file.\", type: \"object\"\n            }\n            "
          }
        }
      },
      "TenantConfigSetMobileConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetZsoCertAuthority": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "ActionResult describing the Zso certificate."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityStartForgotUsername": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "An Authentication package to guide client through the Forgot Username MFA process."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecuritySubmitDuo": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SignupVerifyLink": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Redirect to success or failure page."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigDeleteAdvancedConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "JobFlowStartJob": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "ID of newly added resource"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "AuthProfileGetProfileMFAScoring": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "returns Maximum and minimun AAL in Success or null in Failure"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CollectionIsMember": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Does the member have access to the set."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationGetFederations": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of federations.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "RolesGetPagedRoleMembers": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerManageGetAdministrativeAccountCandidates": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Domain": {
                "type": "string",
                "description": "Domain name"
              },
              "FullyQualifiedName": {
                "type": "string",
                "description": "Domain qualified administrator username"
              },
              "PVID": {
                "type": "string",
                "description": "Domain id"
              },
              "Name": {
                "type": "string",
                "description": "Domain administrator username"
              }
            },
            "description": "List of DataEntities with domain data"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ZsoCertLogin": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard redirect result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtGetCachedEntity": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Uuid": {
                "type": "string",
                "description": "The entities unique identifier."
              },
              "Email": {
                "type": "string",
                "description": "The entities email address."
              },
              "CanonicalName": {
                "type": "string",
                "description": "The entities canonical name."
              },
              "Sid": {
                "type": "string",
                "description": "The entities sid."
              },
              "DistinguishedName": {
                "type": "string",
                "description": "The entities distinguished name."
              },
              "type": {
                "type": "string",
                "description": "The entities classification."
              },
              "SamAccountName": {
                "type": "string",
                "description": "The entities sam account name."
              }
            },
            "description": "The cached entity."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The cached entity.\", \n                type: \"object\",\n                properties:\n                {\n                    type: { description: \"The entities classification.\", type: \"string\" },\n                    Uuid: { description: \"The entities unique identifier.\", type: \"string\" },\n                    CanonicalName: { description: \"The entities canonical name.\", type: \"string\" },\n                    DistinguishedName: { description: \"The entities distinguished name.\", type: \"string\" },\n                    Email: { description: \"The entities email address.\", type: \"string\" },\n                    Sid: { description: \"The entities sid.\", type: \"string\" },\n                    SamAccountName:  { description: \"The entities sam account name.\", type: \"string\" }\n                }\n            }\n            "
          }
        }
      },
      "TenantConfigSetAdminSecurityQuestion": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ErrorID": {
                "type": "string",
                "description": "Error ID if any error is received from the API. By default it is 'null'"
              },
              "ErrorCode": {
                "type": "string",
                "description": "Error code if any error is received from the API. By default it is 'null'"
              },
              "Exception": {
                "type": "string",
                "description": "Exception message if any exception is received from the API. By default it is 'null'"
              },
              "MessageID": {
                "type": "string",
                "description": "Message Id for failure response. By default it is 'null'"
              },
              "Result": {
                "type": "string",
                "description": "The result will be null."
              },
              "InnerExceptions": {
                "type": "string",
                "description": "InnerExceptions"
              },
              "Message": {
                "type": "string",
                "description": "Error message for failure response. By default it is 'null'"
              },
              "success": {
                "type": "boolean",
                "description": "The success will be true or false."
              },
              "IsSoftError": {
                "type": "boolean",
                "description": "SoftError if true indicates this is not actually an exception but an UI warning popup."
              }
            },
            "description": "Return object for a successful API call."
          },
          "Error": {
            "type": "object",
            "properties": {
              "InvalidQuestionText": {
                "type": "string",
                "description": "The following error message is displayed when the question text is invalid. 'Security question update failed.'"
              }
            },
            "description": "Error message text on failure."
          }
        }
      },
      "CoreDelPremDetectRange": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the IP range delete succeed."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Did the IP range delete succeed.\", type: \"boolean\"\n            }\n            "
          }
        }
      },
      "CoreGetCurrentIwaJsonpUrl": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The current Iwa Json Url."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetBlockedIpRanges": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of blocked IP Ranges in UI Query Response format.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "U2fGetU2fDevices": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "The list of U2f devices in UI Query Response format.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigGetEditableMailTemplates": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "U2fGetRegistrationChallenge": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "AppId": {
                "type": "string",
                "description": "The application id."
              },
              "Devices": {
                "type": "array",
                "description": "A list of devices.",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              },
              "Challenge": {
                "type": "string",
                "description": "The challenge."
              }
            },
            "description": "The registration challenge."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreReIssueIwaHostCertificate": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "HttpPort": {
                "type": "integer",
                "description": "Hyper text transport port number."
              },
              "Port": {
                "type": "integer",
                "description": "Port number for the connector."
              },
              "WebProxyEnabled": {
                "type": "boolean",
                "description": "Should the web connector be enabled."
              },
              "CertThumbprint": {
                "type": "string",
                "description": "Certificate thumbprint."
              },
              "WebProxyPort": {
                "type": "integer",
                "description": "The port used by the web connector."
              },
              "Enabled": {
                "type": "boolean",
                "description": "Is the connector enabled."
              },
              "IwaCheckTimeout": {
                "type": "integer",
                "description": "The Iwa timeout value to use."
              },
              "Name": {
                "type": "string",
                "description": "The proxies name."
              },
              "Hostname": {
                "type": "string",
                "description": "The host name of the connector."
              }
            },
            "description": "The connector that got its certificate set."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetTenantCACert": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "FileResult containing the public part of the tenant CA certificate."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "IdentityProofingGetIdentityVerificationProviderConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "RadiusGetServers": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ExtDataGetSchema": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of columns as DataEntity objects.",
            "items": {
              "type": "object",
              "properties": {
                "Name": {
                  "type": "string",
                  "description": "The column name."
                },
                "Type": {
                  "type": "string",
                  "description": "The column type."
                },
                "Title": {
                  "type": "string",
                  "description": "The column title."
                },
                "Description": {
                  "type": "string",
                  "description": "The column description."
                }
              },
              "description": "A column definition."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigSetCustomerConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SaasManageDeleteApplication": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "_RowKey": {
                "type": "string",
                "description": "Application key"
              },
              "success": {
                "type": "boolean",
                "description": "Whether the operation is successful"
              }
            },
            "description": "Result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetDirectoryFileRolesAndRights": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "Role and rights for a directoryfile.",
            "items": {
              "type": "object",
              "properties": {
                "Role": {
                  "type": "string",
                  "description": "The directoryfile ace principal."
                },
                "Rights": {
                  "type": "string",
                  "description": "The rights the principal has."
                }
              },
              "description": "A directoryfile role and right."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "MobileSetDevicePermissions": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "this function returns nothing"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreAddBlockedIpRange": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did adding the new blocked IP range succeed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigTestTwilioConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The phone number that received the message."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SocialAuthGoogleAuthCallback": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "User redirect."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SocialAuthFacebookAuthCallback": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "User redirect."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OathUpdateOathProfileCounter": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the profile counter get updated."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Did the profile counter get updated.\", type: \"boolean\"\n            }\n            "
          }
        }
      },
      "AclGetCollectionAcesHelper": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CollectionGetCollectionTemplate": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "A sql query."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetProxyIwaSettings": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "The connector Iwa settings.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "AclGetAce": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The ace object."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerAgentEnrollV2": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "TenantId": {
                "type": "string",
                "description": "ID of the tenant the machine was enrolled to"
              },
              "Owner": {
                "type": "array",
                "description": "Resolved owner of the agent profile: See the Principal, PrincipalId, and PType fields of ",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              },
              "Cert": {
                "type": "string",
                "description": "Base64 encoded string representing a PKCS #12 file containing a certificate (and private key) used to authenticate as the service user"
              },
              "Uuid": {
                "type": "string",
                "description": "UUID of the agent profile"
              },
              "SetResults": {
                "type": "array",
                "description": "Result of adding the system to the sets specified by the Sets argument: ",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              },
              "AccountName": {
                "type": "string",
                "description": "Final name of the agent"
              }
            },
            "description": "The machine enrollment result."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreDisablePremDetectRange": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetAliasesForTenant": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "The tenant suffixes in UI Query Response format.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicyGetRsop": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The rsop policy."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The rsop policy.\", type: \"object\"\n            }\n            "
          }
        }
      },
      "PolicyGetPolicyInt": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "integer",
            "description": "The integer value returned by the policy."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceDelete": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Success or failure of the delete."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SocialAuthMicrosoftActAuthCallback": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "User redirect."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SysInfoVersion": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Cloud": {
                "type": "string",
                "description": "The system cloud."
              },
              "Storage": {
                "type": "object",
                "properties": {
                  "Schema": {
                    "type": "string",
                    "description": "The schema version."
                  },
                  "Client": {
                    "type": "string",
                    "description": "The client version."
                  },
                  "Server": {
                    "type": "string",
                    "description": "The server version (same as client if engine uses no server)."
                  }
                },
                "description": "The system storage."
              },
              "StorageEngine": {
                "type": "string",
                "description": "The type of storage."
              },
              "Active": {
                "type": "boolean",
                "description": "The system active."
              },
              "Lib": {
                "type": "string",
                "description": "The system library information."
              },
              "Name": {
                "type": "string",
                "description": "The system name."
              }
            },
            "description": "The system version."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OAuth2UserInfo": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "aud": {
                "type": "string",
                "description": "aud"
              },
              "unique_name": {
                "type": "string",
                "description": "unique name of the user"
              },
              "email_verified": {
                "type": "string",
                "description": "Is Email verified."
              },
              "given_name": {
                "type": "integer",
                "description": "User given name"
              },
              "family_name": {
                "type": "string",
                "description": "Family name of the user."
              },
              "email": {
                "type": "string",
                "description": "Email of the user"
              },
              "name": {
                "type": "string",
                "description": "User name"
              },
              "auth_time": {
                "type": "string",
                "description": "Auth time"
              },
              "Success": {
                "type": "boolean",
                "description": "Success"
              },
              "preferred_username": {
                "type": "string",
                "description": "Preferred user name"
              },
              "sub": {
                "type": "string",
                "description": "sub"
              }
            },
            "description": "Response contains user related information"
          },
          "Error": {
            "type": "object",
            "properties": {
              "InvalidAppConfig": {
                "type": "string",
                "description": "invalid app configuration"
              },
              "InvalidURL": {
                "type": "string",
                "description": "Bad Url"
              }
            },
            "description": "The below error message is displayed incase of failure"
          }
        }
      },
      "CoreMakeFile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceChangeUserState": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ErrorID": {
                "type": "string",
                "description": "Error ID if any error is received from the API. By default it is 'null'"
              },
              "ErrorCode": {
                "type": "string",
                "description": "Error code if any error is received from the API. By default it is 'null'"
              },
              "Exception": {
                "type": "string",
                "description": "Exception message if any exception is received from the API. By default it is 'null'"
              },
              "MessageID": {
                "type": "string",
                "description": "Message Id for failure response. By default it is 'null'"
              },
              "Result": {
                "type": "string",
                "description": "The result will be null."
              },
              "InnerExceptions": {
                "type": "string",
                "description": "InnerExceptions"
              },
              "Message": {
                "type": "string",
                "description": "Error message for failure response. By default it is 'null'"
              },
              "success": {
                "type": "boolean",
                "description": "It will be true for a successful API call."
              },
              "IsSoftError": {
                "type": "boolean",
                "description": "SoftError if true indicates this is not actually an exception but an UI warning popup."
              }
            },
            "description": "Return object for a successful API call."
          },
          "Error": {
            "type": "object",
            "properties": {
              "MissingArgument": {
                "type": "string",
                "description": "Invalid arguments passed to the server."
              },
              "InvalidUserId": {
                "type": "string",
                "description": "User with given unique ID doesn’t exist."
              }
            },
            "description": "Error message text on failure."
          }
        }
      },
      "CoreCheckProxyHealth": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Connectors": {
                "type": "array",
                "description": "Array of Cloud Connectors. See notes for a breakdown of this package",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              },
              "Version": {
                "type": "string",
                "description": "Version of the health check package. Will change if the format of this package changes"
              }
            },
            "description": "A package that includes a list of objects detailing the health statuses of one or more cloud connectors."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CollectionGetObjectCollections": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of object collections.",
            "items": {
              "type": "object",
              "properties": {
                "Name": {
                  "type": "string",
                  "description": "The name of the collection."
                },
                "Description": {
                  "type": "string",
                  "description": "The collection description."
                },
                "OjbectType": {
                  "type": "string",
                  "description": "The collection object type."
                },
                "Filters": {
                  "type": "string",
                  "description": "The collection filters."
                },
                "CollectionType": {
                  "type": "string",
                  "description": "The collections collectiontype."
                },
                "Rank": {
                  "type": "string",
                  "description": "The collections rank."
                },
                "Parent": {
                  "type": "string",
                  "description": "The collections parent."
                },
                "ParentPath": {
                  "type": "string",
                  "description": "The collections parent path."
                }
              },
              "description": "An object collection."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SocialAuthMgmtGetApplicationClientSecret": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ApplicationClientId": {
                "type": "string",
                "description": "The application client id."
              },
              "ApplicationClientSecret": {
                "type": "string",
                "description": "The application client secret."
              },
              "IdpName": {
                "type": "string",
                "description": "The identity provider name."
              }
            },
            "description": "The applicaiton client secret."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "IdentityProofingUpdateUserSignUpStatus": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerManageGetDomainAccountStatus": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Status": {
                "type": "string",
                "description": "Password status of user"
              },
              "PVID": {
                "type": "string",
                "description": "Id of the user"
              }
            },
            "description": "DataEntity with user password status"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TaskCreateOneTimeJob": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the one time job get created."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UEvaluate": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceGetTechSupportUser": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Uuid": {
                "type": "string",
                "description": "Support user UUID"
              },
              "PasswordExp": {
                "type": "string",
                "description": "Support user expire date",
                "format": "date-time"
              },
              "Name": {
                "type": "string",
                "description": "Support user name"
              }
            },
            "description": "Support user information"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreStoreAlias": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the suffix save succeed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtGetUserHierarchy": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "propertyn": {
                "type": "object",
                "properties": {},
                "description": "nth property of the user (name varies)"
              },
              "property2": {
                "type": "object",
                "properties": {},
                "description": "Second property of the user (name varies)"
              },
              "directoryServiceUuid": {
                "type": "string",
                "description": "UUID of the directory service the user is from"
              },
              "...": {
                "type": "object",
                "properties": {},
                "description": "More properties (name varies)"
              },
              "property1": {
                "type": "object",
                "properties": {},
                "description": "First property of the user (name varies)"
              }
            },
            "description": "User Attributes results"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "WinDpaCreateUser": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ZsoClearMacSafariZsoCookie": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard Json Return"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "U2fGetU2fDevicesForUser": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "The list of U2f devices for the current user in UI Query Response format.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtRemoveUserCertificate": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserUpdateProfile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Success or failure of the change."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationUpdateFederation": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The results of updating the federation."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerAgentEnroll": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "MobilePowerOff": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceRefreshToken": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtGetUserPicture": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "User's picture file if one is available"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SaasManageImportAppFromTemplate": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "_RowKey": {
                "type": "string",
                "description": "Application key"
              },
              "ID": {
                "type": "string",
                "description": "Application template name"
              },
              "success": {
                "type": "boolean",
                "description": "Whether the operation is successful"
              }
            },
            "description": "Result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ExternalCaMgmtAddCertAuthority": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The certificate authority id."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The certificate authority id.\", type: \"string\"\n            }\n            "
          }
        }
      },
      "CoreIssueZsoUserCert": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "ActionResult containing the Zso user certificate."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CollectionGetCollection": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Filters": {
                "type": "string",
                "description": "The collection filters."
              },
              "ObjectType": {
                "type": "string",
                "description": "The collection object type."
              },
              "CollectionType": {
                "type": "string",
                "description": "The collections collectiontype."
              },
              "Rank": {
                "type": "string",
                "description": "The collections rank."
              },
              "ParentPath": {
                "type": "string",
                "description": "The collections parent path."
              },
              "Description": {
                "type": "string",
                "description": "The collection description."
              },
              "Parent": {
                "type": "string",
                "description": "The collections parent."
              },
              "Name": {
                "type": "string",
                "description": "The name of the collection."
              }
            },
            "description": "A collection."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ZsoSetMacSafariZsoCookie": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard Json Return"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicySetUsingCloudMobileGP": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Result of setting the using cloud mobile group policy."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Result of setting the using cloud mobile group policy.\", type: \"boolean\"\n            }\n            "
          }
        }
      },
      "TenantConfigSendTestMessageTemplate": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "VfsGetFileLower": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "An all lower case reference to the path."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CollectionDeleteCollection": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Success or failure of the set delete."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "AclGetEffectiveFileRights": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "List of file rights.",
            "items": {
              "type": "object",
              "properties": {
                "Path": {
                  "type": "string",
                  "description": "The file name."
                },
                "GrantStr": {
                  "type": "string",
                  "description": "The right being granted."
                }
              },
              "description": "A file right."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationGetGroups": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of federated groups.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SysInfoGetMySession": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "An authentication session id."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreDownloadCertificate": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "A file containing the certificate."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtSendSmsInvite": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SaasManageUpdateApplicationDE": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "State": {
                "type": "integer",
                "description": "Application state"
              },
              "success": {
                "type": "boolean",
                "description": "Whether the operation is successful"
              }
            },
            "description": "Result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "U2fAnswerRegistrationChallenge": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          }
        }
      },
      "UserMgmtCanEditUserAttributes": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicyGetNicePolicyBlock": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "RiskAnalysisLevels": {
                "type": "object",
                "properties": {},
                "description": "The risk analysis mapping."
              },
              "AuthProfiles": {
                "type": "array",
                "description": "A list of authentication profiles.",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              },
              "PolicyModifiers": {
                "type": "array",
                "description": "The policy modifiers.",
                "items": {
                  "type": "string"
                }
              },
              "RevStamp": {
                "type": "string",
                "description": "The policy revision stamp."
              },
              "RadiusClientList": {
                "type": "array",
                "description": "The list of radius clients.",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "description": "The policy block in UI Query Response format."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The policy block in UI Query Response format.\", \n                type: \"object\",\n                properties:\n                {\n                    AuthProfiles: { description: \"A list of authentication profiles.\", type: \"array\", items: { type: \"object\" } },\n                    RiskAnalysisLevels: { description: \"The risk analysis mapping.\", type: \"object\" },\n                    PolicyModifiers: { description: \"The policy modifiers.\", type: \"array\", items: { type: \"string\" } },\n                    RevStamp: { description: \"The policy revision stamp.\", type: \"string\" },\n                    RadiusClientList: { description: \"The list of radius clients.\", type: \"array\", items: { type: \"object\" } }\n                }\n            }\n            "
          }
        }
      },
      "MobileReboot": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "JobFlowEvent": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The current job record"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "AclGetEffectiveRowRights": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of user rights.",
            "items": {
              "type": "object",
              "properties": {
                "Table": {
                  "type": "string",
                  "description": "Database table name."
                },
                "RowKey": {
                  "type": "string",
                  "description": "The unique identifier."
                },
                "GrantStr": {
                  "type": "string",
                  "description": "The right being granted."
                }
              },
              "description": "A user right."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicyGetPlinks": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OathGetProfileListForDevice": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "The profile list for a device.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The profile list for a device.\", type: \"array\", items: { type: \"object\" }\n            }\n            "
          }
        }
      },
      "CoreDeleteAlias": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the suffix removal succeed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreStoreUser": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Result of the attempt to store the user."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Result of the attempt to store the user.\", type: \"boolean\"\n            }\n            "
          }
        }
      },
      "OathGetImportProfileList": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of import profiles in query response format.",
            "items": {
              "type": "object",
              "properties": {},
              "description": "An import profile."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreStoreUserSetting": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Success or failure of storing the user settings."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetFileInfo": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Type": {
                "type": "string",
                "description": "The resource type, always 'file'"
              },
              "Path": {
                "type": "string",
                "description": "Full path to the file"
              },
              "Content": {
                "type": "string",
                "description": "The contents of the file as text"
              },
              "Perms": {
                "type": "string",
                "description": "The caller's permissions on the file"
              },
              "Name": {
                "type": "string",
                "description": "File name without the path"
              }
            },
            "description": "File information and metadata object"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "JobFlowGetMyJobs": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "List of job records",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerManageAddAccount": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "ID of the newly added account"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetCloudCACert": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The public part of the cloud CA certificate."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "RadiusSetServer": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantCnamesUiGet": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "A list of tenant cnames in UI Query Response format."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SchedulerHistoryDeleteJobHistory": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the job history delete work."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Did the job history delete work.\", type: \"boolean\"\n            }\n            "
          }
        }
      },
      "AclGetCollectionAces": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of access collections.",
            "items": {
              "type": "object",
              "properties": {
                "Principal": {
                  "type": "string",
                  "description": "Entity with set access rights."
                },
                "PrincipalType": {
                  "type": "string",
                  "description": "The type of entity."
                },
                "PrincipalName": {
                  "type": "string",
                  "description": "The principal name."
                },
                "GrantStr": {
                  "type": "string",
                  "description": "The name of the right being granted."
                },
                "Grant": {
                  "type": "integer",
                  "description": "What right to grant."
                },
                "StartTime": {
                  "type": "string",
                  "description": "Start time of the access right."
                },
                "EndTime": {
                  "type": "string",
                  "description": "End time of the access right."
                },
                "AceID": {
                  "type": "string",
                  "description": "The access right id."
                },
                "Inherited": {
                  "type": "boolean",
                  "description": "Is inheritence being used (default=false)."
                },
                "ObjectType": {
                  "type": "string",
                  "description": "The object type."
                },
                "PrincipalObjectType": {
                  "type": "string",
                  "description": "The principal object type."
                }
              },
              "description": "An access collection."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SocialAuthMgmtSetAuthConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the social user authentication configuration get set."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreDeleteProxies": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the connector removals succeed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreWriteFile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Success only if file write succeeds."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicySetPlinksv2": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Success, or failure if the plinks file was unable to be updated for any reason."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Success, or failure if the plinks file was unable to be updated for any reason.\", type: \"boolean\"\n            }\n            "
          }
        }
      },
      "UPRestUpdateCredsForSecuredItem": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Whether the operation is successful or not."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SignupGetVerificationState": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "verification status and auth token only when verification status is successful"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CollectionGetCollectionPermissions": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Rights": {
                "type": "string",
                "description": "list of permissions"
              },
              "Principal": {
                "type": "string",
                "description": "User name or role name"
              },
              "PrincipalId": {
                "type": "string",
                "description": "Uuid of the principal"
              },
              "PType": {
                "type": "string",
                "description": "Principal type: User, Role,.. "
              }
            },
            "description": "List of permissions"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OrgUpdatePermission": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerAgentRegisterV2": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "\n                The same return values as .\n            "
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetCdsAliasesForTenant": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "The tenant suffixes excluding legacy suffixes in UI Query Response format.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceSetUserPicture": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "URI path to the user's picture."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityAmIAuthenticated": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OrgListAll": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "List or organization units",
            "items": {
              "type": "object",
              "properties": {
                "ID": {
                  "type": "string",
                  "description": "ID of organization"
                },
                "Name": {
                  "type": "string",
                  "description": "The name of organization"
                },
                "Description": {
                  "type": "string",
                  "description": "description of organization"
                }
              },
              "description": "The organization unit."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityResumeFromExtIdpAuth": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The next step (if there is one) for the user authentication."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerManageGetAdministrativeAccounts": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "DomainID": {
                "type": "string",
                "description": "Domain id"
              },
              "AdministrativeAccount": {
                "type": "object",
                "properties": {
                  "UserID": {
                    "type": "string",
                    "description": "Administrator's id"
                  },
                  "DomainID": {
                    "type": "string",
                    "description": "Domain id"
                  },
                  "Domain": {
                    "type": "string",
                    "description": "Domain name"
                  },
                  "FullyQualifiedName": {
                    "type": "string",
                    "description": "Domain qualified administrator username"
                  },
                  "Name": {
                    "type": "string",
                    "description": "Administrator's username"
                  }
                },
                "description": "Detailed information of the domain."
              },
              "Domain": {
                "type": "string",
                "description": "Domain name"
              }
            },
            "description": "List of DataEntities with domain data"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SocialAuthMgmtSetCustomConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard Json Result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "RolesGetRole": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "DirectoryServiceUuid": {
                "type": "string",
                "description": "UUID of the Directory Service owning the role"
              },
              "Principals": {
                "type": "array",
                "description": "List of priciapls who are members of the role.  Each principal is of the form t=id, where 't' is one of 'u' (user), 'g' (group), or 'r' (role) and 'id' is the principal name.",
                "items": {
                  "type": "string"
                }
              },
              "RoleType": {
                "type": "string",
                "description": "Role type, one of Everybody or PrincipalList"
              },
              "Uuid": {
                "type": "string",
                "description": "Role UUID"
              },
              "ReadOnly": {
                "type": "boolean",
                "description": "Is role read only?"
              },
              "Description": {
                "type": "string",
                "description": "Role description"
              },
              "Name": {
                "type": "string",
                "description": "Role name"
              }
            },
            "description": "Role information"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OathGetDataFromCsvFile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The file contents in query result format."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The file contents in query result format.\", type: \"object\"\n            }\n            "
          }
        }
      },
      "CDirectoryServiceCreateUsers": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "List of users with their UUID's.",
            "items": {
              "type": "object",
              "properties": {
                "Name": {
                  "type": "string",
                  "description": "Name of user."
                },
                "UUID": {
                  "type": "string",
                  "description": "UUID of user."
                }
              },
              "description": "User name and UUID."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "AuthProfileDeleteProfile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Success or failure of the delete"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CollectionGetMembers": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Table": {
                "type": "string",
                "description": "The member table."
              },
              "MemberType": {
                "type": "object",
                "properties": {},
                "description": "This members member type."
              },
              "Name": {
                "type": "string",
                "description": "The member name."
              }
            },
            "description": "A list of set members."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "MobileUnlockDevice": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OathSubmitUploadedFile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did processing the file work."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceGetUserByName": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "InEverybodyRole": {
                "type": "boolean",
                "description": "Is user in the Everybody role."
              },
              "Description": {
                "type": "string",
                "description": "User description."
              },
              "Name": {
                "type": "string",
                "description": "User name."
              },
              "MobileNumber": {
                "type": "string",
                "description": "User mobile phone number."
              },
              "LastPasswordChangeDate": {
                "type": "string",
                "description": "Date/time user last changed their password.",
                "format": "date-time"
              },
              "OfficeNumber": {
                "type": "string",
                "description": "User office phone number."
              },
              "PictureUri": {
                "type": "string",
                "description": "File system path to user picture file."
              },
              "ReportsTo": {
                "type": "string",
                "description": "User reports to user UUID."
              },
              "HomeNumber": {
                "type": "string",
                "description": "User home phone number."
              },
              "DisplayName": {
                "type": "string",
                "description": "User display name."
              },
              "PreferredCulture": {
                "type": "string",
                "description": "User preferred culture."
              },
              "Alias": {
                "type": "string",
                "description": "Login suffix of the user."
              },
              "State": {
                "type": "string",
                "description": "User state (locked, enabled, expired)."
              },
              "PasswordNeverExpire": {
                "type": "boolean",
                "description": "Does the user's password never expire."
              },
              "Uuid": {
                "type": "string",
                "description": "User UUID."
              },
              "Mail": {
                "type": "string",
                "description": "User email."
              }
            },
            "description": "Cloud user details."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreIssueUserCert": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The users certificate."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "MobilePingDevice": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "MobileLockDevice": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreSetDefaultCertificate": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the tenant certificate set succeed."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Did the tenant certificate set succeed.\", type: \"boolean\"\n            }\n            "
          }
        }
      },
      "AclGetRowAces": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "List of row rights.",
            "items": {
              "type": "object",
              "properties": {
                "Principal": {
                  "type": "string",
                  "description": "Entity with access rights."
                },
                "PrincipalType": {
                  "type": "string",
                  "description": "The type of entity."
                },
                "PrincipalName": {
                  "type": "string",
                  "description": "The principal name."
                },
                "GrantStr": {
                  "type": "string",
                  "description": "The name of the right being granted."
                },
                "Grant": {
                  "type": "integer",
                  "description": "What right to grant."
                },
                "StartTime": {
                  "type": "string",
                  "description": "Start time of the access right."
                },
                "EndTime": {
                  "type": "string",
                  "description": "End time of the access right."
                },
                "AceID": {
                  "type": "string",
                  "description": "The access right id."
                },
                "Inherited": {
                  "type": "boolean",
                  "description": "Is inheritence being used (default=false)."
                },
                "ObjectType": {
                  "type": "string",
                  "description": "The object type."
                },
                "PrincipalObjectType": {
                  "type": "string",
                  "description": "The principal object type."
                }
              },
              "description": "A row right."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ExtDataGetColumns": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The values of the extended columns as an object"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OrgGetPermission": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "List of updated admin rights.",
            "items": {
              "type": "object",
              "properties": {
                "Principal": {
                  "type": "string",
                  "description": "Entity with row access rights."
                },
                "PrincipalType": {
                  "type": "string",
                  "description": "The type of entity."
                },
                "Right": {
                  "type": "string",
                  "description": "The principal name."
                }
              },
              "description": "A row access right."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetLocTag": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The requested tag."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerAgentDisableFeatures": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "FeatureAAPM": {
                "type": "object",
                "properties": {},
                "description": "Whether the AAPM feature was changed or disabled"
              },
              "FeatureAgentAuth": {
                "type": "object",
                "properties": {},
                "description": "Whether the Agent Auth feature was changed or disabled"
              }
            },
            "description": "The result of disabling the feature."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "MobileDisableSSO": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "HomeGetLoginData": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "Login Info (AuthData and ServerConfig)"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicyGetU2fClientName": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The u2f client name."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "RegistrationCustomerInfo": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ExistingTenants": {
                "type": "array",
                "description": "A list of tenants for the user.",
                "items": {
                  "type": "string"
                }
              },
              "Authenticated": {
                "type": "boolean",
                "description": "Is the user authenticated."
              }
            },
            "description": "The user tenants."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtGetSecurityQuestions": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ErrorID": {
                "type": "string",
                "description": "Error ID if any error is received from the API. By default it is 'null'"
              },
              "ErrorCode": {
                "type": "string",
                "description": "Error code if any error is received from the API. By default it is 'null'"
              },
              "Exception": {
                "type": "string",
                "description": "Exception message if any exception is received from the API. By default it is 'null'"
              },
              "MessageID": {
                "type": "string",
                "description": "Message Id for failure response. By default it is 'null'"
              },
              "Result": {
                "type": "object",
                "properties": {
                  "AnswerMinLength": {
                    "type": "integer",
                    "description": "Minimum length that should be entered for the answer."
                  },
                  "Questions": {
                    "type": "array",
                    "description": "Array of all admin security questions.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "Uuid": {
                          "type": "string",
                          "description": "The unique ID of the security question created by the user."
                        },
                        "QuestionText": {
                          "type": "string",
                          "description": "The text of the user setup security question Ex: What is your birthplace?"
                        }
                      },
                      "description": "The object contains a list of questions setup by the user."
                    }
                  },
                  "MaxQuestions": {
                    "type": "integer",
                    "description": "The maximum number of questions the user can setup."
                  },
                  "MinAdminQuestions": {
                    "type": "integer",
                    "description": "Minimum number of user defined questions that should be setup."
                  },
                  "AdminQuestions": {
                    "type": "array",
                    "description": "Array of all admin security questions.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "Culture": {
                          "type": "string",
                          "description": "Culture of the question, 'all' implies all cultures"
                        },
                        "Uuid": {
                          "type": "string",
                          "description": "The unique ID of the security question created by the user."
                        },
                        "Question": {
                          "type": "string",
                          "description": "The text of the admin setup security question Ex: What is your birthplace?"
                        }
                      },
                      "description": "The object contains a list of questions setup by the admin."
                    }
                  },
                  "MinUserQuestions": {
                    "type": "integer",
                    "description": "Minimum number of user questions required for user"
                  }
                },
                "description": "Result for the admin question list"
              },
              "InnerExceptions": {
                "type": "string",
                "description": "InnerExceptions"
              },
              "Message": {
                "type": "string",
                "description": "Error message for failure response. By default it is 'null'"
              },
              "success": {
                "type": "boolean",
                "description": "The success will be true or false."
              },
              "IsSoftError": {
                "type": "boolean",
                "description": "SoftError if true indicates this is not actually an exception but an UI warning popup."
              }
            },
            "description": "Return object for a successful API call."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreDirectoryExists": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "A boolean value indicating whether the directory exists or not."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationGetFederatedGroupMembers": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "A list of users that are members of the federated group."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerAgentGetCertificate": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "PKCS12 Certificate"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreHandleTwilioSmsReceipt": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "HttpStatusCodeResult OK."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetCurrentIwaUrl": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The current Iwa Url."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "GoogleDirectoryGetDirectoryServiceConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "DirectoryServiceUuid": {
                "type": "string",
                "description": "The unique identifier of this directory service."
              },
              "ErrorMessage": {
                "type": "string",
                "description": "Error message from the connectivity validation."
              },
              "TrustedRedirectUris": {
                "type": "array",
                "description": "The list of trusted redirect uri's.",
                "items": {
                  "type": "string"
                }
              },
              "PrimaryDomain": {
                "type": "string",
                "description": "The primary domain for this directory service."
              },
              "ConnectivityStatus": {
                "type": "string",
                "description": "The directory service's connectivity status."
              }
            },
            "description": "The directory service configuration."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The directory service configuration.\", \n                type: \"object\",\n                properties: \n                {\n                    DirectoryServiceUuid: { description: \"The unique identifier of this directory service.\", type: \"string\" },\n                    PrimaryDomain: { description: \"The primary domain for this directory service.\", type: \"string\" },\n                    ConnectivityStatus: { description: \"The directory service's connectivity status.\", type: \"string\" },\n                    ErrorMessage: { description: \"Error message from the connectivity validation.\", type: \"string\" },\n                    TrustedRedirectUris: { description: \"The list of trusted redirect uri's.\", type: \"array\", items: { type: \"string\" } }\n                }\n            }\n            "
          }
        }
      },
      "CoreGetDomainControllersForDomain": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of domain controllers in the directory service in the specified domain.",
            "items": {
              "type": "object",
              "properties": {
                "Name": {
                  "type": "string",
                  "description": "Controller name"
                },
                "WhiteListed": {
                  "type": "boolean",
                  "description": "Is this domain controller usable."
                },
                "IPAddress": {
                  "type": "string",
                  "description": "What's the ip address of this domain controller."
                },
                "SiteName": {
                  "type": "string",
                  "description": "The site name for this domain controller."
                },
                "Roles": {
                  "type": "string",
                  "description": "The role for this domain controller."
                },
                "OSVersion": {
                  "type": "string",
                  "description": "What operating version runs on this domain controller."
                },
                "GC": {
                  "type": "boolean",
                  "description": ""
                },
                "CurrentTime": {
                  "type": "string",
                  "description": "What's the current time."
                },
                "ControllerException": {
                  "type": "string",
                  "description": "Domain controller exception."
                },
                "IsOnline": {
                  "type": "boolean",
                  "description": "Is this domain controller online."
                }
              },
              "description": "A domain controller."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "MobileLockClientApp": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceGetBulkImportWithExtAtt": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreFileExists": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "A boolean value indicating whether the file exists or not."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OAuth2GetMeta": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "ContentResult that describes the service name meta data."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigDeleteAdminSecurityQuestion": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SaasManageGetRole": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "DirectoryServiceUuid": {
                "type": "string",
                "description": "UUID of the Directory Service owning the role"
              },
              "Principals": {
                "type": "array",
                "description": "List of priciapls who are members of the role.  Each principal is of the form t=id, where 't' is one of 'u' (user), 'g' (group), or 'r' (role) and 'id' is the principal name.",
                "items": {
                  "type": "string"
                }
              },
              "RoleType": {
                "type": "string",
                "description": "Role type, one of Everybody or PrincipalList"
              },
              "Uuid": {
                "type": "string",
                "description": "Role UUID"
              },
              "ReadOnly": {
                "type": "boolean",
                "description": "Is role read only?"
              },
              "Description": {
                "type": "string",
                "description": "Role description"
              },
              "Name": {
                "type": "string",
                "description": "Role name"
              }
            },
            "description": "Role information"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceGetUser": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "InEverybodyRole": {
                "type": "boolean",
                "description": "Is user in the Everybody role?"
              },
              "Description": {
                "type": "string",
                "description": "User description"
              },
              "Name": {
                "type": "string",
                "description": "User name"
              },
              "MobileNumber": {
                "type": "string",
                "description": "User mobile phone number"
              },
              "LastPasswordChangeDate": {
                "type": "string",
                "description": "Date/time user last changed their password",
                "format": "date-time"
              },
              "OfficeNumber": {
                "type": "string",
                "description": "User office phone number"
              },
              "PictureUri": {
                "type": "string",
                "description": "File system path to user picture file"
              },
              "ReportsTo": {
                "type": "string",
                "description": "User reports to user UUID."
              },
              "HomeNumber": {
                "type": "string",
                "description": "User home phone number"
              },
              "DisplayName": {
                "type": "string",
                "description": "User display name"
              },
              "PreferredCulture": {
                "type": "string",
                "description": "User preferred culture"
              },
              "Alias": {
                "type": "string",
                "description": "Login suffix of the user"
              },
              "State": {
                "type": "string",
                "description": "User state (locked, enabled, expired)"
              },
              "PasswordNeverExpire": {
                "type": "boolean",
                "description": "Does the user's password never expire?"
              },
              "Uuid": {
                "type": "string",
                "description": "User UUID"
              },
              "Mail": {
                "type": "string",
                "description": "User email"
              }
            },
            "description": "Cloud user details."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "AclGetDirAces": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "List of directory access rights.",
            "items": {
              "type": "object",
              "properties": {
                "Principal": {
                  "type": "string",
                  "description": "Entity with directory access rights."
                },
                "PrincipalType": {
                  "type": "string",
                  "description": "The type of entity."
                },
                "PrincipalName": {
                  "type": "string",
                  "description": "The principal name."
                },
                "GrantStr": {
                  "type": "string",
                  "description": "The name of the right being granted."
                },
                "Grant": {
                  "type": "integer",
                  "description": "What right to grant."
                },
                "StartTime": {
                  "type": "string",
                  "description": "Start time of the access right."
                },
                "EndTime": {
                  "type": "string",
                  "description": "End time of the access right."
                },
                "AceID": {
                  "type": "string",
                  "description": "The access right id."
                },
                "Inherited": {
                  "type": "boolean",
                  "description": "Is inheritence being used (default=false)."
                },
                "ObjectType": {
                  "type": "string",
                  "description": "The object type."
                },
                "PrincipalObjectType": {
                  "type": "string",
                  "description": "The principal object type."
                }
              },
              "description": "A directory access right."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerManageSetDomainPermissions": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OAuth2Authorize": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The response contains HTML with a redirect URI to a login page where user needs to provide credentials for authentication."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The response contains HTML with a redirect URI to a login page where user needs to provide credentials for authentication.\", type: \"string\"\n            }\n            "
          }
        }
      },
      "ServerManageGetRetiredPassword": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Retrieved password"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceBulkDeleteUsers": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Success or failure of the delete."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OathCloudOathOtpProfileCheck": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtGetUserAttributes": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "propertyn": {
                "type": "object",
                "properties": {},
                "description": "nth property of the user (name varies)"
              },
              "property2": {
                "type": "object",
                "properties": {},
                "description": "Second property of the user (name varies)"
              },
              "directoryServiceUuid": {
                "type": "string",
                "description": "UUID of the directory service the user is from"
              },
              "...": {
                "type": "object",
                "properties": {},
                "description": "More properties (name varies)"
              },
              "property1": {
                "type": "object",
                "properties": {},
                "description": "First property of the user (name varies)"
              }
            },
            "description": "User Attributes results"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetPurchasedLicenses": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "List of product licenses.\n                {  \n                    \"type\": \"object\",\n                    \"description\": \"Collections of license objects.\",\n                    \"properties\": \n                    {\n                        \"Name\" : { \"description: \"Product name, e.g. App Service Access\", \"type\": \"string\" },\n                        \"Group\" : { \"description: \"Product Category, e.g. App Services\", \"type\": \"string\" },\n                        \"licensed\": { \"description: \"Count of purchased licenses\", \"type\": \"numeric\" },\n                        \"info\": { \"description: \"Optional description or web page of product.\", \"type\": \"string\" }\n                    }\n                }        \n            \n            "
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SaasManageGetAppIDByServiceName": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetZsoHostInfo": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "ActionResult containing the Zso host information."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "GoogleDirectoryAuthCallback": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The ActionResult from processing the call."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigGetEditableMessageTemplate": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "DisplayType": {
                "type": "string",
                "description": "The message template display type."
              },
              "Substitutions": {
                "type": "array",
                "description": "A list of substitutable templates.",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              },
              "TemplateName": {
                "type": "string",
                "description": "The template name."
              },
              "Type": {
                "type": "string",
                "description": "The message template type."
              },
              "ModifiedLanguages": {
                "type": "array",
                "description": "A list of languages available for the message template.",
                "items": {
                  "type": "string"
                }
              },
              "Name": {
                "type": "string",
                "description": "The message template name."
              }
            },
            "description": "An editable message template."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "AuthProfileGetProfile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Challenges": {
                "type": "array",
                "description": "Selected authentication mechanisms.",
                "items": {
                  "type": "string"
                }
              },
              "AdditionalData": {
                "type": "object",
                "properties": {},
                "description": "DataEntity with additional data (default=null)."
              },
              "Uuid": {
                "type": "string",
                "description": "Profile UUID."
              },
              "SingleChallengeMechanisms": {
                "type": "string",
                "description": "Selected single authentication mechanisms."
              },
              "DurationInMinutes": {
                "type": "integer",
                "description": "How many minutes the profile is valid."
              },
              "Name": {
                "type": "string",
                "description": "Profile name."
              }
            },
            "description": "Authentication profile."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetDirectories": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "A list of sub directories"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityWhoAmI": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Is the user authenticated."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UPRestUpdateUserApplication": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Whether the operation is successful or not."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationRemoveUserFromFederatedGroup": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard results."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtRemoveUsers": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "IdentityProofingUpdateIdentityVerificationConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "success result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreCreateUserHomeReportsDirectory": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Was the folder add successful."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicyGetPolicyString": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The string value returned by the policy."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "LDAPDirectoryServiceTestUserLookup": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "integer",
            "description": "!!! fix this - it's not 'description', this is just a PH !!!"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ZsoAuthenticateSession": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard Json Result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CollectionUpdateMembersCollection": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "success or failure of the members collection update"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtAnalyzeAdaptiveMfaRisk": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Risk level returned by the risk check, 'SystemUnavailable' indicates an error of some kind."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityTwilioPhoneChallengeNotAnswered": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The response xml found in the request."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "IdentityProofingGetWorkflowInfo": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceSignup": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "UUID of the created user, authtoken if AutoLogin true,  verificationid and status if IsEmailVerificationRequired true."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigSetSMTPConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "LDAPDirectoryServiceGetLDAPDirectoryServiceConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The requested LDAP service config."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "IdentityProofingIsIdentityProofingEnabled": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "RadiusGetUserIdentifierAttributes": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "The list of user identifier attribute types.",
            "items": {
              "type": "string"
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "MobileKnoxResetContainerPassword": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OathSetResponseParamsToEntity": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "AclCheckRowRight": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the row right check succeed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetFileRolesAndRights": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "Role and rights for a file.",
            "items": {
              "type": "object",
              "properties": {
                "Role": {
                  "type": "string",
                  "description": "The file ace principal."
                },
                "Rights": {
                  "type": "string",
                  "description": "The rights the principal has."
                }
              },
              "description": "A file role and right."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecuritySetUserSecurityImage": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "standard json"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreEnableBlockedIpRange": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreUpdateBlockedIpRange": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The uuid if the range created, or modified. Null if not successful"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreDownloadFile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "ActionResult containing the contents of the downloaded file."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtChangeUserPassword": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OAuth2Introspect": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "exp": {
                "type": "string",
                "description": "The expiration time of the token in seconds "
              },
              "scope": {
                "type": "string",
                "description": "A space-delimited list of scopes of the token."
              },
              "active": {
                "type": "string",
                "description": "The active field in the response indicates if the token is currently active or not"
              },
              "sub": {
                "type": "string",
                "description": "The subject of the token."
              }
            },
            "description": "Normalized information about the token."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Normalized information about the token.\",\n                type: \"object\",\n                properties:\n                {\n                    sub: { description: \"The subject of the token.\", type: \"string\" },\n                    scope: { description: \"A space-delimited list of scopes of the token.\", type: \"string\" }, \n                    exp: { description: \"The expiration time of the token in seconds \", type: \"string\" },\n                    active: { description: \"The active field in the response indicates if the token is currently active or not\", type:\"string\" }\n                }\n            }\n            "
          }
        }
      },
      "CoreDeleteCertificate": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "Did the certificates get deleted.",
            "items": {
              "type": "object",
              "properties": {
                "Thumbprint": {
                  "type": "object",
                  "description": "Thumbprint that failed to remove a certificate."
                },
                "name": {
                  "type": "object",
                  "description": "The name of the certificate."
                },
                "ErrorMsg": {
                  "type": "object",
                  "description": "The exception error message."
                }
              },
              "description": "A list of thumbprints that failed to remove a certificate."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ConsentManagementGetScriptWithMetaData": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UPRestUpsertTagsForApp": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Whether the operation is successful or not."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerAgentVerifyPasswordV2": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "PasswordExpDate": {
                "type": "string",
                "description": "Expiry date and time of the password in UTC (in ISO 8601 format)."
              },
              "Success": {
                "type": "boolean",
                "description": "Whether the user and password are authenticated."
              },
              "IsPasswordExpired": {
                "type": "boolean",
                "description": "Whether the password is expired."
              }
            },
            "description": "Results from verifying the password."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "VfsGetFile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The file."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationSPSigningCertificate": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The SP signing certificate."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceRemoveAuthSource": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard reponse with 'Completed' is run syncronously, or the Job Id if run asyncronously."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityAdvanceAuthentication": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ErrorID": {
                "type": "string",
                "description": "The error ID if any. Default value is null. "
              },
              "ErrorCode": {
                "type": "string",
                "description": "The error code if any. Default value is null. "
              },
              "Exception": {
                "type": "string",
                "description": "Exception returned by the API. Default value is null. "
              },
              "MessageID": {
                "type": "string",
                "description": "Error message ID. Default value is null."
              },
              "Result": {
                "type": "object",
                "properties": {
                  "EmailAddress": {
                    "type": "string",
                    "description": "Email address of the user "
                  },
                  "Auth": {
                    "type": "string",
                    "description": "A one-time authentication token for the user "
                  },
                  "SourceDsType": {
                    "type": "string",
                    "description": "SourceDsType"
                  },
                  "CustomerID": {
                    "type": "string",
                    "description": "Customer ID would be same as the tenant ID "
                  },
                  "UserId": {
                    "type": "string",
                    "description": "This is a random generated ID that is used to identify the user uniquely."
                  },
                  "DisplayName": {
                    "type": "string",
                    "description": "Display name of the user. This value is provided at the time the user is created. "
                  },
                  "AuthLevel": {
                    "type": "string",
                    "description": "AuthLevel"
                  },
                  "PodFqdn": {
                    "type": "string",
                    "description": "The fully qualified domain name for the Pod. Ex: abc-123.my.idaptive.app User "
                  },
                  "User": {
                    "type": "string",
                    "description": "The username of the user  "
                  },
                  "UserDirectory": {
                    "type": "string",
                    "description": "The directory to which the given user belongs. Ex: CDS – If the user belongs to CyberArk Identity cloud directory service "
                  },
                  "Summary": {
                    "type": "string",
                    "description": "Summary"
                  },
                  "SystemID": {
                    "type": "string",
                    "description": "System ID would be same as the tenant ID "
                  }
                },
                "description": "The result received from the Identity cloud. "
              },
              "InnerExceptions": {
                "type": "string",
                "description": "Inner exceptions if any. Default value is null. "
              },
              "Message": {
                "type": "string",
                "description": "Error message if any. Default value is null. "
              },
              "success": {
                "type": "string",
                "description": "success"
              },
              "IsSoftError": {
                "type": "string",
                "description": "IsSoftError"
              }
            },
            "description": "Below is the response structure if the API request is successful. "
          },
          "Error": {
            "type": "object",
            "properties": {
              "ErrorMessage": {
                "type": "string",
                "description": "Authentication (login or challenge) has failed. Please try again or contact your system administrator."
              }
            },
            "description": "The below error message is displayed when the request to the API contains wrong mechanism ID/ session ID/ Answer. "
          }
        }
      },
      "CoreGetAdLoginSuffixesByForest": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of domains in the forest.",
            "items": {
              "type": "string"
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityLogout": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the user logout succeed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UPRestDeleteTag": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Whether the operation is successful or not."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SaasManageAddUsersAndGroupsToRole": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetDirectoryContents": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Type": {
                "type": "string",
                "description": "Directory or file depending on what the Name is."
              },
              "Path": {
                "type": "string",
                "description": "The file/directory path."
              },
              "Perms": {
                "type": "array",
                "description": "The permissions on the file/directory.",
                "items": {
                  "type": "string"
                }
              },
              "Name": {
                "type": "string",
                "description": "File/Directory name."
              }
            },
            "description": "A list of directories and files found in the path."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigGetGoogleKey": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "googleKey": {
                "type": "string",
                "description": "The google key."
              },
              "CustomReCaptchaSiteKey": {
                "type": "string",
                "description": "The site key is used to invoke the reCAPTCHA service on your site."
              },
              "GoogleKeyEnabled": {
                "type": "boolean",
                "description": "Is the google key enabled for this tenant."
              },
              "CustomReCaptchaSecretKey": {
                "type": "string",
                "description": "The secret key authorizes communication between your application backend and the reCAPTCHA server to verify the user's response."
              },
              "IsCustomCaptchaSettingsEnabled": {
                "type": "boolean",
                "description": "Enabling this option to use custom reCAPTCHA settings for your tenant."
              }
            },
            "description": "The google client key for the tenant."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetUniqueFileName": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "A file name that is unique within the path. If the name parameter had a file extension, this name will too."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ExtDataUpdateSchema": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the extended columnar schema get set."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerAgentAddEnrollmentCode": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "The result of the enrollment."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "JobFlowGetJob": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The requested job record"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreDeletePremDetectRange": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the IP range delete succeed."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Did the IP range delete succeed.\", type: \"boolean\"\n            }\n            "
          }
        }
      },
      "UserMgmtRemoveUser": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetAdTopology": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "\n                description: \"An EnvironmentInfo object describing the directory service or domain name requested.\",\n                type: \"object\",\n                properties:\n                {\n                    CurrentDtUtc: { description: \"Current UTC time.\", type: \"string\" },\n                    MsSpentForDiscovery: { description: \"The time spent to discover the topology in Milliseconds.\", type: \"integer\" },\n                    CurrentUserDomain: { description: \"Current user domain.\", type: \"string\" },\n                    CurrentForest: { description: \"Forest this environment resides in.\", type: \"string\" },\n                    CurrentDomain: { description: \"Domain of this environment.\", type: \"string\" },\n                    CurrentSite: { description: \"This environment's site.\", type: \"string\" },\n                    MachineSid: { description: \"The machine unique identifier.\", type: \"string\" },\n                    Joined: { description: \"Is the environment domain joined.\" , type: \"boolean\" },\n                    DirectoryServiceUuid: { description: \"The environment's directory service Uuid.\", type: \"string\" },\n                    ProxyUuid: { description: \"The environment's connector Uuid.\", type: \"string\" },\n                    CloudReceiptTimestampUtc: { description: \"The UTC time of cloud reciept.\", type: \"string\" },\n                    Forests \n                    { \n                        description: \"A list of forests in this environment.\",\n                        type: \"array\",\n                        items:\n                        {\n                            description: \"A ForestInfo in this environment.\",\n                            item: \"object\", \n                            properties:\n                            {\n                                Name: { description: \"The forest name.\", item: \"string\" },\n                                IsCurrentForest: { description: \"Is this forest in the current forest.\", item: \"boolean\" },\n                                ForestMode: { description: \"The forest mode.\", item: \"string\" },\n                                RootDomainName: { description: \"The root domain name.\", item: \"string\" },\n                                ForestTrusts: { description: \"List of TrustInfo objects.\", type: \"array\", items: { type: \"object\" },\n                                Domains: { description: \"List of DomainInfo objects.\", type: \"array\", items: { type: \"object\" },\n                                Sites: { description: \"List of SiteInfo objects.\", type: \"array\", items: { type: \"object\" },\n                                Links: { description: \"List of LinkInfo objects.\", type: \"array\", items: { type: \"object\" },\n                                ForestException { description: \"Exception descriptions for this forest.\", item: \"string\" }\n                            }\n                        }\n                    },\n                    HasOnlineWhitelistedController: {description: \"Is there at least one online whitelisted controller for this connector?\", type: \"boolean\" },\n                    EnvironmentInfoException: { description: \"Exception descriptions for this environment.\", item: \"string\" }\n            "
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicyDeleteAuthPolicyModifier": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the policy modifier get deleted."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"Did the policy modifier get deleted.\", type: \"boolean\"\n            }\n            "
          }
        }
      },
      "CoreGeneratePassword": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The generated password."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityStartSocialAuthentication": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "ErrorID": {
                "type": "string",
                "description": "ErrorID"
              },
              "ErrorCode": {
                "type": "string",
                "description": "ErrorID"
              },
              "MessageID": {
                "type": "string",
                "description": "MessageID"
              },
              "Result": {
                "type": "object",
                "properties": {
                  "Status": {
                    "type": "string",
                    "description": "Status of the endpoint"
                  },
                  "IdpRedirectUrl": {
                    "type": "string",
                    "description": "Idp Redirect Url"
                  }
                },
                "description": "Result"
              },
              "InnerExceptions": {
                "type": "string",
                "description": "ErrorID"
              },
              "Message": {
                "type": "string",
                "description": "Message"
              },
              "success": {
                "type": "boolean",
                "description": "success"
              },
              "IsSoftError": {
                "type": "string",
                "description": "ErrorID"
              }
            },
            "description": "Provides status whether social authentication started or not"
          },
          "Error": {
            "type": "object",
            "properties": {
              "UnknownIdp": {
                "type": "string",
                "description": "Encountered unexpected error and could not process authentication request."
              },
              "InvalidURI": {
                "type": "string",
                "description": "Redirect URI found in the request is not trusted or valid."
              }
            },
            "description": "Error message text on failure"
          }
        }
      },
      "TaskJobReport": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Simple job metrics from the persistent job system."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationFederationMetadata": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The federation metadata."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The federation metadata.\", type: \"object\"\n            }\n            "
          }
        }
      },
      "CoreSetTenantConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the tenant configuration key value get set."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SocialAuthLinkedInAuthCallback": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "User redirect."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "U2fDeleteU2fDevice": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantCnamesRegister": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Fully qualified cname"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "BrandInfo": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "BrandExperience": {
                "type": "string",
                "description": "The tenant brand experience (Unknown, Legacy, Centrify, Idaptive)."
              },
              "Brand": {
                "type": "string",
                "description": "The tenant brand."
              }
            },
            "description": "The tenant brand information."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "JobFlowDeleteJob": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "True, if the record was deleted"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityOobAuthStatus": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": " A JSON with Oob login information\n            "
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "BrandMyBrand": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The tenant brand."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityRefreshToken": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreProcessProxyIwaCloudRedirect": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "ActionResult containing the result of the redirect."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreReadFile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "FileSystem containing the contents of the read file."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreMoveDirectory": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the directory move succeed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigSetGoogleKey": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreDeleteProxy": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the connector removal succeed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicyGetAuthPolicyModifiers": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of policy modifiers.",
            "items": {
              "type": "string"
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerManageUpdateAccount": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "ID of the updated account"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "JsManageGetDashboardRolesAndRights": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "Role and rights for Dashboards.",
            "items": {
              "type": "object",
              "properties": {
                "PrincipalType": {
                  "type": "string",
                  "description": "The ace principal type."
                },
                "Rights": {
                  "type": "string",
                  "description": "The rights of the principal."
                }
              },
              "description": "A dashboard role and right."
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetProxyIwaHostCertificateFile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "FileResult containing the connector Iwa host certificate."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationUpdateFederationGroupAssertionMappings": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the federation group assertion mappings get updated."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityStartAuthentication": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "success": {
                "type": "boolean",
                "description": "success"
              },
              "MessageID": {
                "type": "string",
                "description": "MessageID"
              },
              "EventDescription": {
                "type": "string",
                "description": "EventDescription"
              },
              "TenantId": {
                "type": "string",
                "description": "The ID of the tenant to which the user is logging in. If this field is not provided, the username must identify the tenant. Ex: abc-123 "
              },
              "Challenges": {
                "type": "object",
                "properties": {
                  "Mechanisms": {
                    "type": "object",
                    "properties": {
                      "PromptSelectMech": {
                        "type": "string",
                        "description": "Prompt for the selected mechanism. Ex: If the selected mechanism is Password then then this field would have the value \u0093Password\u0094 on the UI. "
                      },
                      "PromptMechChosen": {
                        "type": "string",
                        "description": "Prompt for the chosen mechanism. Ex: If the chosen mechanism is Password then then this field would have the value \u0093Enter password\u0094 on the UI. "
                      },
                      "MechanismId": {
                        "type": "string",
                        "description": "This is a random generated ID that is used to identify the mechanism uniquely. This ID is provided in the request body for advance authentication API. "
                      },
                      "AnwerType": {
                        "type": "string",
                        "description": "The answer type for the given mechanism. Ex: If the mechanism is password, \u0093AnswerType\u0094 would be \u0093Answer\u0094 and If the mechanism is email, \u0093AnswerType\u0094 would be \u0093startOOB\u0094"
                      },
                      "Name": {
                        "type": "string",
                        "description": "The name of the MFA mechanism Ex: The name of the password mechanism is \u0093UP\u0094"
                      }
                    },
                    "description": "The list of MFA mechanisms that a user should select and respond"
                  }
                },
                "description": "The challenges consist of an array of MFA mechanisms out of which at least one MFA mechanism should be satisfied by the user to proceed further."
              },
              "Exception": {
                "type": "string",
                "description": "Exception"
              },
              "Version": {
                "type": "string",
                "description": "Version of the API Ex: v1.0 "
              },
              "Message": {
                "type": "string",
                "description": "Message"
              },
              "AllowLoginMfaCache": {
                "type": "boolean",
                "description": "Allows login MFA cache"
              },
              "ErrorID": {
                "type": "string",
                "description": "ErrorID"
              },
              "InnerExceptions": {
                "type": "string",
                "description": "InnerExceptions"
              },
              "SessionId": {
                "type": "string",
                "description": "This is a random generated ID that is used to identify the user session uniquely. This ID is provided in the request body for advance authentication API. "
              },
              "ErrorCode": {
                "type": "string",
                "description": "ErrorCode"
              },
              "RetryWaitingTime": {
                "type": "string",
                "description": "Retry waiting time"
              },
              "Summary": {
                "type": "string",
                "description": "Summary"
              },
              "IsSoftError": {
                "type": "string",
                "description": "IsSoftError"
              },
              "ClientHints": {
                "type": "object",
                "properties": {
                  "AllowPersist": {
                    "type": "boolean",
                    "description": "Allow Persistent cookies"
                  },
                  "PersistDefault": {
                    "type": "boolean",
                    "description": "Persist Default"
                  },
                  "AllowForgotPassword": {
                    "type": "boolean",
                    "description": "This Boolean flag specifies whether the user should be displayed with forgot password link"
                  },
                  "EndpointAuthenticationEnabled": {
                    "type": "boolean",
                    "description": "This Boolean flag specifies whether the endpoint authentication is enabled for the user. "
                  }
                },
                "description": "These client hints are displayed on the login form to the user."
              }
            },
            "description": "The below is the response received from the CyberArk Identity when the request to the API is successful. "
          },
          "Error": {
            "type": "object",
            "properties": {
              "ErrorMessage": {
                "type": "string",
                "description": "Authentication (login or challenge) has failed. Please try again or contact your system administrator."
              }
            },
            "description": "The below error message is displayed when the version provided is invalid and when the user is not recognized by CyberArk Identity."
          }
        }
      },
      "SecurityMultiAuthLogin": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the login succeed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreUpdatePremDetectRange": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The uuid if the range created, or modified. Null if not successful"
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The uuid if the range created, or modified. Null if not successful\", type: \"string\"\n            }\n            "
          }
        }
      },
      "CoreGetSupportedCultures": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "native name": {
                "type": "string",
                "description": "Culture native name"
              },
              "code": {
                "type": "string",
                "description": "Culture code value"
              }
            },
            "description": "Culture map, code to native name, multiple entries."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ConsentManagementGetConsentManagementProviderConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreCreateDirectory": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Was the directory creation successful."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceSendIdentityVerificationOTP": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "GUID for the storage result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerManageGetAllADTopologyWithAdministrativeAccounts": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "DomainID": {
                "type": "string",
                "description": "Domain id"
              },
              "Children": {
                "type": "array",
                "description": "List of sub-domain data",
                "items": {
                  "type": "object",
                  "properties": {}
                }
              },
              "AdministrativeAccount": {
                "type": "object",
                "properties": {
                  "UserID": {
                    "type": "string",
                    "description": "Administrator's id"
                  },
                  "DomainID": {
                    "type": "string",
                    "description": "Domain id"
                  },
                  "Domain": {
                    "type": "string",
                    "description": "Domain name"
                  },
                  "FullyQualifiedName": {
                    "type": "string",
                    "description": "Domain qualified administrator username"
                  },
                  "Name": {
                    "type": "string",
                    "description": "Administrator's username"
                  }
                },
                "description": "Detailed information of the domain."
              },
              "Domain": {
                "type": "string",
                "description": "Domain name"
              }
            },
            "description": "List of domain data"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerAgentEnableFeatures": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicyGetUsingCloudMobileGP": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "refreshInterval": {
                "type": "integer",
                "description": "The policy refresh interval."
              },
              "useCloudCA": {
                "type": "boolean",
                "description": "Use cloud certificate authority."
              },
              "useCloudGP": {
                "type": "boolean",
                "description": "Use cloud group policy."
              },
              "hideMobilePolicyForAD": {
                "type": "boolean",
                "description": "Hide the mobile policy for active directory."
              },
              "boundMobileForest": {
                "type": "string",
                "description": "The forest name."
              },
              "cloudOuManagement": {
                "type": "boolean",
                "description": "Use cloud organization management."
              },
              "activeDirectoryCA": {
                "type": "string",
                "description": ""
              },
              "gpUpdateInterval": {
                "type": "integer",
                "description": "The policy update interval."
              },
              "hasProxy": {
                "type": "boolean",
                "description": "Is a proxy present."
              }
            },
            "description": "The mobile group policy."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityAdvanceForgotUsername": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "An MFA return code (for success or failure)."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OathResynchronizeOathToken": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UPRestGetTagsForApp": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "List of tag names",
            "items": {
              "type": "string"
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SysInfoDummy": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "Does nothing (always returns null)."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationAddGlobalGroupAssertionMapping": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the global group assertion mapping get added."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetOUTreeContents": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "OU or domains list"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OAuth2EndSession": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "\n            The response indicates 302 Found if the session was successfully destroyed and the user redirected.\n            "
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SocialAuthMgmtGetCustomConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "An identity provider configuration."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "RadiusSetConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreEnablePremDetectRange": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreSetProxyIwaSettings": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Hostname": {
                "type": "string",
                "description": "The host name of the connector."
              },
              "Name": {
                "type": "string",
                "description": "The proxies name."
              },
              "HttpPort": {
                "type": "integer",
                "description": "Hyper text transport port number."
              },
              "Port": {
                "type": "integer",
                "description": "Port number for the connector."
              },
              "Enabled": {
                "type": "boolean",
                "description": "Is the connector enabled."
              },
              "WebProxyEnabled": {
                "type": "boolean",
                "description": "Should the web connector be enabled."
              },
              "WinNetProxyEnabled": {
                "type": "boolean",
                "description": "Should the WinNet service (to provision and deprovision users on machines) be enabled."
              },
              "CertThumbprint": {
                "type": "string",
                "description": "certificate thumbprint"
              },
              "IwaCheckTimeout": {
                "type": "integer",
                "description": "The Iwa timeout value to use."
              },
              "WebProxyPort": {
                "type": "integer",
                "description": "The port used by the web connector."
              }
            },
            "description": "The connector that got set"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ExtDataGetColumn": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "The value strongly typed as the type of the column"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityForgotUsername": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtChangeUserAttributes": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecuritySubmitOathOtpCode": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SaasManageGetApplication": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "_RowKey": {
                "type": "string",
                "description": "Application ID"
              },
              "Url": {
                "type": "string",
                "description": "Application Url"
              },
              "AdminTag": {
                "type": "string",
                "description": "Application admin tag"
              },
              "Description": {
                "type": "string",
                "description": "Application description"
              },
              "Category": {
                "type": "string",
                "description": "Application category"
              },
              "Name": {
                "type": "string",
                "description": "Application name"
              },
              "Reference": {
                "type": "integer",
                "description": "Reference ID of this application template"
              },
              "Generic": {
                "type": "boolean",
                "description": "Whether application is a generic application"
              },
              "UseDefaultSigningCert": {
                "type": "boolean",
                "description": "Whether to use the default signing certificate"
              },
              "TemplateName": {
                "type": "string",
                "description": "Application template name"
              },
              "UserPassScript": {
                "type": "string",
                "description": "UserPass script"
              },
              "PasswordIsSet": {
                "type": "boolean",
                "description": "Whether the password has been set"
              },
              "WebAppType": {
                "type": "string",
                "description": "Application web-app-type"
              },
              "UserNameStrategy": {
                "type": "string",
                "description": "Strategy for mapping username"
              },
              "DisplayName": {
                "type": "string",
                "description": "Application display name"
              },
              "AdminPasswordIsSet": {
                "type": "boolean",
                "description": "Whether admin password has been set"
              },
              "State": {
                "type": "string",
                "description": "Application state"
              },
              "AppTypeDisplayName": {
                "type": "string",
                "description": "Display name of application type"
              },
              "AppType": {
                "type": "string",
                "description": "Application type"
              },
              "Thumbprint": {
                "type": "string",
                "description": "Certificate thumbprint"
              },
              "Handler": {
                "type": "string",
                "description": "Application handler"
              },
              "Icon": {
                "type": "string",
                "description": "Path of application icon image"
              },
              "CertificateSubjectName": {
                "type": "string",
                "description": "Certificate subject name"
              }
            },
            "description": "A list of applications"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "GoogleDirectoryGetServiceLoginUrlInfo": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The state id and service login url."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The state id and service login url.\", type: \"string\"\n            }\n            "
          }
        }
      },
      "CollectionCreateDynamicCollection": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "UUID id reference to the dynamic collection."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceGetDirectoryServiceSettings": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "The directory service configuration."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TenantConfigGetAdvancedConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "\n              List of config table values verbatim...\n              {\n                description: \"Admin Security Question\",\n                properties: \n                {\n                  _PartitionKey: { description: \"Tenant ID\", type: \"string\" },\n                  ID: { \"description\": \"Config value key\", type: \"string\" }\n                  Value: { \"description\": \"Configuration setting\", type: \"string\" }\n                }\n              }\n            "
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetDirectoryInfo": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Type": {
                "type": "string",
                "description": "The resource type, always 'directory'."
              },
              "Path": {
                "type": "string",
                "description": "Full path to the directory."
              },
              "Perms": {
                "type": "string",
                "description": "The caller's permissions on the file."
              },
              "Name": {
                "type": "string",
                "description": "Directory name without the path."
              }
            },
            "description": "Directory information and metadata object"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceRemoveFederationAuthSource": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard reponse with 'Completed' is run syncronously, or the Job Id if run asyncronously."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UPRestSetUserCredsForApp": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Whether the operation is successful or not."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetIwaTrustRootCert": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "File containing the Iwa trust certificate for the tenant."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CollectionCreateManualCollection": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "UUID id reference to the manual collection"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetTenantConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The requested key value."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The requested key value.\", type: \"string\"\n            }\n            "
          }
        }
      },
      "CDirectoryServiceChangeUser": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Success or failure of the change."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ConsentManagementUpdateConsentManagementConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "success result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "UserMgmtInviteUsers": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationGetFederationTypes": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of federation types.",
            "items": {
              "type": "string"
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreUploadCertificate": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The certificate thumbprint."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The certificate thumbprint.\", type: \"string\"\n            }\n            "
          }
        }
      },
      "RadiusGetConfig": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "Port": {
                "type": "integer",
                "description": "Listen port"
              },
              "ReceiveTimeout": {
                "type": "integer",
                "description": "receive timeout in millseconds"
              },
              "Enabled": {
                "type": "boolean",
                "description": "Is radius enabled"
              }
            },
            "description": "Radius connector config information"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationGetGlobalFederationSettings": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "A list of global federation settings.",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityTaskChecks": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {
              "execute": {
                "type": "boolean",
                "description": "Does user have execute rights on this task."
              },
              "task": {
                "type": "string",
                "description": "A task."
              }
            },
            "description": "The list of tasks with the task check result."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceVerifyIdentityOTP": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Result of validation"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicyGetPasswordComplexityRequirements": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "The password complexity requirements for the user."
          },
          "Error": {
            "type": "object",
            "properties": {},
            "description": "\n            {\n                description: \"The password complexity requirements for the user.\", type: \"string\"\n            }\n            "
          }
        }
      },
      "SocialAuthTwitterAuthCallback": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "User redirect."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "TaskCancelJob": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "What happened with the job cancel request (NotFound, PreEmpted, CancelRequested, NotRequired)."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "ServerAgentRegister": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGenerateNewProxyCode": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "Current tenant id dash just created connector id."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecurityGetTokenForUser": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON with accessToken or error message"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "WinDpaDeleteUser": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "description": "Resulting object, if any, of the call"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "RadiusSetClient": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CoreGetDirectoryServices": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "array",
            "description": "The directory services in UI Query Response format.",
            "items": {
              "type": "object",
              "properties": {
                "Service": {
                  "type": "string",
                  "description": "The service name."
                },
                "Name": {
                  "type": "string",
                  "description": "The data service name."
                },
                "Tenant": {
                  "type": "string",
                  "description": "The current tenant id."
                },
                "Everybody": {
                  "type": "boolean",
                  "description": "Can everybody use this service."
                },
                "Description": {
                  "type": "string",
                  "description": "Description of the data service."
                },
                "directoryServiceUuid": {
                  "type": "string",
                  "description": "Unique identifier for the directory service."
                },
                "Config": {
                  "type": "string",
                  "description": "The directory service configuration summary."
                },
                "DisplayName": {
                  "type": "string",
                  "description": "The display name to use for this service."
                },
                "DisplayNameShort": {
                  "type": "string",
                  "description": "Localized version of the display name."
                },
                "Status": {
                  "type": "string",
                  "description": "Status of the service."
                },
                "StatusDisplay": {
                  "type": "string",
                  "description": "Localized version of the status."
                }
              }
            }
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SecuritySubmitQRCode": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard JSON response."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "FederationDeleteGlobalGroupAssertionMapping": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the global group assertion mapping get removed."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "RolesUpdateRole": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "SaasManageDeleteRole": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "Standard result"
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "PolicyGetPolicyBool": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "The boolean value returned by the policy."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "CDirectoryServiceCreateUser": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "object",
            "properties": {},
            "description": "UUID of the created user."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      },
      "OathSaveProfile": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "boolean",
            "description": "Did the user profile get saved."
          },
          "Error": {
            "type": "object",
            "description": "Error message text on failure, may be null"
          }
        }
      }
    }
  },
  "x-explorer-enabled": false
}